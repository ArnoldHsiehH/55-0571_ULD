using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Windows.Forms;

namespace HirataMainControl
{
    public partial class UserCore : UserControl
    {
        public delegate void Mode_Change_Event( EFEMMode Mode);
        public event Mode_Change_Event Change_EFEM_Mode;

        public class CoreData
        {
            public int NowStep = 0;  //現在的 flow step
            public int NowIndex = 0; //現在跑的哪一個flow

            public int TotalCount = 0;
            public int LimitCount = 0;   //Carrier Limit = 3 1/2/3
            public int[] WaferCount = new int[(int)Core_Loop.MaxCnt];  //Wafer Limit
            public int LoopCount = 100;
            public List<string> NeedMappingList = new List<string>();

            public string NowPort = "";
            public int NowSlot = 1;
            public int NowStage = 0;
            public string NowCondition = "";
            public bool NowArm = false;
            public int NowLoop = (int)Core_Loop.MaxCnt;

            public RobotGPT RobotGPTType = RobotGPT.MaxCnt;
            public WaferStatus Check_RobotPresence = WaferStatus.Unknown;
            public WaferStatus Check_DevicePresence = WaferStatus.Unknown;

            public bool IsOMS = false;
            public bool IsWork = true;
            public bool IsExchange = false;
            public bool IsFirstStage = false;
            public bool IsFirstExchange = false;
            public int ExchageStage = 0;
            public DataTable Core_Dt;
            public string OMS_Port = "";
            public int OMS_Slot = 1;

            public bool[] StageCanMix = new bool[2];
            public List<int> UnloadPort = new List<int>();

            
            /// <summary>
            /// NeedMappingList
            /// </summary>
            public void Core_Reset() 
            {
                NowStep = 0;  //現在的 flow step
                NowIndex = 0; //現在跑的哪一個flow

                TotalCount = 0;
                LimitCount = 0;   //Carrier Limit = 3 1/2/3
                WaferCount = new int[(int)Core_Loop.MaxCnt];  //Wafer Limit
                LoopCount = 100;

                NowPort = "";
                NowSlot = 1;
                NowStage = 0;
                NowCondition = "";
                NowArm = false;
                NowLoop = (int)Core_Loop.MaxCnt;

                RobotGPTType = RobotGPT.MaxCnt;
                Check_RobotPresence = WaferStatus.Unknown;
                Check_DevicePresence = WaferStatus.Unknown;

                IsOMS = false;
                IsWork = true;
                IsExchange = false;
                IsFirstStage = false;
                IsFirstExchange = false;
                ExchageStage = 0;
                Core_Dt = new DataTable();
                OMS_Port = "";
                OMS_Slot = 1;

                StageCanMix = new bool[2];
                UnloadPort = new List<int>();
            }

        }

        #region Object
        private object Device_Lock = new object();
        CoreData Robot1;
        CoreData Robot2;
        private object Robot1MappingLock = new object();
        private object Robot2MappingLock = new object();
        public HCT_EFEM EFEM;
        public UserSECS SECS;
        public Form_AutoJob CreateJob = new Form_AutoJob();
        #endregion

        #region BG

        public BackgroundWorker InitialBG = new BackgroundWorker();
        public BackgroundWorker Robot1_MappingReadyBG = new BackgroundWorker();
        public BackgroundWorker Robot2_MappingReadyBG = new BackgroundWorker();
        public BackgroundWorker Robot1_BG = new BackgroundWorker();
        public BackgroundWorker Robot2_BG = new BackgroundWorker();
        public BackgroundWorker Device_BG = new BackgroundWorker(); 

        #endregion

        #region Queue/List

        private List<SQLWaferInforStep>[] Carrier_Step = new List<SQLWaferInforStep>[(int)Core_Loop.MaxCnt];
        private List<SQLWaferInforStep>[] Wafer_Step = new List<SQLWaferInforStep>[(int)Core_Loop.MaxCnt]; 

        //private BlockQueue<SQLWaferInforStep[]>[] Robot_Step = new BlockQueue<SQLWaferInforStep[]>[2];

        private BlockQueue<string>[] Robot_Queue = new BlockQueue<string>[2];
        private BlockQueue<string> Device_Queue = new BlockQueue<string>();
        private BlockQueue<string> Interrupt_Queue = new BlockQueue<string>();

        #endregion

        CmdStruct Robot1_Data = new CmdStruct();
	    CmdStruct Robot2_Data = new CmdStruct();
        CmdStruct Device_Data = new CmdStruct();

        #region Timeout
        private int AutoTimeoutCount = 0;
        private const int AUTO_TIMEOUT = 120;
        private const int STAGE_TIMEOUTOUT = 60;
        private const int ROBOT_TIMEOUT = 60;
        private const int IOLP_TIMEOUT = 60;
        private const int ALIGNER_TIMEOUT = 60; 

        #endregion

        #region Variable

        //private bool Robot1.NowArm;
        //private string SourceDevice;
       // private int SourecSlot;
       // private string DestinationDevice;
       // private int DestinationSlot;
       // private string Condition; 

        #endregion

        #region Get/Set

        public bool Busy
        {
            set;
            get;
        }

        private string EFEM_Work
        {
            set
            {
                if (InvokeRequired)
                {
                    this.Invoke(new MethodInvoker(delegate() { EFEM_Work = value; }));
                    return;
                }

                labEFEMWork.Text = value;
            }
        }

        private string Robot1_Work
        {
            set
            {
                if (InvokeRequired)
                {
                    this.Invoke(new MethodInvoker(delegate() { Robot1_Work = value; }));
                    return;
                }

                labRobot1Work.Text = value;
            }
        }

        private string Robot2_Work
        {
            set
            {
                if (InvokeRequired)
                {
                    this.Invoke(new MethodInvoker(delegate() { Robot2_Work = value; }));
                    return;
                }

                labRobot2Work.Text = value;
            }
        }

        #endregion

        //Joanne 20201009 Add Start
        public bool IsSetJobComplete_RB1;
        public bool IsSetJobComplete_RB2;
        //Joanne 20201009 Add End

        public string NowR1StepForLog = "";
        public string NowR2StepForLog = "";

        #region Initial

        public UserCore()
        {
            InitializeComponent();
        }

        public void Initial(HCT_EFEM _EFEM, UserSECS _SECS )
        {
            EFEM = _EFEM;
            EFEM.Initial();
            


            DataTable WaferDt = SQLite.ReadDataTable(SQLTable.PJ_Pool, "1=1");
            dgvQueuePJ.DataSource = WaferDt;

            //Mapping
            Robot1_MappingReadyBG.DoWork += new DoWorkEventHandler(this.Robot1_Ready_DoWork);
            Robot1_MappingReadyBG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CompletedBG);

            Robot2_MappingReadyBG.DoWork += new DoWorkEventHandler(this.Robot2_Ready_DoWork);
            Robot2_MappingReadyBG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CompletedBG);
      

            //Initial
            InitialBG.DoWork += new DoWorkEventHandler(Initial_DoWork);
            InitialBG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CompletedBG);

            //Robot1
            Robot_Queue[0] = new BlockQueue<string>();
            Robot1_BG.DoWork += new DoWorkEventHandler(this.Robot1_DoWork);
            Robot1_BG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CompletedBG);

            //Robot2
            Robot_Queue[1] = new BlockQueue<string>();
            Robot2_BG.DoWork += new DoWorkEventHandler(this.Robot2_DoWork);
            Robot2_BG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CompletedBG);
            //Device
            Device_BG.DoWork += new DoWorkEventHandler(this.Device_DoWork);
            Device_BG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CompletedBG);

           // Refresh_StatusItem();
            Refresh_System();

            Robot1 = new CoreData();
            Robot2 = new CoreData();

            SECS = _SECS;
            SECS.Initial();
            SECS.CarrierActionChange += new UserSECS.CarrierActionEvent(SecsToDeviceCommand);
            SECS.RecipeChange += new UserSECS.RecipeChangeEvent(SecsRecipeChange);
            SECS.PortReload += new UserSECS.PortReloadEvent(SecsPortReloadRequest); // 20201109 Walson 用SECS指令來觸發Magazine Load動作
            SECS.StopRequest += new UserSECS.StopCommandEvent(HostTriggerStop);
        } 

        #endregion

        #region BG_4

        #region Robot1

        private void Robot1_DoWork(object sender, DoWorkEventArgs e)
        {
            string Robot1_Deq = "";
            Robot1.Core_Reset();
            AutoTimeoutCount = 0;
            Refresh_System();

            EFEM.Robot_RecQueue[0].Clear();
            Robot_Queue[0].Clear();
            Interrupt_Queue.Clear();

            UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, "Robot1");

            if (EFEM.CheckRobotArmSafety(0, SocketCommand.WaferGet) == false)
            {
                e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot Arm Extend");
                Robot1_Work = "TBD";
                return;
            }

            CreaterWaferStep(ref Robot1);

            Refresh_WaferItem();

            if(Device_BG.IsBusy == false)
                Device_BG.RunWorkerAsync();

            if (HT.EFEM.Mode == EFEMMode.Local)
            {
                if (HT.Recipe.IsAligner && EFEM.Robot_ArmExtend(0, false) == ArmStatus.Arm_Home && EFEM.Robot_ArmExtend(0, true) == ArmStatus.Arm_Home &&
                  Alinger_Command(SocketCommand.CycleHomeCheckDegree, 0, string.Format("{0},{1}",
                                                                                        ((Math.Round(Convert.ToDouble(HT.Recipe.Aligner_Degree), 1, MidpointRounding.AwayFromZero) * 10).ToString()).PadLeft(4, '0')
                                                                                        , ((Math.Round(Convert.ToDouble(HT.Recipe.OCR_Degree), 1, MidpointRounding.AwayFromZero) * 10).ToString()).PadLeft(4, '0'))) == false)
                {
                    e.Result = string.Format("{0},{1}", NormalStatic.Auto, NormalStatic.False, "Aligner Home fail");
                    Robot1_Work = "TBD";
                    return;
                }
            }

            while (true)
            {
                Robot1_Deq = Robot_Queue[0].DeQueue(Robot1.LoopCount);

                if (Robot1_Deq == NormalStatic.Stop) 
                {
                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, " Process Interrupt");
                    break;
                }

                if (Robot1.NeedMappingList.Count != 0)
                {
                    SpinWait.SpinUntil(() => false, 100);
                    int MappingPort = int.Parse(Robot1.NeedMappingList[0]);

                    if (EFEM.CP_Presence(MappingPort) == false)
                    {
                        Robot1.NeedMappingList.RemoveAt(0);
                    }
                    else if (EFEM.CP_GetOutDoorOpen(MappingPort) == IOLPDoor.Open
                    &&  EFEM.CP_Busy(MappingPort) == false) 
                    {
                        Robot1.NeedMappingList.RemoveAt(0);
                    }
                    else if (EFEM.CP_Presence(MappingPort) == true
                        && EFEM.CP_GetInDoorOpen(MappingPort) == IOLPDoor.Open
                        && EFEM.CP_Busy(MappingPort) == false
                        && EFEM.RobotBusy(0) == false
                        && EFEM.Robot_ArmExtend(0, false) == ArmStatus.Arm_Home
                        && EFEM.Robot_ArmExtend(0, true) == ArmStatus.Arm_Home
                        && EFEM.Robot_ArmTurn(0) == ArmStatus.Arm_Home
                        && EFEM.AlignerPresence(0) == WaferStatus.WithOut)
                    {

                        if (Robot1_Ready_Command(SocketCommand.RobotMapping, true, string.Format("{0}{1}", NormalStatic.CstPort, MappingPort + 1)) == false)
                        {
                            Robot1.NeedMappingList.RemoveAt(0);
                            e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot1 Mapping Fail");
                            break;
                        }
                        Robot1.NeedMappingList.RemoveAt(0);

                    }
                }

                lock (Robot1MappingLock)
                {
                    if (EFEM.RobotBusy(0) == false)
                    {
                        #region Read_SQL
                        //Wayne 20190913
                        Robot1.Core_Dt = SQLite.ReadDataTableLimit(SQLTable.PJ_Pool,
                                                             string.Format("{0}!= '{1}' and {2} like '%{3}%'", WaferInforTableItem.WaferStatus, SQLWaferInforStep.Finish, WaferInforTableItem.SocPort, NormalStatic.CstPort),
                                                             Robot1.WaferCount[(int)HT.Recipe.AutoMode]);

                        if (Robot1.Core_Dt.Rows.Count == 0)
                            continue;

                        #region 20201130 Walson(若第一筆Job是OMS則不執行任何動作)

                        if (HT.Recipe.AutoMode == PJ_Type.Load
                        && Convert.ToBoolean(Robot1.Core_Dt.Rows[0][(int)WaferInforTableItem.IsOMS]) == true)
                            continue;


                        #endregion 20201130 Walson

                        #region 20201130 Walson(若PJ Pool抓取的資料同時包含Carrier與OMS ,則要刪除OMS及OMS以後的Job, 避免搬送異常)

                        if (HT.Recipe.AutoMode == PJ_Type.Load
                        && Convert.ToBoolean(Robot1.Core_Dt.Rows[0][(int)WaferInforTableItem.IsOMS]) == false)
                        {
                            for (int row = 1; row < Robot1.Core_Dt.Rows.Count; row++)
                            {
                                if (Convert.ToBoolean(Robot1.Core_Dt.Rows[row][(int)WaferInforTableItem.IsOMS]) == true)
                                    while (row != Robot1.Core_Dt.Rows.Count)
                                        Robot1.Core_Dt.Rows.RemoveAt(row);
                            }
                        }

                        #endregion 20201130 Walson

                        // Joanne 20201009 Add Start
                        if (!IsSetJobComplete_RB1)
                        {
                            SetJobInfo();
                        }
                        //Joanne 20201009 Add End

                        if ((Robot1.Core_Dt.Rows.Count == Robot1.WaferCount[(int)HT.Recipe.AutoMode]) && Robot1.WaferCount[(int)HT.Recipe.AutoMode] != 1)
                        {
                            Robot1.TotalCount = Robot1.WaferCount[(int)HT.Recipe.AutoMode];
                        }
                        else
                        {
                            Robot1.TotalCount = Robot1.Core_Dt.Rows.Count;
                        }

                        Robot1.NowLoop = (int)HT.Recipe.AutoMode;

                        Robot1.NowStep = Wafer_Step[Robot1.NowLoop].FindIndex(x => x.ToString() == Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.WaferStatus].ToString());


                        Robot1.NowPort = Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SocPort].ToString();

                        Robot1.NowSlot = Convert.ToInt32(Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SocSlot].ToString());

                        Robot1.NowStage = Convert.ToInt32(Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.StagePos]) - 1;

                        Robot1.NowCondition = string.Format("{0}= '{1}' and {2}= {3}",
                                            WaferInforTableItem.SocPort,
                                            Robot1.NowPort,
                                            WaferInforTableItem.SocSlot,
                                            Robot1.NowSlot);

                        Robot1.IsWork = true;

                        int port = Convert.ToInt16(Robot1.NowPort.Substring(NormalStatic.CstPort.Length, Robot1.NowPort.Length - NormalStatic.CstPort.Length)) - 1;

                        #region Set_RobotArm

                        if ((SQLWaferInforStep.Down_Start < Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]) && (SQLWaferInforStep.Down_End > Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]))
                        {
                            if (HT.Recipe.IsUseLower == false)
                                Robot1.NowArm = true;
                            else
                                Robot1.NowArm = false;
                        }
                        else if ((SQLWaferInforStep.Up_Start < Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]) && (SQLWaferInforStep.Up_End > Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]))
                        {
                            if (HT.Recipe.IsUseUpper == false)
                                Robot1.NowArm = false;
                            else
                                Robot1.NowArm = true;
                        }

                        #endregion

                        #region Set_RobotRule

                        if ((SQLWaferInforStep.UpGet_Statr < Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]) && (SQLWaferInforStep.UpGet_End > Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1])
                         || (SQLWaferInforStep.DownGet_Statr < Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]) && (SQLWaferInforStep.DownGet_End > Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]))
                        {
                            Robot1.Check_RobotPresence = WaferStatus.WithOut;
                            Robot1.Check_DevicePresence = WaferStatus.With;
                            Robot1.RobotGPTType = RobotGPT.Get;
                        }
                        else if ((SQLWaferInforStep.UpPut_Statr < Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]) && (SQLWaferInforStep.UpPut_End > Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1])
                              || (SQLWaferInforStep.DownPut_Statr < Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]) && (SQLWaferInforStep.DownPut_End > Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1]))
                        {
                            Robot1.Check_RobotPresence = WaferStatus.With;
                            Robot1.Check_DevicePresence = WaferStatus.WithOut;
                            Robot1.RobotGPTType = RobotGPT.Put;
                        }

                        #endregion

                        #endregion

                        #region Robot_ActionStep

                        NowR1StepForLog = Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1].ToString();

                        switch (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1])
                        {
                            #region CP

                            case SQLWaferInforStep.Up_Get_Cassette_ing:
                            case SQLWaferInforStep.Down_Get_Cassette_ing:
                            case SQLWaferInforStep.Down_Put_Cassette_ing:
                            case SQLWaferInforStep.Up_Put_Cassette_ing:
                                {
                                    if (EFEM.CP_Busy(port) == false && EFEM.CP_GetInDoorOpen(port) == IOLPDoor.Open && EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence)
                                    {
                                        if (Robot1_ExhchageRule(ref Robot1))
                                        {
                                            Robot1.IsWork = Robot1_WaferGetPut(Robot1.NowPort, Robot1.NowSlot, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);

                                            // 20210315-Walson- Local模式下完成Job，不會Unload Cassette Port
                                            //if (Robot1.IsWork && HT.EFEM.Mode == EFEMMode.Local && (Robot1.RobotGPTType == RobotGPT.Put || (Robot1.RobotGPTType == RobotGPT.Get && HT.Recipe.AutoMode == PJ_Type.Sortering))
                                            //    && Robot1.UnloadPort.IndexOf(port) < 0)
                                            //    Robot1.UnloadPort.Add(port);
                                        }
                                    }
                                }
                                break;

                            case SQLWaferInforStep.Dest_Down_Put_Cassette_ing:
                                {
                                    Robot1.OMS_Port = Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.DesPort].ToString();
                                    Robot1.OMS_Slot = Convert.ToInt32(Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.DesSlot]);

                                    int OMS_Index = Convert.ToInt16(Robot1.OMS_Port.Substring(NormalStatic.CstPort.Length, Robot1.OMS_Port.Length - NormalStatic.CstPort.Length)) - 1;
                                    if (EFEM.CP_Busy(OMS_Index) == false
                                        && EFEM.CP_GetInDoorOpen(OMS_Index) == IOLPDoor.Open
                                        && EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence)
                                    {
                                        if (Robot1_ExhchageRule(ref Robot1))
                                            Robot1.IsWork = Robot1_WaferGetPut(Robot1.OMS_Port, Robot1.OMS_Slot, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                        
                                        // 20210315-Walson- Local模式下完成Job，不會Unload Cassette Port
                                        //if (Robot1.IsWork && HT.EFEM.Mode == EFEMMode.Local && Robot1.RobotGPTType == RobotGPT.Put && Robot1.UnloadPort.IndexOf(OMS_Index) < 0)
                                        //    Robot1.UnloadPort.Add(OMS_Index);
                                    }
                                }
                                break;

                            case SQLWaferInforStep.Swap_Up_Put_Cassette_ing:
                            case SQLWaferInforStep.Swap_Down_Put_Cassette_ing:
                                {
                                    Robot1.OMS_Port = Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SwapPort].ToString();
                                    Robot1.OMS_Slot = Convert.ToInt32(Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SwapSlot]);

                                    int OMS_Index = Convert.ToInt16(Robot1.OMS_Port.Substring(NormalStatic.CstPort.Length, Robot1.OMS_Port.Length - NormalStatic.CstPort.Length)) - 1;

                                    if (EFEM.CP_Busy(OMS_Index) == false
                                     && EFEM.CP_GetInDoorOpen(OMS_Index) == IOLPDoor.Open
                                     && EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence)
                                    {
                                        if (Robot1_ExhchageRule(ref Robot1))
                                        {
                                            Robot1.IsWork = Robot1_WaferGetPut(Robot1.OMS_Port, Robot1.OMS_Slot, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);

                                            // 20210315-Walson- Local模式下完成Job，不會Unload Cassette Port
                                            //if (Robot1.IsWork && HT.EFEM.Mode == EFEMMode.Local && Robot1.RobotGPTType == RobotGPT.Put && Robot1.UnloadPort.IndexOf(OMS_Index) < 0)
                                            //    Robot1.UnloadPort.Add(OMS_Index);
                                        }
                                    }
                                }
                                break;

                            #endregion

                            #region Aligner

                            case SQLWaferInforStep.Up_Get_AlignerOCR_ing:
                            case SQLWaferInforStep.Down_Get_AlignerOCR_ing:
                            case SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ing:
                            case SQLWaferInforStep.Up_Get_Aligner_ing:
                            case SQLWaferInforStep.Down_Get_Aligner_ing:
                            case SQLWaferInforStep.Swap_Down_Get_Aligner_ing:
                                {
                                    if (EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence)
                                    {
                                        if (EFEM.AlignerBusy(0) == false && EFEM.AlignerPresence(0) == Robot1.Check_DevicePresence && (EFEM.AlignerUnitStatus(0) == AlignerStatus.FindNotch || EFEM.AlignerUnitStatus(0) == AlignerStatus.ToAngle) && EFEM.AlignerLiftPin(0) == LiftPinEnum.Up)
                                        {
                                            if (Robot1_ExhchageRule(ref Robot1))
                                                Robot1.IsWork = Robot1_WaferGetPut("Aligner1", 1, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                        }
                                    }
                                }
                                break;

                            case SQLWaferInforStep.Up_Put_Aligner_ing:
                            case SQLWaferInforStep.Swap_Up_Put_Aligner_ing:
                            case SQLWaferInforStep.Down_Put_Aligner_ing:
                            case SQLWaferInforStep.Swap_Down_Put_Aligner_ing:
                                {
                                    if (EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence)
                                    {
                                        if (EFEM.AlignerBusy(0) == false && EFEM.AlignerPresence(0) == WaferStatus.WithOut && EFEM.AlignerUnitStatus(0) == AlignerStatus.Home && EFEM.AlignerLiftPin(0) == LiftPinEnum.Up)
                                        {
                                            if (Robot1_ExhchageRule(ref Robot1))
                                                Robot1.IsWork = Robot1_WaferGetPut("Aligner1", 1, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                        }
                                    }
                                }
                                break;

                            case SQLWaferInforStep.Swap_TopGet_Aligner_ing:
                            case SQLWaferInforStep.TopGet_Aligner_ing:
                                {
                                    if (EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence)
                                    {
                                        if (EFEM.AlignerBusy(0) == false && EFEM.AlignerPresence(0) == Robot1.Check_DevicePresence && (EFEM.AlignerUnitStatus(0) == AlignerStatus.FindNotch || EFEM.AlignerUnitStatus(0) == AlignerStatus.ToAngle) && EFEM.AlignerLiftPin(0) == LiftPinEnum.Up)
                                        {
                                            if (Robot1_ExhchageRule(ref Robot1))
                                                Robot1.IsWork = Robot1_WaferGetPut("Aligner1", 1, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.TopWaferGet : SocketCommand.TopWaferPut);
                                        }
                                    }
                                }
                                break;

                            #endregion

                            #region Stage

                            case SQLWaferInforStep.Swap_Up_Get_Stage_ing:
                            case SQLWaferInforStep.Down_Get_Stage_ing:
                            case SQLWaferInforStep.Down_Put_Stage_ing:
                            case SQLWaferInforStep.Swap_Down_Put_Stage_ing:
                                {
                                    if (EFEM.StageReady(Robot1.NowStage) == true
                                     && EFEM.StageBusy(Robot1.NowStage) == false
                                     && EFEM.StageWaferPresence(Robot1.NowStage) == Robot1.Check_DevicePresence 
                                     && EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence
                                     && EFEM.StageWaferPresence(Robot1.NowStage) == Robot1.Check_DevicePresence 
                                     && EFEM.StageWaferAvailable(Robot1.NowStage) == true
                                    )
                                    {
                                        if (Robot1_ExhchageRule(ref Robot1))
                                            Robot1.IsWork = Robot1_WaferGetPut(string.Format("{0}{1}", NormalStatic.Stage, Robot1.NowStage + 1), 1, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                    }
                                }
                                break;

                            case SQLWaferInforStep.TopGet_Stage_ing:
                            case SQLWaferInforStep.TopPut_Stage_ing:
                            case SQLWaferInforStep.Swap_TopPut_Stage_ing:
                                {
                                    if (EFEM.StageReady(Robot1.NowStage) == true
                                     && EFEM.StageBusy(Robot1.NowStage) == false
                                     && EFEM.StageWaferPresence(Robot1.NowStage) == Robot1.Check_DevicePresence 
                                     && EFEM.Robot_ArmPresence(0, Robot1.NowArm) == Robot1.Check_RobotPresence
                                     && EFEM.StageWaferAvailable(Robot1.NowStage) == true
                                        )
                                    {
                                        if (Robot1_ExhchageRule(ref Robot1))
                                            Robot1.IsWork = Robot1_WaferGetPut(string.Format("{0}{1}", NormalStatic.Stage, Robot1.NowStage + 1), 1, Robot1.NowArm, Robot1.RobotGPTType == RobotGPT.Get ? SocketCommand.TopWaferGet : SocketCommand.TopWaferPut);
                                    }
                                }
                                break;

                            #endregion

                            #region Aligner_Aciotn

                            case SQLWaferInforStep.Swap_AlignmentOCR_ing:
                            case SQLWaferInforStep.AlignmentOCR_ing:
                                {
                                    Device_Queue.EnQueue(string.Format("{0}!{1}", Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1].ToString(), Robot1.NowCondition));
                                }
                                break;

                            case SQLWaferInforStep.Swap_AlignmentFinal_ing:
                            case SQLWaferInforStep.AlignmentFinal_ing:
                                {
                                    Device_Queue.EnQueue(string.Format("{0}!{1}", Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1].ToString(), Robot1.NowCondition));
                                }
                                break;

                            case SQLWaferInforStep.Swap_Aligner_OCR_ing:
                            case SQLWaferInforStep.Aligner_OCR_ing:    //OCR
                                {
                                    string TempPort ="";
                                    int TempSlot = 0;
                                    if (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1] == SQLWaferInforStep.Swap_Aligner_OCR_ing)
                                    {
                                        TempPort= Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SwapPort].ToString();
                                        TempSlot = Convert.ToInt32(Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SwapSlot].ToString());
                                    }
                                    else
                                    {
                                        TempPort = Robot1.NowPort;
                                        TempSlot = Robot1.NowSlot;
                                    }

                                    if(HT.Recipe.IsOCR_Up == true)
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.CommandComplete, string.Format("Walson Tag3:{0}", Robot1.NowCondition));
                                        
                                        Device_Queue.EnQueue(string.Format("{0}!{1}!{2}!{3}!{4}",
                                                Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1].ToString(),
                                                Robot1.NowCondition,
                                                "3",
                                                TempPort,
                                                TempSlot
                                                ));
                                    }
                                    else
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.CommandComplete, string.Format("Walson Tag4:{0}", Robot1.NowCondition));
                                        
                                        Device_Queue.EnQueue(string.Format("{0}!{1}!{2}!{3}!{4}",
                                               Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1].ToString(),
                                               Robot1.NowCondition,
                                               "4",
                                                TempPort,
                                                TempSlot
                                               ));
                                    }
                                    Thread.Sleep(100); //20201120 Walson
                                }
                                break;

                            case SQLWaferInforStep.Swap_RobotArmHome_GP1_ing:
                            case SQLWaferInforStep.RobotArmHome_GP1_ing:
                                {
                                    Robot1.IsWork = Robot1_Auto_Command(SocketCommand.ArmSafetyPosition, "");
                                }
                                break;

                            case SQLWaferInforStep.Swap_RobotArmExtendOCR_ing:
                            case SQLWaferInforStep.Up_RobotArmExtendOCR_ing:
                            case SQLWaferInforStep.Down_RobotArmExtendOCR_ing:
                                {
                                    Robot1.IsWork = Robot1_Auto_Command(SocketCommand.Move_OCRReadPosition, string.Format("{0},{1},{2}", Robot1.NowArm, "Aligner1", 1));
                                }
                                break;

                            #endregion

                            #region Mix

                            case SQLWaferInforStep.Mix_ing:
                                {
                                    //Wayne 0913
                                    Robot1.StageCanMix[Robot1.NowStage] = true;
                                    Device_Queue.EnQueue(string.Format("{0}!{1}!{2}!{3}!{4}!{5}!{6}!{7}!{8}", 
                                                        Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1].ToString(), 
                                                        Robot1.NowCondition, 
                                                        Robot1.NowStage, 
                                                        Robot1.NowPort,
                                                        Robot1.NowSlot,
                                                        Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SocSlotID_Up],
                                                        Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SocSlotID_Down],
                                                        Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.DesPort],
                                                        Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.DesSlotID]
                                                        ));
                                }
                                break;

                            #endregion

                            #region Finish

                            case SQLWaferInforStep.Finish:
                                {
                                    Update_PJ(Robot1.NowCondition, WaferInforTableItem.WaferStatus, SQLWaferInforStep.Finish.ToString());

                                    Robot1.NowIndex = 0;

                                    if (Robot1.TotalCount == 1)
                                    {
                                        Robot1_Work = "TBD";

                                        #region Wait Device complete 20201119 Walson add

                                        if (EFEM.AlignerBusy(0) || EFEM.AlignerCommandResult(0) == CommandResult.Unknown)
                                        {
                                            UI.Log(NormalStatic.System, string.Format("{0}{1}", NormalStatic.Robot, 1), SystemList.CommandComplete, string.Format("Waiting for {0}{1} Execution", NormalStatic.Aligner, 1));

                                            int counter = 0;

                                            while (EFEM.AlignerBusy(0))
                                            {
                                                counter++;
                                                Thread.Sleep(100);

                                                if (EFEM.AlignerCommandResult(0) == CommandResult.OK)
                                                    break;
                                                else if (EFEM.AlignerCommandResult(0) == CommandResult.Fail || counter > 600)
                                                {
                                                    e.Result = string.Format("{0},{1}", NormalStatic.Auto, NormalStatic.False, string.Format("Waiting for {0}{1} Execution Fail", NormalStatic.Aligner, 1));
                                                    return;
                                                }
                                            }
                                        }

                                        #endregion

                                        if (Robot2_BG.IsBusy == false && HT.EFEM.Mode == EFEMMode.Local) // Walson 20210105
                                            Device_Queue.EnQueue(string.Format("{0}!{1}", NormalStatic.End, ""));

                                        e.Result = string.Format("{0},{1}", NormalStatic.Auto, NormalStatic.True);
                                        return;
                                    }
                                    continue;
                                }
                                break;

                            #endregion
                        }

                        #endregion

                        if (EFEM.RobotBusy(0) == false)
                        {
                            #region Robot1_ActionFail_Timeout

                            Robot1_Work = "Idle";

                            if (Robot1.IsWork == false)
                            {
                                try
                                {
                                    TraceLog();
                                }
                                catch (Exception exception)
                                {
                                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.CommandParameter, exception.Message);
                                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.CommandParameter, exception.StackTrace);
                                }
                                e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot1 action run Fail. please check Warning message");
                                break;
                            }

                            if(EFEM.RobotBusy(0) == false && EFEM.RobotBusy(1) == false)
                            {
                                AutoTimeoutCount++;

                                if (AutoTimeoutCount >= ((AUTO_TIMEOUT * 1000) / Robot1.LoopCount))
                                {
                                    //Joanne 20210825
                                    e.Result = string.Format("{0},{1},{2} ({3})", NormalStatic.Auto, NormalStatic.False, "Tool Status Error", NowR1StepForLog);
                                    break;
                                }
                            }

                            #endregion

                            #region ChageIndex

                            bool IsIndexNext = false;

                            switch (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1])
                            {
                                #region Load

                                case SQLWaferInforStep.Up_Put_Aligner_ing:
                                    {
                                        if (Robot1.NowLoop != (int)Core_Loop.Unload && Robot1.IsFirstStage == false && Robot1.TotalCount > 1)
                                        {
                                            if (Robot1.NowIndex>0)
                                                Robot1.NowIndex -= 1;
                                            Robot1.IsFirstStage = true;
                                        }
                                    }
                                    break;

                                case SQLWaferInforStep.Mix_ed:  //Load 
                                    {
                                        if (Robot1.NowLoop == (int)Core_Loop.Load)
                                        {
                                            if (Robot1.TotalCount == 3)
                                            {
                                                if (Robot1.NowIndex == 1)
                                                    Robot1.NowIndex = 0;
                                                else
                                                    Robot1.NowIndex = 2;
                                            }
                                            else
                                                IsIndexNext = true;
                                        }

                                    }
                                    break;

                                case SQLWaferInforStep.Swap_Down_Put_Cassette_ing:
                                case SQLWaferInforStep.Down_Put_Cassette_ing:
                                case SQLWaferInforStep.Dest_Down_Put_Cassette_ing:
                                case SQLWaferInforStep.TopPut_Stage_ing:
                                case SQLWaferInforStep.Down_Put_Stage_ing:
                                    {
                                        if (Robot1.IsFirstStage)
                                        {
                                            Robot1.IsFirstExchange = false;
                                            IsIndexNext = true;
                                        }
                                    }
                                    break;

                                case SQLWaferInforStep.AlignmentOCR_ed:
                                case SQLWaferInforStep.AlignmentFinal_ed:
                                    {

                                        if (Robot1.IsFirstExchange == false && Robot1.TotalCount > 1)
                                        {
                                            if (Robot1.IsFirstStage == true )
                                            {
                                                if (Robot1.NowIndex > 0)
                                                    Robot1.NowIndex -= 1;
                                                Robot1.IsFirstStage = false;
                                            }
                                            else
                                            {
                                                if (Robot1.NowLoop != (int)Core_Loop.LoadUnload)
                                                {
                                                    if (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1] == SQLWaferInforStep.AlignmentFinal_ed
                                                     || (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1] == SQLWaferInforStep.AlignmentOCR_ed && (HT.Recipe.OCR_Degree == HT.Recipe.Aligner_Degree))
                                                     )
                                                    {
                                                        Robot1.IsFirstExchange = true;
                                                        IsIndexNext = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;

                                #endregion

                                #region Unload

                                case SQLWaferInforStep.Down_Put_Aligner_ing:
                                    {
                                        if (Robot1.NowLoop == (int)Core_Loop.Unload && Robot1.IsFirstStage == false && Robot1.TotalCount > 1)
                                        {
                                            if (Robot1.NowIndex > 0)
                                                Robot1.NowIndex -= 1;
                                            Robot1.IsFirstStage = true;
                                        }
                                    }
                                    break;

                                case SQLWaferInforStep.Up_Put_Cassette_ing:
                                    {
                                        if (Robot1.IsFirstStage)
                                        {
                                            Robot1.IsFirstExchange = false;
                                            IsIndexNext = true;
                                        }
                                    }
                                    break;

                                #endregion
                            
                                #region Swap

                                case SQLWaferInforStep.Swap_AlignmentOCR_ed:  
                                case SQLWaferInforStep.Swap_AlignmentFinal_ed:
                                    {
                                        if (Robot1.NowLoop == (int)Core_Loop.LoadUnload && Robot1.IsFirstExchange == false && Robot1.TotalCount > 1)
                                        {
                                             if (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1] == SQLWaferInforStep.Swap_AlignmentFinal_ed
                                             || (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1] == SQLWaferInforStep.Swap_AlignmentOCR_ed && (HT.Recipe.OCR_Degree == HT.Recipe.Aligner_Degree))
                                             )
                                             {
                                                Robot1.IsFirstExchange = true;
                                                IsIndexNext = true;
                                             }
                                        }
                                    }
                                    break;
                                #endregion
                            }

                            if (HT.Recipe.IsUseLower == false || HT.Recipe.IsUseUpper == false)
                            {
                                IsIndexNext = false;
                                Robot1.IsFirstExchange = false;
                                Robot1.IsFirstStage = false;
                            }

                            if (IsIndexNext)
                            {
                             

                                switch (Robot1.NowIndex)
                                {
                                    case 0:
                                        {
                                            Robot1.NowIndex = (Robot1.TotalCount > 1) ? 1 : 0;
                                        }
                                        break;

                                    case 1:
                                        {
                                            Robot1.NowIndex = (Robot1.TotalCount > 2) ? 2 : 0;
                                        }
                                        break;

                                    case 2:
                                        {
                                            Robot1.NowIndex = 0;
                                        }
                                        break;
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            AutoTimeoutCount = 0;

                            #region Robot1_Set_Step_ing

                            Robot1_Work = string.Format("{0},{1},{2},{3}",
                                                    Robot1.NowIndex,
                                                    Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1],
                                                    Robot1.NowPort,
                                                    Robot1.NowSlot);

                            Update_PJ(Robot1.NowCondition, WaferInforTableItem.WaferStatus, Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1].ToString());

                            switch (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1])
                            {

                            }

                            #endregion

                            #region Robot1_WaitBusy

                            if (!WaitNoEFEMRobot1(ROBOT_TIMEOUT))
                            {
                                e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot1 timeout");
                                break;
                            }

                            #endregion

                            #region Robot1_Update_Step_ed

                            //if (Robot1.RobotGPTType == RobotGPT.Get)
                            //    EFEM.Robot_SetInfor(0, Robot1.NowArm, string.Format("{0},{1}", Robot1.NowPort, Robot1.NowSlot));

                            Update_PJ(Robot1.NowCondition, WaferInforTableItem.WaferStatus, Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 2].ToString());

                            #endregion

                            #region Robot_ActionEnd

                            Robot1_Work = string.Format("{0},{1},{2},{3}",
                                                            Robot1.NowIndex,
                                                            Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 2],
                                                            Robot1.NowPort,
                                                            Robot1.NowSlot);

                            switch (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 2])
                            {
                                case SQLWaferInforStep.Up_Get_AlignerOCR_ed:  //Aligner Home
                                case SQLWaferInforStep.Up_Get_Aligner_ed:     //Aligner Home
                                case SQLWaferInforStep.Down_Get_AlignerOCR_ed://Aligner Home
                                case SQLWaferInforStep.Down_Get_Aligner_ed:   //Aligner Home
                                case SQLWaferInforStep.TopGet_Aligner_ed:    //Aligner Home
                                case SQLWaferInforStep.Swap_Down_Get_Aligner_ed:    //Aligner Home
                                case SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ed: //Aligner Home
                                case SQLWaferInforStep.Swap_TopGet_Aligner_ed://Aligner Home
                                    {
                                        Device_Queue.EnQueue(string.Format("{0}!{1}", Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 2].ToString(), Robot1.NowCondition));
                                    }
                                    break;

                                case SQLWaferInforStep.Up_Put_Cassette_ed:
                                case SQLWaferInforStep.Down_Put_Cassette_ed:
                                    {
                                        //  if (HT.Recipe.AutoMode == PJ_Type.Unload)
                                        {
                                            Update_PJ(Robot1.NowCondition, WaferInforTableItem.EndTime, DateTime.Now.ToString(NormalStatic.TimeFormat));
                                        }  
                                    }
                                    break;

                                case SQLWaferInforStep.Up_Get_Cassette_ed:
                                case SQLWaferInforStep.Down_Get_Cassette_ed:
                                    {
                                        //    if (HT.Recipe.AutoMode == PJ_Type.Load)
                                        {
                                            Update_PJ(Robot1.NowCondition, WaferInforTableItem.StartTime, DateTime.Now.ToString(NormalStatic.TimeFormat));
                                        }

                   
                                    }
                                    break;

                                case SQLWaferInforStep.Dest_Down_Put_Cassette_ed:
                                    {
                                        Update_PJ(Robot1.NowCondition, WaferInforTableItem.EndTime, DateTime.Now.ToString(NormalStatic.TimeFormat));
                                        Update_PJ(Robot1.NowCondition, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish.ToString()); 
                                    }
                                    break;

                                case SQLWaferInforStep.Swap_Down_Put_Cassette_ed:  //Add EndTime
                                case SQLWaferInforStep.Swap_Up_Put_Cassette_ed:  //Add EndTime
                                    {
                                     
                                         Update_PJ(Robot1.NowCondition, WaferInforTableItem.EndTime, DateTime.Now.ToString(NormalStatic.TimeFormat));
                                       
                                    }
                                    break;
                                //case SQLWaferInforStep.Down_Put_Aligner_ed:
                                //    {
                                //        if (Robot1.NowLoop == (int)Core_Loop.Unload && Robot1.IsFirstStage == true)
                                //        {
                                //            Robot1.IsFirstStage = false;
                                //            Robot1.NowIndex -= 1;
                                //        }
                                //    }
                                //    break;

                                //case SQLWaferInforStep.Up_Put_Aligner_ed:
                                //    {
                                //        if (Robot1.NowLoop != (int)Core_Loop.Unload && Robot1.IsFirstStage == true)
                                //        {
                                //            Robot1.NowIndex -= 1;
                                //            Robot1.IsFirstStage = false;
                                //        }
                                //    }
                                //    break;
                            }

                            #endregion

                            #region SQL_Finish

                            if (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 3] == SQLWaferInforStep.Finish)
                            {
                                Update_PJ(Robot1.NowCondition, WaferInforTableItem.WaferStatus, SQLWaferInforStep.Finish.ToString());

                                if ((Robot1.NowLoop == (int)Core_Loop.Unload || Robot1.NowLoop == (int)Core_Loop.Sortering) && Robot1.TotalCount == 3)
                                {
                                    if((HT.Recipe.IsAligner) && (HT.Recipe.OCR_Degree == HT.Recipe.Aligner_Degree))
                                      Robot1.NowIndex = 1;
                                    else
                                      Robot1.NowIndex = 0;
                                }
                                else
                                    Robot1.NowIndex = 0;

                                Robot1_Work = "TBD";

                                if (Robot1.TotalCount == 1)
                                {

                                    #region 20201130 Walson(確認PJ Pool的所有Job是否已全部完成)

                                    DataTable check_table = SQLite.ReadDataTableLimit(SQLTable.PJ_Pool,
                                                                            string.Format("{0}!= '{1}'", WaferInforTableItem.WaferStatus, SQLWaferInforStep.Finish),
                                                                            Robot1.LimitCount);

                                    if (check_table.Rows.Count != 0)
                                        continue;

                                    #endregion 20201130 Walson

                                    if (HT.EFEM.Mode == EFEMMode.Local && HT.EFEM.DryRunMode == false)
                                    {
                                        for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
                                        {
                                            if (HT.CassetteData[i].PortType == CassetterPortType.Real && Robot1.UnloadPort.IndexOf(i) >= 0)
                                                Device_Queue.EnQueue(string.Format("{0}!{1}", SQLWaferInforStep.CP_Unload.ToString(), i));

                                            if(HT.CassetteData[i].PortType == CassetterPortType.Dummy && Robot1.UnloadPort.IndexOf(i) >= 0 && EFEM.CP_CheckNullSlot(i) == true)
                                                Device_Queue.EnQueue(string.Format("{0}!{1}", SQLWaferInforStep.CP_Unload.ToString(), i));
                                        }
                                    }

                                    // 20201122 Walson
                                    #region Wait for Device 

                                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.CommandComplete, "Wait Device Homing");

                                    if (EFEM.AlignerBusy(0)) 
                                    {
                                        int counter = 0;
                                        while(EFEM.AlignerCommandResult(0) != CommandResult.OK)
                                        {
                                            Thread.Sleep(100);
                                            counter++;
                                            if ( EFEM.AlignerCommandResult(0) == CommandResult.Fail || counter > 30000) 
                                            {
                                                e.Result = string.Format("{0},{1},", NormalStatic.Auto, NormalStatic.False, "Aligner Homing Fail");
                                                return;
                                            }
                                        }
                                    }

                                    #endregion

                                    if (Robot2_BG.IsBusy == false && HT.EFEM.Mode == EFEMMode.Local) // Walson 20210105
                                        Device_Queue.EnQueue(string.Format("{0}!{1}", NormalStatic.End, ""));
                                    e.Result = string.Format("{0},{1}", NormalStatic.Auto, NormalStatic.True);
                                    break;
                                }
                            }

                            #endregion
                        }
                    }
                }
            }
        }

        private bool Robot1_WaferGetPut(string Obj, int slot, bool LowerUseArm, SocketCommand command)
        {
            switch (Obj)
            {
                case "Stage1":
                case "Stage2":
                    {
                        //if (!WaitStageRobot1(STAGE_TIMEOUTOUT, 0))
                        //    return false;
                    }
                    break;

                case "Aligner1":
                    {
                        if (!WaitAligner(ALIGNER_TIMEOUT, 0))
                            return false;
                    }
                    break;


                case "CP1":
                case "CP2":
                case "CP3":
                case "CP4":
                case "CP5":
                case "CP6":
                case "CP7":
                case "CP8":
                case "CP9":
                case "CP10":
                    {
                        if (!WaitCassetteport(IOLP_TIMEOUT, Convert.ToInt16(Obj.Substring(NormalStatic.CstPort.Length, Obj.Length - NormalStatic.CstPort.Length)) - 1))
                            return false;
                    }
                    break;
            }

            Robot1_Data.obj = NormalStatic.Robot;
            Robot1_Data.port = 0;
            Robot1_Data.Parameter = string.Format("{0},{1},{2}", LowerUseArm, Obj, slot);
            Robot1_Data.command = command;

            EFEM.Command_EnQueue(Robot1_Data);

            if (EFEM.Robot_RecQueue[0].DeQueue())
            {
                return true;
            }
            return false;
        }

        private bool Robot1_ExhchageRule(ref CoreData Robot1)
        {
            switch (Wafer_Step[Robot1.NowLoop][Robot1.NowStep + 1])
            {
                #region Load/Sorter

                //case SQLWaferInforStep.Down_Get_Aligner_ing:
                case SQLWaferInforStep.Up_Put_Aligner_ing:
                    {
                        if (Robot1.NowLoop != (int)Core_Loop.Unload)
                        {
                            if (Robot1.IsFirstExchange == false)
                                return true;
                        }
                        else
                            return true;
                    }
                    break;

                case SQLWaferInforStep.Dest_Down_Put_Cassette_ing:
                case SQLWaferInforStep.Down_Put_Stage_ing:
                case SQLWaferInforStep.Swap_Down_Put_Cassette_ing:
                case SQLWaferInforStep.TopPut_Stage_ing:
                    {
                        if (Robot1.NowLoop != (int)Core_Loop.Unload)
                        {
                            if (Robot1.IsFirstStage == false)
                                return true;
                        }
                        else
                            return true;
                    }
                    break;

                #endregion

                #region Swap

                case SQLWaferInforStep.Swap_Up_Get_Stage_ing:
                    {
                        if (Robot1.NowLoop == (int)Core_Loop.LoadUnload && Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.CarrierStatus].ToString() == SQLWaferInforStep.Separation_ed.ToString())
                           return true;
     
                    }
                    break;

                #endregion

                #region Unload


                //case SQLWaferInforStep.Up_Get_Aligner_ing:
                case SQLWaferInforStep.Down_Put_Aligner_ing:
                    {
                        if (Robot1.NowLoop == (int)Core_Loop.Unload)
                        {
                            if (Robot1.IsFirstExchange == false)
                                return true;
                        }
                        else
                            return true;
                    }
                    break;

                case SQLWaferInforStep.Up_Put_Cassette_ing:
                    {
                        if (Robot1.NowLoop == (int)Core_Loop.Unload)
                        {
                            if (Robot1.IsFirstStage == false)
                                return true;
                        }
                        else
                            return true;
                    }
                    break; 

                #endregion

                default:

                    return true;
            }
            return false;

        }

        private bool Robot1_Auto_Command(SocketCommand command, string dest)
        {
            Robot1_Data.obj = NormalStatic.Robot;
            Robot1_Data.port = 0;
            Robot1_Data.command = command;
            Robot1_Data.Parameter = dest;

            EFEM.Command_EnQueue(Robot1_Data);

            if (EFEM.Robot_RecQueue[0].DeQueue())
            {
                return true;
            }
            return false;
        }

        #endregion

        #region Robot2

        private void Robot2_DoWork(object sender, DoWorkEventArgs e)
        {
            string Robot2_Deq = "";
            Robot2.Core_Reset();

            Refresh_System();
            EFEM.Robot_RecQueue[1].Clear();
            Robot_Queue[1].Clear();
            Interrupt_Queue.Clear();

            UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, "Robot2");

            if (HT.Recipe.IsUseLower && HT.Recipe.IsUseUpper && HT.Recipe.IsUseStage1 && HT.Recipe.IsUseStage2)
                Robot2.LimitCount = 3;
            else
                Robot2.LimitCount = 2;

            if (EFEM.CheckRobotArmSafety(1, SocketCommand.WaferGet) == false)
            {
                e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot2 Arm Extend");
                Robot2_Work = "TBD";
                return;
            }

            CreaterCarrierStep();

            Refresh_CarrierItem();

            while (true)
            {
                Robot2_Deq = Robot_Queue[1].DeQueue(Robot2.LoopCount);

                if (Robot2_Deq == NormalStatic.Stop)
                {
                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot2 Process Interrupt");
                    break;
                }

                if (Robot2.NeedMappingList.Count != 0)
                {
                    int MappingPort = int.Parse(Robot2.NeedMappingList[0]);

                    if (EFEM.MP_Presence(MappingPort) == false)
                    {
                        //當Magazine已經被取走
                        Robot2.NeedMappingList.RemoveAt(0);
                    }

                    else if  ( EFEM.MP_Busy(MappingPort) == false
                    && EFEM.MP_GetOutDoorOpen(MappingPort) == IOLPDoor.Open)
                    {
                        //當Port已經為Unload狀態
                        Robot2.NeedMappingList.RemoveAt(0);
                    }
                    else if (EFEM.MP_Presence(MappingPort) == true
                     && EFEM.MP_GetInDoorOpen(MappingPort) == IOLPDoor.Open
                     && EFEM.MP_Busy(MappingPort) == false
                     && EFEM.RobotBusy(1) == false
                     && EFEM.Robot_ArmExtend(1, false) == ArmStatus.Arm_Home
                     && EFEM.Robot_ArmExtend(1, true) == ArmStatus.Arm_Home
                        )
                    {
                        if (Robot2_Ready_Command(SocketCommand.RobotMapping, true, string.Format("{0}{1}", NormalStatic.MagazinePort, MappingPort + 1)) == false)
                        {
                            Robot2.NeedMappingList.RemoveAt(0);
                            e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot2 Mapping Fail");
                            break;
                        }
                        Robot2.NeedMappingList.RemoveAt(0);
                    }
                }

                lock (Robot2MappingLock)
                {
                    if (EFEM.RobotBusy(1) == false)
                    {
                        #region Read_SQL
                        Robot2.Core_Dt = SQLite.ReadDataTableLimit(SQLTable.PJ_Pool,
                                                                string.Format("{0}!= '{1}'", WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish),
                                                                Robot2.LimitCount);

                        if (Robot2.Core_Dt.Rows.Count == 0)
                            continue;

                        #region 20201130 Walson(若PJ Pool抓取的資料同時包含Carrier與OMS ,則要刪除OMS及OMS以後的Job, 避免搬送異常)

                        if (HT.Recipe.AutoMode == PJ_Type.Load
                        && Convert.ToBoolean(Robot2.Core_Dt.Rows[0][(int)WaferInforTableItem.IsOMS]) == false)
                        {
                            for (int row = 1; row < Robot2.Core_Dt.Rows.Count; row++)
                            {
                                if (Convert.ToBoolean(Robot2.Core_Dt.Rows[row][(int)WaferInforTableItem.IsOMS]) == true)
                                    while (row != Robot2.Core_Dt.Rows.Count)
                                        Robot2.Core_Dt.Rows.RemoveAt(row);
                            }
                        }

                        #endregion 20201130 Walson

                        //Joanne 20201011 Add Start
                        if (!IsSetJobComplete_RB2)
                        {
                            DataTable DT = SQLite.ReadDataTable(SQLTable.PJ_Pool, 
                                string.Format("{0}!= '{2}' and {1}!= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish));

                            if (DT.Rows.Count == 0)
                            {
                                return;
                            }

                            int PortIdx = 0;

                            for (int RowIdx = 0; RowIdx < DT.Rows.Count; RowIdx++)
                            {
                                string SocPort = DT.Rows[RowIdx][(int)WaferInforTableItem.SocPort].ToString();  //CP5   //MP1   //MP2
                                string SocSlot = DT.Rows[RowIdx][(int)WaferInforTableItem.SocSlot].ToString();  //25    //1     //1
                                string DesPort = DT.Rows[RowIdx][(int)WaferInforTableItem.DesPort].ToString();  //MP8   //MP5   //MP6
                                string DesSlot = DT.Rows[RowIdx][(int)WaferInforTableItem.DesSlot].ToString();  //2     //1     //1
                                
                                switch (HT.Recipe.AutoMode)
                                {
                                    case PJ_Type.Load:
                                        {
                                            PortIdx = Convert.ToInt16(SocPort.Substring(NormalStatic.MagazinePort.Length, SocPort.Length - NormalStatic.MagazinePort.Length)) - 1;  //0

                                            if (DT.Rows[RowIdx][(int)WaferInforTableItem.IsOMS].ToString() == NormalStatic.True)
                                            {
                                                HT.MagazineData[PortIdx].CarrierData[int.Parse(SocSlot) - 1].IsTransferComplete = false;
                                                EFEM.SetMPData(PortIdx, SocPort, Convert.ToInt16(SocSlot), DesPort, Convert.ToInt16(DesSlot));  //0,MP1,1,MP5,1
                                            }
                                        }
                                        break;
                                    case PJ_Type.Unload:
                                        {
                                            PortIdx = Convert.ToInt16(DesPort.Substring(NormalStatic.MagazinePort.Length, DesPort.Length - NormalStatic.MagazinePort.Length)) - 1;  //5

                                            HT.MagazineData[PortIdx].WaferData[int.Parse(DesSlot) - 1].IsTransferComplete = false;
                                            HT.MagazineData[PortIdx].CarrierData[int.Parse(DesSlot) - 1].IsTransferComplete = false;
                                            EFEM.SetMPData(PortIdx, SocPort, Convert.ToInt16(SocSlot), DesPort, Convert.ToInt16(DesSlot));  //5,MP6,1,MP2,1     //7,MP8,2,CP5,25
                                        }
                                        break;
                                }
                            }

                            IsSetJobComplete_RB2 = true;
                        }
                        //Joanne 20201009 Add End

                        Robot2.IsOMS = Convert.ToBoolean(Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.IsOMS]);

                        if (Robot2.IsOMS == false)
                            Robot2.NowStage = Convert.ToInt32(Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.StagePos]) - 1;

                        Robot2.StageCanMix[Robot2.NowStage] = false;

                        Robot2.NowLoop = (int)HT.Recipe.AutoMode + (Robot2.IsOMS ? (int)Core_Loop.OMS_Load : 0);

                        Robot2.NowStep = Carrier_Step[Robot2.NowLoop].FindIndex(x => x.ToString() == Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.CarrierStatus].ToString());

                        Robot2.NowPort = Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.DesPort].ToString();

                        Robot2.NowSlot = Convert.ToInt32(Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.DesSlot]);


                        Robot2.NowCondition = string.Format("{0}= '{1}' and {2}= {3}",
                                                WaferInforTableItem.DesPort,
                                                Robot2.NowPort,
                                                WaferInforTableItem.DesSlot,
                                                Robot2.NowSlot);

                        Robot2.NowArm = false;

                        if ((Robot2.Core_Dt.Rows.Count == Robot2.LimitCount) && (HT.Recipe.IsUseLower && HT.Recipe.IsUseUpper))
                        {
                            Robot2.TotalCount = Robot2.LimitCount;

                            if (((EFEM.StageCarrierPresence(0) == WaferStatus.With && HT.Recipe.IsUseStage1 ) || (EFEM.StageCarrierPresence(1) == WaferStatus.With && HT.Recipe.IsUseStage2 ))
                              && ((EFEM.Robot_ArmPresence(1, false) == WaferStatus.With && HT.Recipe.IsUseLower))
                              && Robot2.IsOMS == false
                              && Robot2.NowIndex == (Robot2.TotalCount - 1))
                            {
                                Robot2.IsExchange = true;
                                Robot2.ExchageStage = Robot2.NowStage;
                            }
                        }
                        else
                        {
                            Robot2.TotalCount = Robot2.Core_Dt.Rows.Count;
                        }

                        Robot2.IsWork = true;

                        int port = Convert.ToInt16(Robot2.NowPort.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                        #region Set_RobotArm

                        if ((SQLWaferInforStep.Down_Start < Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]) && (SQLWaferInforStep.Down_End > Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]))
                        {
                            if (HT.Recipe.IsUseLower == false && Robot2.IsOMS == false)
                                Robot2.NowArm = true;
                            else
                                Robot2.NowArm = false;
                        }
                        else if ((SQLWaferInforStep.Up_Start < Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]) && (SQLWaferInforStep.Up_End > Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]))
                        {
                            if (HT.Recipe.IsUseUpper == false)
                                Robot2.NowArm = false;
                            else
                                Robot2.NowArm = true;
                        }

                        #endregion

                        #region Set_RobotRule

                        if ((SQLWaferInforStep.UpGet_Statr < Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]) && (SQLWaferInforStep.UpGet_End > Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1])
                         || (SQLWaferInforStep.DownGet_Statr < Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]) && (SQLWaferInforStep.DownGet_End > Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]))
                        {
                            Robot2.Check_RobotPresence = WaferStatus.WithOut;
                            Robot2.Check_DevicePresence = WaferStatus.With;
                            Robot2.RobotGPTType = RobotGPT.Get;
                        }
                        else if ((SQLWaferInforStep.UpPut_Statr < Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]) && (SQLWaferInforStep.UpPut_End > Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1])
                         || (SQLWaferInforStep.DownPut_Statr < Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]) && (SQLWaferInforStep.DownPut_End > Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1]))
                        {
                            Robot2.Check_RobotPresence = WaferStatus.With;
                            Robot2.Check_DevicePresence = WaferStatus.WithOut;
                            Robot2.RobotGPTType = RobotGPT.Put;
                        }
                        #endregion

                        #endregion

                        #region Robot_ActionStep

                        switch (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1])
                        {
                            #region Magazine

                            case SQLWaferInforStep.Down_Get_Magazine_ing:
                            case SQLWaferInforStep.Down_Put_Magazine_ing:
                            case SQLWaferInforStep.Up_Get_Magazine_ing:
                            case SQLWaferInforStep.Up_Put_Magazine_ing:
                                {
                                    if (EFEM.MP_Busy(port) == false && EFEM.MP_GetInDoorOpen(port) == IOLPDoor.Open && EFEM.Robot_ArmPresence(1, Robot2.NowArm) == Robot2.Check_RobotPresence)
                                    {
                                        if (Robot2_ExhchageRule(ref Robot2))
                                        {
                                            Robot2.IsWork = Robot2_WaferGetPut(Robot2.NowPort, Robot2.NowSlot, Robot2.NowArm, Robot2.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);

                                            if (Robot2.IsWork && HT.EFEM.Mode == EFEMMode.Local && Robot2.RobotGPTType == RobotGPT.Put && Robot2.UnloadPort.IndexOf(port) < 0)
                                                Robot2.UnloadPort.Add(port);
                                        }
                                    }
                                }
                                break;

                            case SQLWaferInforStep.Down_Swap_OMS_Put_Magazine_ing:
                            case SQLWaferInforStep.Up_Swap_OMS_Put_Magazine_ing:
                                {
                                    Robot2.OMS_Port = Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.SwapPort].ToString();
                                    Robot2.OMS_Slot = Convert.ToInt32(Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.SwapSlot]);

                                    int OMS_Index = Convert.ToInt16(Robot2.OMS_Port.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                                    if (EFEM.MP_Busy(OMS_Index) == false
                                     && EFEM.MP_GetInDoorOpen(OMS_Index) == IOLPDoor.Open
                                     && EFEM.Robot_ArmPresence(1, Robot2.NowArm) == Robot2.Check_RobotPresence)
                                    {
                                        Robot2.IsWork = Robot2_WaferGetPut(Robot2.OMS_Port, Robot2.OMS_Slot, Robot2.NowArm, Robot2.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                    }
                                }
                                break;

                            case SQLWaferInforStep.Up_OMS_Get_Magazine_ing:
                            case SQLWaferInforStep.Up_OMS_Put_Magazine_ing:
                            case SQLWaferInforStep.Down_OMS_Get_Magazine_ing:
                            case SQLWaferInforStep.Down_OMS_Put_Magazine_ing:
                                {
                                    Robot2.OMS_Port = Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.SocPort].ToString();
                                    Robot2.OMS_Slot = Convert.ToInt32(Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.SocSlot]);

                                    int OMS_Index = Convert.ToInt16(Robot2.OMS_Port.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                                    if (EFEM.MP_Busy(OMS_Index) == false
                                     && EFEM.MP_GetInDoorOpen(OMS_Index) == IOLPDoor.Open
                                     && EFEM.Robot_ArmPresence(1, Robot2.NowArm) == Robot2.Check_RobotPresence
                                       )
                                    {
                                        Robot2.IsWork = Robot2_WaferGetPut(Robot2.OMS_Port, Robot2.OMS_Slot, Robot2.NowArm, Robot2.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                    }
                                }
                                break;


                            #endregion

                            #region Stage

                            case SQLWaferInforStep.Up_Get_Stage_ing:
                            case SQLWaferInforStep.Down_Put_Stage_ing:
                                {
                                                                       
                                    if (EFEM.StageReady(Robot2.NowStage) == true
                                     && EFEM.StageBusy(Robot2.NowStage) == false
                                     && EFEM.StageCarrierPresence(Robot2.NowStage) == Robot2.Check_DevicePresence 
                                     && EFEM.Robot_ArmPresence(1, Robot2.NowArm) == Robot2.Check_RobotPresence
                                     && EFEM.StageCarrierAvailable(Robot2.NowStage) == true
                                        )
                                    {
                                        // 20201102 Walson OMS With OCR
                                        if(Robot2.NowLoop == (int)Core_Loop.OMS_Load) 
                                        {
                                            Robot2.IsWork = Robot2_WaferGetPut(string.Format("{0}{1}", NormalStatic.Stage, Robot2.NowStage + 1), 1, Robot2.NowArm, Robot2.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                            break;
                                        }                                        

                                        if (Robot2_ExhchageRule(ref Robot2))
                                            Robot2.IsWork = Robot2_WaferGetPut(string.Format("{0}{1}", NormalStatic.Stage, Robot2.NowStage + 1), 1, Robot2.NowArm, Robot2.RobotGPTType == RobotGPT.Get ? SocketCommand.WaferGet : SocketCommand.WaferPut);
                                    }
                                }
                                break;

                            #endregion

                            #region OCR

                            case SQLWaferInforStep.Stage_OCR_ing: //Mapping OMS_Out
                                {
                                    Device_Queue.EnQueue(string.Format("{0}!{1}!{2}", Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1].ToString(), Robot2.NowCondition, Robot2.NowStage));
                                }
                                break;

                            #endregion

                            #region Mix_Separation

                            case SQLWaferInforStep.Separation_ing:
                                {
                                    Device_Queue.EnQueue(string.Format("{0}!{1}!{2}!{3}", 
                                                        Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1].ToString(),
                                                        Robot2.NowCondition, 
                                                        Robot2.NowStage, 
                                                        Robot2.NowIndex
                                                        ));
                                }
                                break;

                            case SQLWaferInforStep.Mix_ing:
                                {
                                    Robot2.StageCanMix[Robot2.NowStage] = true;
                                }
                                break;

                            #endregion
                        }

                        #endregion

                        if (EFEM.RobotBusy(1) == false)
                        {
                            #region Robot2_action_Fail

                            Robot2_Work = "Idle";

                            if (Robot2.IsWork == false)
                            {
                                e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot2 action run Fail. please check Warning message");
                                break;
                            }

                            if (EFEM.RobotBusy(0) == false && EFEM.RobotBusy(1) == false)
                            {
                                if (AutoTimeoutCount >= ((AUTO_TIMEOUT * 1000) / Robot1.LoopCount))
                                {
                                    try 
                                    {
                                        TraceLog();
                                    }
                                    catch (Exception exception)
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.CommandParameter, exception.Message);
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.CommandParameter, exception.StackTrace);
                                    }

                                    //Joanne 20210825
                                    e.Result = string.Format("{0},{1},{2} ({3})", NormalStatic.Auto, NormalStatic.False, "Tool Status Error", NowR2StepForLog);
                                    break;
                                }
                            }
                            #endregion

                            #region Chage_Index_Rule

                            bool IsIndexNext = false;

                            NowR2StepForLog = Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1].ToString();

                            switch (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1])
                            {
                                //case SQLWaferInforStep.Up_OMS_Put_Magazine_ing: //Mapping OMS_Out
                                //    {
                                //        for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
                                //        {
                                //            if (EFEM.MP_CheckPortType(port) == MagazinePortType.OMS_Out && EFEM.MP_Presence(i) == true && EFEM.MP_GetInDoorOpen(i) == IOLPDoor.Open && EFEM.MP_CheckNeedMapping(i))
                                //            {
                                //                if (Robot2_Ready_Command(SocketCommand.RobotMapping,true, string.Format("{0}{1}", NormalStatic.MagazinePort, i + 1)) == false)
                                //                {
                                //                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot2 Mapping OMS_Out Fail. please check Warning message");
                                //                    return;
                                //                }
                                //            }
                                //        }
                                //    }
                                //    break;

                                case SQLWaferInforStep.Up_Put_Magazine_ing:
                                case SQLWaferInforStep.Down_Put_Stage_ing:
                                    {
                                        if (Robot2.IsExchange)
                                            IsIndexNext = true;
                                    }
                                    break;

                                case SQLWaferInforStep.Separation_ed:
                                case SQLWaferInforStep.Mix_ing:
                                case SQLWaferInforStep.Mix_ed:
                                case SQLWaferInforStep.Up_Get_Stage_ing:
                                    {
                                        if (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1] == SQLWaferInforStep.Mix_ed)
                                            Robot2.StageCanMix[Robot2.NowStage] = true;
                                        IsIndexNext = true;
                                    }
                                    break;
                            }

                            if (HT.Recipe.IsUseLower == false || HT.Recipe.IsUseUpper == false)
                            {
                                IsIndexNext = false;
                            }

                            if (IsIndexNext)
                            {
                                switch (Robot2.NowIndex)
                                {
                                    case 0:
                                        {
                                            Robot2.NowIndex = (Robot2.Core_Dt.Rows.Count > 1) ? 1 : 0;
                                        }
                                        break;

                                    case 1:
                                        {
                                            Robot2.NowIndex = (Robot2.Core_Dt.Rows.Count > 2) ? 2 : 0;
                                        }
                                        break;

                                    case 2:
                                        {
                                            Robot2.NowIndex = 0;
                                        }
                                        break;
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            AutoTimeoutCount = 0;

                            #region Robot2_Update_Step_ing

                            Robot2_Work = string.Format("{0},{1},{2},{3}",
                                                                        Robot2.NowIndex,
                                                                        Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1],
                                                                        Robot2.NowPort,
                                                                        Robot2.NowSlot);

                            Update_PJ(Robot2.NowCondition, WaferInforTableItem.CarrierStatus, Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1].ToString());

                            switch (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1])
                            {

                            }

                            #endregion

                            #region Robot2_WaitBusy

                            if (!WaitNoEFEMRobot2(ROBOT_TIMEOUT))
                            {
                                e.Result = string.Format("{0},{1},{2}", NormalStatic.Auto, NormalStatic.False, "Robot2 timeout");
                                break;
                            }

                            #endregion

                            #region Robot2_Update_Step_ed

                            if (Robot2.RobotGPTType == RobotGPT.Get)
                            {
                                //EFEM.Robot_SetInfor(1, Robot2.NowArm, string.Format("{0},{1}", Robot2.NowPort, Robot2.NowSlot));
                            }

                            Update_PJ(Robot2.NowCondition, WaferInforTableItem.CarrierStatus, Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 2].ToString());

                            #endregion

                            #region Robot2_Action_nd

                            Robot2_Work = string.Format("{0},{1},{2},{3}",
                                                                        Robot2.NowIndex,
                                                                        Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 2],
                                                                        Robot2.NowPort,
                                                                        Robot2.NowSlot);

                            switch (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 2])
                            {
                                case SQLWaferInforStep.Up_Put_Magazine_ed:  //Add EndTime
                                case SQLWaferInforStep.Down_Put_Magazine_ed:
                                    {
                                        if (HT.Recipe.AutoMode == PJ_Type.Load)
                                        {
                                            Update_PJ(Robot2.NowCondition, WaferInforTableItem.EndTime, DateTime.Now.ToString(NormalStatic.TimeFormat));
                                        }
                                    }
                                    break;

                                case SQLWaferInforStep.Up_OMS_Put_Magazine_ed://OMS_Out_Unload - Add EndTime
                                case SQLWaferInforStep.Down_OMS_Put_Magazine_ed:
                                    {
                                        Update_PJ(Robot2.NowCondition, WaferInforTableItem.EndTime, DateTime.Now.ToString(NormalStatic.TimeFormat));

                                        Robot2.OMS_Port = Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.SocPort].ToString();
                                        int OMS_Index = Convert.ToInt16(Robot2.OMS_Port.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                                        if (HT.MagazineData[OMS_Index].PortType == MagazinePortType.OMS_Out)
                                        {
                                            // 20201106 Walson OMS Out完成放片後不再自動Unload
                                            if (EFEM.MP_GetInDoorOpen(OMS_Index) != IOLPDoor.Close) //Wayne 20210727 for PLC Recvive 1000
                                            {
                                                Device_Queue.EnQueue(string.Format("{0}!{1}", SQLWaferInforStep.OMS_Unload, OMS_Index));
                                            }
                                            UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.OMS_Out, string.Format("{0},{1}", OMS_Index + 1 + HCT_EFEM.CassetteCount, "1"));
                                        }
                                    }
                                    break;

                                case SQLWaferInforStep.Up_Swap_OMS_Put_Magazine_ed: //OMS_Out_Unload 
                                case SQLWaferInforStep.Down_Swap_OMS_Put_Magazine_ed:
                                    {
                                        Update_PJ(Robot2.NowCondition, WaferInforTableItem.EndTime, DateTime.Now.ToString(NormalStatic.TimeFormat));

                                        Robot2.OMS_Port = Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.SwapPort].ToString();
                                        int OMS_Index = Convert.ToInt16(Robot2.OMS_Port.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                                        if (HT.MagazineData[OMS_Index].PortType == MagazinePortType.OMS_Out)
                                        {
                                            // 20201106 Walson OMS Out完成放片後不再自動Unload
                                            if (EFEM.MP_GetInDoorOpen(OMS_Index) != IOLPDoor.Close) //Wayne 20210727 for PLC Recvive 1000
                                            {
                                                Device_Queue.EnQueue(string.Format("{0}!{1}", SQLWaferInforStep.OMS_Unload, OMS_Index));
                                            }
                                            UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.OMS_Out, string.Format("{0},{1}", OMS_Index + 1 + HCT_EFEM.CassetteCount, "1"));                                        
                                        }
                                    }
                                    break;

                                case SQLWaferInforStep.Up_Get_Magazine_ed:  //Add StartTime
                                    {
                                        if (HT.Recipe.AutoMode == PJ_Type.Unload)
                                        {
                                            Update_PJ(Robot2.NowCondition, WaferInforTableItem.StartTime, DateTime.Now.ToString(NormalStatic.TimeFormat));
                                        }
                                    }
                                    break;

                                case SQLWaferInforStep.Down_Get_Magazine_ed:
                                case SQLWaferInforStep.Up_OMS_Get_Magazine_ed:   //Add StartTime
                                case SQLWaferInforStep.Down_OMS_Get_Magazine_ed:
                                    {
                                        if (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 2] == SQLWaferInforStep.Down_OMS_Get_Magazine_ed && HT.Recipe.AutoMode == PJ_Type.LoadUnload)
                                            ;
                                        else
                                            Update_PJ(Robot2.NowCondition, WaferInforTableItem.StartTime, DateTime.Now.ToString(NormalStatic.TimeFormat));
                                    }
                                    break;

                                case SQLWaferInforStep.Down_Put_Stage_ed:
                                    {
                                        if (Robot2.IsExchange == true)
                                            Robot2.IsExchange = false;
                                    }
                                    break;

                            }

                            #endregion

                            #region SQL_Finish

                            if (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 3] == SQLWaferInforStep.Finish)
                            {
                                Update_PJ(Robot2.NowCondition, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish.ToString());

                                if (Robot2.IsOMS == true)
                                {
                                    Update_PJ(Robot2.NowCondition, WaferInforTableItem.WaferStatus, SQLWaferInforStep.Finish.ToString());
                                }
                                //if ((SQLWaferInforStep)Robot2.Core_Dt.Rows[Robot2.NowIndex][(int)WaferInforTableItem.WaferStatus] == SQLWaferInforStep.Finish || IsOMS == true)
                                //{
                                //    SQLite.CopyWaferInfoToHistory(SQLTable.PJ_Pool, Robot2.NowCondition);
                                //    SQLite.Delete(SQLTable.PJ_Pool, Robot2.NowCondition);
                                //}
                                Robot2.NowIndex = 0;

                                if (Robot2.TotalCount == 1)
                                {
                                    #region 20201130 Walson(確認PJ Pool的所有Job是否已完成)

                                    DataTable check_table = SQLite.ReadDataTableLimit(SQLTable.PJ_Pool,
                                                                            string.Format("{0}!= '{1}'", WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish),
                                                                            Robot2.LimitCount);

                                    if (check_table.Rows.Count != 0)
                                        continue;

                                    #endregion 20201130 Walson

                                    Refresh_PJ();

                                    for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
                                    {
                                        if (HT.MagazineData[i].PortType == MagazinePortType.OMS_In && EFEM.MP_CheckNullSlot(i) == true)
                                        {
                                            if (EFEM.MP_GetInDoorOpen(i) != IOLPDoor.Close) //Wayne 20210727 for PLC Recvive 1000
                                            {
                                                Device_Queue.EnQueue(string.Format("{0}!{1}", SQLWaferInforStep.OMS_Unload.ToString(), i));
                                            }
                                        }

                                        if (HT.EFEM.Mode == EFEMMode.Local && HT.EFEM.DryRunMode == false)
                                        {
                                            if (HT.MagazineData[i].PortType == MagazinePortType.Real && Robot2.UnloadPort.IndexOf(i) >= 0)
                                            {
                                                if (EFEM.MP_GetInDoorOpen(i) != IOLPDoor.Close) //Wayne 20210727 for PLC Recvive 1000
                                                {
                                                    Device_Queue.EnQueue(string.Format("{0}!{1}", SQLWaferInforStep.OMS_Unload.ToString(), i));
                                                }
                                            }
                                        }
                                    }

                                    Robot2_Work = "TBD";
                                 
                                    if (Robot1_BG.IsBusy == false && HT.EFEM.Mode == EFEMMode.Local) // Walson 20210105
                                        Device_Queue.EnQueue(string.Format("{0}!{1}", NormalStatic.End, ""));

                                    e.Result = string.Format("{0},{1}", NormalStatic.Auto, NormalStatic.True);
                                    break;
                                }
                            }
                            #endregion
                        }
                    }
                }
            }
        }

        private bool Robot2_WaferGetPut(string Obj, int slot, bool LowerUseArm, SocketCommand command)
        {
            switch (Obj)
            {
                case "Stage1":
                case "Stage2":
                case "Stage3":
                    {
                        // From = "S" + From.Substring(1);
                    }
                    break;

                case "MP1":
                case "MP2":
                case "MP3":
                case "MP4":
                case "MP5":
                case "MP6":
                case "MP7":
                case "MP8":
                    {
                        if (!WaitMagazineport(IOLP_TIMEOUT, Convert.ToInt16(Obj.Substring(NormalStatic.MagazinePort.Length, 1)) - 1))
                            return false;
                    }
                    break;
            }

            Robot2_Data.obj = NormalStatic.Robot;
            Robot2_Data.port = 1;
            Robot2_Data.Parameter = string.Format("{0},{1},{2}", LowerUseArm, Obj, slot);
            Robot2_Data.command = command;

            EFEM.Command_EnQueue(Robot2_Data);

            if (EFEM.Robot_RecQueue[1].DeQueue())
            {
                return true;
            }
            return false;
        }

        private bool Robot2_ExhchageRule(ref CoreData Robot2)
        {
            if (HT.Recipe.IsUseLower == false || HT.Recipe.IsUseUpper == false)
            {
                return true;
            }

            switch (Carrier_Step[Robot2.NowLoop][Robot2.NowStep + 1])
            {
                case SQLWaferInforStep.Down_Put_Stage_ing:
                    {
                        if ((Robot2.IsExchange == true && (Robot2.ExchageStage == Robot2.NowStage)) || (Robot2.IsExchange == false))// && (Robot2.TotalCount == Robot2.LimitCount)))
                            return true;
                    }
                    break;

                case SQLWaferInforStep.Up_Get_Stage_ing:
                    {
                        if ((Robot2.IsExchange == true && (Robot2.ExchageStage == Robot2.NowStage)) || (Robot2.IsExchange == false && (Robot2.TotalCount != Robot2.LimitCount)))
                            return true;
                    }
                    break;

                case SQLWaferInforStep.Up_Put_Magazine_ing:
                    {
                        if (Robot2.IsExchange == false)
                            return true;
                    }
                    break;

                case SQLWaferInforStep.Down_Get_Magazine_ing:
                case SQLWaferInforStep.Down_Put_Magazine_ing:
                case SQLWaferInforStep.Up_Get_Magazine_ing:
                    {
                        return true;
                    }
                    break;
            }
            return false;

        }


        #endregion

        #region Device

        private void Device_DoWork(object sender, DoWorkEventArgs e)
        {
            bool DeviceWork = false;
            UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, NormalStatic.Device);
            string Cmd;
            SQLWaferInforStep Step;

            lock (Device_Lock) 
            {
                EFEM.Casstter_RecQueue.Clear();
                EFEM.Magazine_RecQueue.Clear();
                EFEM.Aligner_RecQueue.Clear();
            }

            for (int i = 2; i < HCT_EFEM.OCRCount; i++)
            {
                EFEM.OCR_RecQueue[i].Clear();
            }
            for (int i = 0; i < HCT_EFEM.StageCount; i++)
            {
                EFEM.Stage_RecQueue[i].Clear();
            }

            Device_Queue.Clear();

            while (true)
            {
                Cmd = Device_Queue.DeQueue();

                string[] Received = Cmd.Split(new string[] { "!" }, StringSplitOptions.None);

                if (Received[0] == NormalStatic.End)
                {
                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by End"));
                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.True, "");
                    break;
                }

                if (Received[0] == NormalStatic.Stop)
                {
                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by Stop"));
                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, "User Interrupt");
                    break;
                }

                Step = (SQLWaferInforStep)Enum.Parse(typeof(SQLWaferInforStep), Received[0]);

                DeviceWork = false;

                switch (Step)
                {
                    case SQLWaferInforStep.AlignmentOCR_ing:
                    case SQLWaferInforStep.Swap_AlignmentOCR_ing:
                    case SQLWaferInforStep.AlignmentFinal_ing:
                    case SQLWaferInforStep.Swap_AlignmentFinal_ing:
                        {
                            #region Alignment

                            if (EFEM.AlignerBusy(0) == false)
                            {
                                if (EFEM.AlignerPresence(0) == WaferStatus.With && EFEM.AlignerUnitStatus(0) == AlignerStatus.Home)
                                {
                                    DeviceWork = Alinger_Command(Step == SQLWaferInforStep.AlignmentOCR_ing ? SocketCommand.CycleAlignmentOCR : SocketCommand.CycleAlignmentFinish, 0, "");

                                    if (DeviceWork == false)
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by AlignmentOCRing"));
                                        e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                        return;
                                    }

                                    Update_PJ(Received[1], WaferInforTableItem.WaferStatus, Step.ToString());

                                    AlignerCommand_async(Step,Received[1]);
                                }
                            }
                          
                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.Up_Get_AlignerOCR_ed:   //Aligner Home
                    case SQLWaferInforStep.Up_Get_Aligner_ed:      //Aligner Home
                    case SQLWaferInforStep.Down_Get_AlignerOCR_ed: //Aligner Home
                    case SQLWaferInforStep.Down_Get_Aligner_ed:    //Aligner Home
                    case SQLWaferInforStep.TopGet_Aligner_ed:       //Aligner Home
                    case SQLWaferInforStep.Swap_Down_Get_Aligner_ed:    //Aligner Home
                    case SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ed: //Aligner Home
                    case SQLWaferInforStep.Swap_TopGet_Aligner_ed://Aligner Home
                    case SQLWaferInforStep.RecipeSetAlignerDegree://Aligner Home
                        {
                            #region Aligner_Home
           
                            if (EFEM.AlignerBusy(0) == false)
                            {
                                if (EFEM.AlignerUnitStatus(0) != AlignerStatus.Home 
                                  || EFEM.AlignerOCRDegree(0) != HT.Recipe.OCR_Degree.ToString() 
                                  || EFEM.AlignerEQDegree(0) != HT.Recipe.Aligner_Degree.ToString()
                                  || EFEM.AlignerLiftPin(0) == LiftPinEnum.Up) //EFEM.AlingerPresence(0) == false &&
                                {
                                    DeviceWork = Alinger_Command(SocketCommand.CycleHomeCheckDegree, 0, string.Format("{0},{1}",
                                                                                    ((Math.Round(Convert.ToDouble( HT.Recipe.Aligner_Degree), 1, MidpointRounding.AwayFromZero) * 10).ToString()).PadLeft(4, '0')
                                                                                    , ((Math.Round(Convert.ToDouble( HT.Recipe.OCR_Degree), 1, MidpointRounding.AwayFromZero) * 10).ToString()).PadLeft(4, '0')));

                                    if (DeviceWork == false)
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by Up_Get_AlignerOCR"));
                                        e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                        return;
                                    }
                                }
                            }

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.Up_OMS_Put_Magazine_ed:
                    case SQLWaferInforStep.Down_OMS_Put_Magazine_ed:
                    case SQLWaferInforStep.Up_Swap_OMS_Put_Magazine_ed:
                    case SQLWaferInforStep.Down_Swap_OMS_Put_Magazine_ed:
                        {
                            #region OMS_Out_Unload

                            int port = Convert.ToInt16(Received[1]);

                            if ((EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Close || EFEM.MP_GetOutDoorOpen(port) != IOLPDoor.Open)&& EFEM.MP_Busy(port) == false )
                            // && EFEM.MP_SlotData(port, 1) == (int)WaferStatus.With)
                            {
                                if (Magazine_Command(SocketCommand.Unload, port) == false)
                                {
                                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by Up_OMS_Put_Magazine_ed"));
                                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                    return;
                                }

                            } 


                            //#region MP_UnLoad

                            //int port = Convert.ToInt16(Received[1].Substring(Received[1].IndexOf(NormalStatic.MagazinePort) + NormalStatic.MagazinePort.Length, 1)) - 1;

                            //if (EFEM.MP_GetInDoorOpen(port) == IOLPDoor.Open && EFEM.CP_Busy(port) == false)
                            //{
                            //    bool is_unlod = true;

                            //    is_unlod = EFEM.MP_CheckFullSlot(port);

                            //    if (is_unlod)
                            //    {
                            //        if (Magazine_Command(SocketCommand.Unload, port) == false)
                            //        {
                            //            e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                            //            return;
                            //        }
                            //    }
                            //}

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.OMS_Unload:
                        {
                            #region OMS_In_Unload

                            int port = Convert.ToInt16(Received[1]);

                            if ((EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Close || EFEM.MP_GetOutDoorOpen(port) != IOLPDoor.Open) && EFEM.MP_Busy(port) == false )
                            //if (EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Close && EFEM.MP_Busy(port) == false)
                            {
                                if (Magazine_Command(SocketCommand.Unload, port) == false)
                                {
                                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by OMS_Unload"));
                                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                    return;
                                }
                            }

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.Mix_ing: //Mix
                        {
                            #region Mix

                            //Thread.Sleep(50); 210208 Vincent 註解

                            int port = Convert.ToInt16(Received[2]);

                            if (EFEM.StageWaferInvade(port) == true && EFEM.StageCarrierInvade(port) == true && Robot1.StageCanMix[port] && Robot2.StageCanMix[port])
                            {
                                if (EFEM.StageBusy(port) == false && EFEM.StageReady(port) == true
                                  && EFEM.StageWaferPresence(port) == WaferStatus.With
                                //  && EFEM.StageCarrierWaferInfo(port) == WaferStatus.WithOut
                                  && EFEM.StageCarrierPresence(port) == WaferStatus.With
                                // && EFEM.StageWaferProturde(port) == false
                                //&& EFEM.StageCarrierProturde(port) == false
                                    )
                                {
                                    DeviceWork = Stage_Command(SocketCommand.Mix, port);

                                    if (DeviceWork == false)
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by Mixing"));
                                        e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                        return;
                                    }

                                    Update_PJ(Received[1], WaferInforTableItem.WaferStatus, Step.ToString());
                                    Update_PJ(Received[1], WaferInforTableItem.CarrierStatus, Step.ToString());
                                    Robot1.StageCanMix[port] = Robot2.StageCanMix[port] = false;
                                    StageCommand_async(SocketCommand.Mix, Received, port);
                               }      

                            } 

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.Separation_ing: //Separation
                        {
                            #region Separation

                            //Thread.Sleep(50);  210208 Vincent 註解

                            int port = Convert.ToInt16(Received[2]);

                            if (EFEM.StageWaferInvade(port) == true && EFEM.StageCarrierInvade(port) == true)
                            {
                                if (EFEM.StageBusy(port) == false && EFEM.StageReady(port) == true
                                  && EFEM.StageWaferPresence(port) == WaferStatus.WithOut
                                  //&& EFEM.StageCarrierWaferInfo(port) == WaferStatus.With
                                  && EFEM.StageCarrierPresence(port) == WaferStatus.With
                                 //&& EFEM.StageWaferProturde(port) == false
                                 //&& EFEM.StageCarrierProturde(port) == false
                                    )
                                {
                                    DeviceWork = Stage_Command(SocketCommand.Separation, port);

                                    if (DeviceWork == false)
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by Separation"));
                                        e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                        return;
                                    }

                                    if (HT.Recipe.AutoMode != PJ_Type.LoadUnload)
                                        Update_PJ(Received[1], WaferInforTableItem.WaferStatus, Step.ToString());

                                    Update_PJ(Received[1], WaferInforTableItem.CarrierStatus, Step.ToString());
                                    StageCommand_async(SocketCommand.Separation,  Received, port);
                                }
                            }

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.Stage_OCR_ing: //OCR
                        {
                            #region D900

                            int port = Convert.ToInt16(Received[2]);

                            if (EFEM.D900Busy(port) == false)
                            {
                                if (EFEM.StageCarrierPresence(port) == WaferStatus.With) 
                                {
                                    DeviceWork = D900_Command(SocketCommand.Read, port);

                                    if (DeviceWork == false)
                                    {
                                        UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by OCRing"));
                                        e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                        return;
                                    }

                                    Update_PJ(Received[1], WaferInforTableItem.CarrierStatus, Step.ToString());

                                    D900Command_async(Step, Received, port);
                                }
                            }

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.Swap_Aligner_OCR_ing:
                    case SQLWaferInforStep.Aligner_OCR_ing:    //OCR
                        {
                            #region OCR
                            if (HT.Recipe.IsOCR_Up && HT.Recipe.IsOCR_Down)
                            {
                                if (EFEM.OCRReaderBusy(2) == false && EFEM.OCRReaderBusy(3) == false) // 202021122 Walson
                                {
                                    // if (EFEM.AlingerPresence(port) == false)
                                    {
                                        DeviceWork = OCR_Command(SocketCommand.Read, 2);

                                        if (DeviceWork == false)
                                        {
                                            UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by OCR Read2"));
                                            e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                            return;
                                        }

                                        DeviceWork = OCR_Command(SocketCommand.Read, 3);

                                        if (DeviceWork == false)
                                        {
                                            UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by OCR Read3"));
                                            e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                            return;
                                        }

                                        Update_PJ(Received[1], WaferInforTableItem.WaferStatus, Step.ToString());

                                        OCRUpDownCommand_async(Step, Received);
                                    }
                                }
                            }
                            else
                            {
                                int port = Convert.ToInt16(Received[2]) - 1;

                                if (EFEM.OCRReaderBusy(port) == false)
                                {
                                    // if (EFEM.AlingerPresence(port) == false)
                                    {
                                        DeviceWork = OCR_Command(SocketCommand.Read, port);

                                        if (DeviceWork == false)
                                        {
                                            UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Device background Close by OCR Read3"));
                                            e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                            return;
                                        }

                                        
                                        Update_PJ(Received[1], WaferInforTableItem.WaferStatus, Step.ToString());
                        
                                        OCRCommand_async(Step, Received, port);
                                    }
                                }
                            }
                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.CP_Load:
                        {
                            #region CP_Load

                            int port = Convert.ToInt16(Received[1]);

                            if (EFEM.CP_Busy(port) == false && EFEM.CP_Presence(port) == true)
                            {
                                if (EFEM.CP_GetInDoorOpen(port) != IOLPDoor.Open || EFEM.CP_GetOutDoorOpen(port) != IOLPDoor.Close)
                                {

                                    if (Casstter_Command(SocketCommand.Load, port) == false)
                                    {
                                        e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                        return;
                                    }
                                }
                                Robot1.NeedMappingList.Add(port.ToString());
                                //Robot_Queue[0].EnQueue(port.ToString());

                                //if (!WaitCassetteport(IOLP_TIMEOUT, port))
                                //{
                                //    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                //    return;
                                //}

                            }

                            //if (EFEM.CP_CheckNeedMapping(port) == true)
                            //{
                            //    lock (Robot1MappingLock)
                            //    {
                            //        if (Robot1_Ready_Command(SocketCommand.RobotMapping, true, string.Format("{0}{1}", NormalStatic.CstPort, port + 1)) == false)
                            //        {
                            //            e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                            //            return;
                            //        }
                            //    }
                            //}

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.CP_Unload:
                        {
                            #region CP_Unload

                            int port = Convert.ToInt16(Received[1]);

                            if ((EFEM.CP_GetInDoorOpen(port) != IOLPDoor.Close || EFEM.CP_GetOutDoorOpen(port) != IOLPDoor.Open) && EFEM.CP_Busy(port) == false)
                            {
                                if (Casstter_Command(SocketCommand.Unload, port) == false)
                                {
                                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                    return;
                                }

                                //Joanne 20200624 Add
                                PLC.Plc_CmdSend((All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.CstPort, port + 1)), PLC_Device.B, (int)PLC_B.CSTProcess + (port * 1), 0);
                            } 

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.MP_Load:
                        {
                            #region MP_Load

                            int port = Convert.ToInt16(Received[1]) - HCT_EFEM.CassetteCount;

                            if (EFEM.MP_Busy(port) == false && EFEM.MP_Presence(port) == true)
                            //if (EFEM.MP_Presence(port) == true && EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Open)
                            {
                                if(EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Open || EFEM.MP_GetOutDoorOpen(port) != IOLPDoor.Close)
                                {
                                    if (Magazine_Command(SocketCommand.Load, port) == false)
                                    {
                                        e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                        return;
                                    }
                                }
                                Robot2.NeedMappingList.Add(port.ToString());
                                //Robot_Queue[1].EnQueue(port.ToString());

                                //if (!WaitMagazineport(IOLP_TIMEOUT, port))
                                //{
                                //    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                //    return;
                                //}

                            }

                            //if (EFEM.MP_CheckNeedMapping(port) == true)
                            //{
                            //    lock (Robot2MappingLock)
                            //    {
                            //        if (Robot2_Ready_Command(SocketCommand.RobotMapping, true, string.Format("{0}{1}", NormalStatic.MagazinePort, port + 1)) == false)
                            //        {
                            //            e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                            //            return;
                            //        }
                            //    }
                            //} 

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.MP_Unload:
                        {
                            #region MP_Unload

                            int port = Convert.ToInt16(Received[1])- HCT_EFEM.CassetteCount;

                            if ((EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Close || EFEM.MP_GetOutDoorOpen(port) != IOLPDoor.Open) && EFEM.MP_Busy(port) == false)
                            {
                                if (Magazine_Command(SocketCommand.Unload, port) == false)
                                {
                                    e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                    return;
                                }
                            }

                            //Joanne 20200624 Add
                            PLC.Plc_CmdSend((All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.MagazinePort, port + 1)), PLC_Device.B, (int)PLC_B.MagProcess + (port * 1), 0);

                            #endregion
                        }
                        break;

                    case SQLWaferInforStep.MP_Reload:
                        {
                            #region MP_Reload

                            int port = Convert.ToInt16(Received[1]);


                            if (Magazine_Command(SocketCommand.Reloading, port) == false)
                            {
                                e.Result = string.Format("{0},{1},{2}", NormalStatic.Device, NormalStatic.False, Step);
                                return;
                            }
                            
                            #endregion
                        }
                        break;
                }
            }
        }

        private async void AlignerCommand_async(SQLWaferInforStep step, string Condition)
        {
            CommandResult Reply = CommandResult.Unknown;
            var ok = await Task.Run(() =>
            {
                int timeout = 0;

                while (true)
                {
                    Task.Delay(100).Wait();
                    Reply = EFEM.AlignerCommandResult(0);

                    if (Reply == CommandResult.OK)
                    {
                        return true;
                    }
                    else if (Reply == CommandResult.Fail)
                    {
                        return false;
                    }
                    if (++timeout > 500)
                        return false;
                }
            });

            if (ok == true)
            {
                SQLWaferInforStep UpdetStep;
                switch(step)
                {

                    case SQLWaferInforStep.AlignmentFinal_ing:
                        UpdetStep = SQLWaferInforStep.AlignmentFinal_ed;
                        break;
                    case SQLWaferInforStep.AlignmentOCR_ing:
                        UpdetStep = SQLWaferInforStep.AlignmentOCR_ed;
                        break;
                    case SQLWaferInforStep.Swap_AlignmentOCR_ing:
                        UpdetStep = SQLWaferInforStep.Swap_AlignmentOCR_ed;
                        break;
                    case SQLWaferInforStep.Swap_AlignmentFinal_ing:
                        UpdetStep = SQLWaferInforStep.Swap_AlignmentFinal_ed;
                        break;
                    default:
                        UpdetStep = step;
                        break;

                }
                Update_PJ(Condition, WaferInforTableItem.WaferStatus, UpdetStep.ToString());
            }
        }

        private async void OCRUpDownCommand_async(SQLWaferInforStep step, string[] Received)
        {
            CommandResult Reply_Up = CommandResult.Unknown;
            CommandResult Reply_Down = CommandResult.Unknown;
            var ok = await Task.Run(() =>
            {
                int timeout = 0;

                while (true)
                {
                    Task.Delay(100).Wait();

                    Reply_Up = EFEM.OCRCommandResult(2);
                    Reply_Down = EFEM.OCRCommandResult(3);
                    if (Reply_Up == CommandResult.OK && Reply_Down == CommandResult.OK )
                    {
                        return true;
                    }
                    else if (Reply_Up == CommandResult.Fail || Reply_Down == CommandResult.Fail)
                    {
                        return false;
                    }
                    if (++timeout > 300)
                        return false;
                }
            });

            if (ok == true)
            {

                SQLWaferInforStep UpdetStep;
                switch (step)
                {
                    case SQLWaferInforStep.Aligner_OCR_ing:
                        UpdetStep = SQLWaferInforStep.Aligner_OCR_ed;
                        break;
                    case SQLWaferInforStep.Swap_Aligner_OCR_ing:
                        UpdetStep = SQLWaferInforStep.Swap_Aligner_OCR_ed;
                        break;

                    default:
                        UpdetStep = step;
                        break;
                }

                if (UpdetStep == SQLWaferInforStep.Aligner_OCR_ed)
                {
                    Update_PJ(Received[1],WaferInforTableItem.SocSlotID_Up , EFEM.OCRReaderID(2));
                    Update_PJ(Received[1],WaferInforTableItem.SocSlotID_Down, EFEM.OCRReaderID(3));
                }
                else
                {
                    Update_PJ(Received[1], WaferInforTableItem.SwapSlotID_Up, EFEM.OCRReaderID(2));
                    Update_PJ(Received[1], WaferInforTableItem.SwapSlotID_Down, EFEM.OCRReaderID(3));
                }

                Update_PJ(Received[1], WaferInforTableItem.WaferStatus, UpdetStep.ToString());
                UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.Trigger_ReadOCR, string.Format("{0},{1},{2},{3}", Received[3], Received[4], EFEM.OCRReaderID(2), EFEM.OCRReaderID(3)));
            }
        }

        private async void OCRCommand_async(SQLWaferInforStep step, string[] Received, int port)
        {
            CommandResult Reply = CommandResult.Unknown;
            var ok = await Task.Run(() =>
            {
                int timeout = 0;

                while (true)
                {
                    Task.Delay(100).Wait();

                    Reply = EFEM.OCRCommandResult(port);

                    if (Reply == CommandResult.OK)
                    {
                        return true;
                    }
                    else if (Reply == CommandResult.Fail)
                    {
                        return false;
                    }
                    if (++timeout > 300)
                        return false;
                }
            });

            if (ok == true)
            {
               
                SQLWaferInforStep UpdetStep;
                switch (step)
                {
                    case SQLWaferInforStep.Aligner_OCR_ing:
                        UpdetStep = SQLWaferInforStep.Aligner_OCR_ed;
                        break;
                    case SQLWaferInforStep.Swap_Aligner_OCR_ing:
                        UpdetStep = SQLWaferInforStep.Swap_Aligner_OCR_ed;
                        break;

                    default:
                        UpdetStep = step;
                        break;
                }
                if (port > 1)  //Aligner OCR
                {
                    if (UpdetStep == SQLWaferInforStep.Aligner_OCR_ed)
                        Update_PJ(Received[1], port == 2 ? WaferInforTableItem.SocSlotID_Up : WaferInforTableItem.SocSlotID_Down, EFEM.OCRReaderID(port));
                    else
                        Update_PJ(Received[1], port == 2 ? WaferInforTableItem.SwapSlotID_Up : WaferInforTableItem.SwapSlotID_Down, EFEM.OCRReaderID(port));

                    Update_PJ(Received[1], WaferInforTableItem.WaferStatus, UpdetStep.ToString());

                    string MsgTemp;

                    if (port == 2)
                        MsgTemp = string.Format("{0},{1},{2},{3}", Received[3], Received[4], EFEM.OCRReaderID(port), " ");
                    else
                        MsgTemp = string.Format("{0},{1},{2},{3}", Received[3], Received[4], " ", EFEM.OCRReaderID(port));


                    UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.Trigger_ReadOCR, MsgTemp);
                    //if(EFEM.Robot_ArmExtend(1,false) == ArmStatus.Arm_Extend)
                    //    HT.RobotData[1].Wafer[0].ID =EFEM.OCRReaderID(port); 
                    //else
                    //    HT.RobotData[1].Wafer[1].ID = EFEM.OCRReaderID(port); 
                }
                else  // Stage OCR
                {
                    Update_PJ(Received[1], WaferInforTableItem.DesSlotID, EFEM.OCRReaderID(port));
                    Update_PJ(Received[1], WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Stage_OCR_ed.ToString());
                    

                    // 20201102 Walson OMS With OCR
                    if(Robot2.NowLoop != (int)Core_Loop.OMS_Load) 
                    {
                        UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.Trigger_ReadTrayID, string.Format("{0},{1},{2}", Robot2.NowPort, Robot2.NowSlot, EFEM.OCRReaderID(port)));
                    }
                    else 
                    {
                        // OMS ID SECS Event 20201109 Walson
                        UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.OMS_ReadID, string.Format("{0},{1},{2}", Robot2.NowPort, Robot2.NowSlot, EFEM.OCRReaderID(port)));
                    }


                }
            
            }
        }

        private async void D900Command_async(SQLWaferInforStep step, string[] Received, int port)
        {
            CommandResult Reply = CommandResult.Unknown;
            var ok = await Task.Run(() =>
            {
                int timeout = 0;

                while (true)
                {
                    Task.Delay(100).Wait();

                    Reply = EFEM.D900CommandResult(port);

                    if (Reply == CommandResult.OK)
                    {
                        return true;
                    }
                    else if (Reply == CommandResult.Fail)
                    {
                        return false;
                    }
                    if (++timeout > 300)
                        return false;
                }
            });

            if (ok == true)
            {

                SQLWaferInforStep UpdetStep = step;

                Update_PJ(Received[1], WaferInforTableItem.DesSlotID, EFEM.D900ID(port));
                Update_PJ(Received[1], WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Stage_OCR_ed.ToString());


                // 20201102 Walson OMS With OCR
                if (Robot2.NowLoop != (int)Core_Loop.OMS_Load)
                {
                    UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.Trigger_ReadTrayID, string.Format("{0},{1},{2}", Robot2.NowPort, Robot2.NowSlot, EFEM.D900ID(port)));
                }
                else
                {
                    // OMS ID SECS Event 20201109 Walson
                    UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.OMS_ReadID, string.Format("{0},{1},{2}", Robot2.NowPort, Robot2.NowSlot, EFEM.D900ID(port)));
                }
            }
        }

        private async void StageCommand_async(SocketCommand command ,string[] Received, int port)
        {
            var ok = await Task.Run(() =>
            {
                int timeout = 0;
                CommandResult Reply = CommandResult.Unknown;
                while (true)
                {
                    Task.Delay(100).Wait();
                    Reply = EFEM.StgageCommandResult(port);

                    if (Reply == CommandResult.OK)
                    {
                        return true;
                    }
                    else if (Reply == CommandResult.Fail)
                    {
                        return false;
                    }
                }
            });

            if (ok == true)
            {
                if (HT.Recipe.AutoMode != PJ_Type.LoadUnload)
                {
                    Update_PJ(Received[1], WaferInforTableItem.WaferStatus, command == SocketCommand.Mix ? SQLWaferInforStep.Mix_ed.ToString() : SQLWaferInforStep.Separation_ed.ToString());
                }
                Update_PJ(Received[1], WaferInforTableItem.CarrierStatus, command == SocketCommand.Mix ? SQLWaferInforStep.Mix_ed.ToString() : SQLWaferInforStep.Separation_ed.ToString());

                if (command == SocketCommand.Mix)
                {
                    UserSECS.SendEvent(StreamNo.S6,
                                       FunctionNo.F11,
                                       CEID_Item.Trigger_CombineTrayWafer,
                                       string.Format("{0},{1},{2},{3},{4},{5}",
                                       Received[3],                          
                                       Received[4],
                                       Received[5],
                                       Received[6],
                                       Received[7],
                                       Received[8]
                                       ));
                }

            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="step"></param>
        /// <param name="Condition"> 0~17 </param>
        /// <param name="result"></param>
        private void SecsToDeviceCommand(SQLWaferInforStep step, string Condition, ref int result)
        {
            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("S -> M:{0},{1}", step, Condition));

            lock (Device_Lock) 
            {
                result = 0;

                CmdStruct cmd = new CmdStruct();

                #region port

                if (int.TryParse(Condition, out cmd.port) == false)
                {
                    result = 2;
                    return;
                }

                if (cmd.port >= HCT_EFEM.CassetteCount)
                {
                    cmd.port -= HCT_EFEM.CassetteCount;
                    cmd.obj = NormalStatic.MagazinePort;
                }

                #endregion

                #region command

                switch (step)
                {
                    case SQLWaferInforStep.RecipeSetAlignerDegree:
                        {
                            cmd.obj = NormalStatic.Aligner;
                            cmd.command = SocketCommand.CycleHomeCheckDegree;
                            cmd.Parameter = string.Format
                            ("{0},{1}",
                              ((Math.Round(Convert.ToDouble(HT.Recipe.Aligner_Degree), 1, MidpointRounding.AwayFromZero) * 10).ToString()).PadLeft(4, '0')
                            , ((Math.Round(Convert.ToDouble(HT.Recipe.OCR_Degree), 1, MidpointRounding.AwayFromZero) * 10).ToString()).PadLeft(4, '0')
                            );
                        }
                        break;

                    case SQLWaferInforStep.CP_Load:
                    case SQLWaferInforStep.MP_Load:
                        {
                            cmd.command = SocketCommand.Load;
                            if (cmd.obj != NormalStatic.MagazinePort)
                                cmd.obj = NormalStatic.CstPort;
                        }
                        break;

                    case SQLWaferInforStep.CP_OpenDoor:
                    case SQLWaferInforStep.MP_OpenDoor:
                        {
                            cmd.command = SocketCommand.OutDoorOpen;
                            if (cmd.obj != NormalStatic.MagazinePort)
                                cmd.obj = NormalStatic.CstPort;
                        }
                        break;

                    case SQLWaferInforStep.CP_Unload:
                    case SQLWaferInforStep.MP_Unload:
                    case SQLWaferInforStep.MP_Reload:
                        {
                            cmd.command = (step == SQLWaferInforStep.MP_Reload) ? SocketCommand.Reloading : SocketCommand.Unload;
                            if (cmd.obj != NormalStatic.MagazinePort)
                                cmd.obj = NormalStatic.CstPort;
                        }
                        break;

                    default:
                        {
                            result = 2;
                            return;
                        }
                }

                #endregion
              
                switch (cmd.obj)
                {
                    case NormalStatic.Aligner:
                        {
                            #region Interlock

                            if (EFEM.AlignerBusy(cmd.port))
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Aligner is Busy."));
                                result = 2;
                            }
                            if (EFEM.AlignerUnitStatus(cmd.port) != AlignerStatus.Home)
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Aligner Not In Home Position."));
                                result = 2;
                            }
                            if (EFEM.AlignerLiftPin(cmd.port) != LiftPinEnum.Up)
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Aligner Lift-Pin Not Up Position."));
                                result = 2;
                            }

                            #endregion

                            if (result != 0)
                                return;

                            #region Commamd

                            EFEM.Command_EnQueue(cmd);

                            if (EFEM.Aligner_RecQueue.DeQueue(1000) == false)
                            {
                                result = 2;
                                return;
                            }

                            #endregion
                        }
                        break;

                    case NormalStatic.CstPort:
                        {
                            #region Interlock

                            if (EFEM.CP_Busy(cmd.port)) 
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Cassette Port Busy."));
                                result = 2;
                            }                                
                            if(EFEM.CP_Presence(cmd.port) == false)
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Cassette Absent."));
                                result = 2;
                            }

                            if(cmd.command == SocketCommand.Reloading)
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Cassette Port do not accept Reload Command."));
                                result = 2;
                            }
                            else if ( EFEM.CP_GetOutDoorOpen(cmd.port) == IOLPDoor.Open 
                             && (cmd.command == SocketCommand.Load || cmd.command == SocketCommand.Unload))
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Cassette Port OutDoor is Open."));
                                result = 2;
                            }

                            #endregion

                            if (result != 0)
                                return;

                            #region Commamd

                            EFEM.Command_EnQueue(cmd);

                            //Joanne 20210825 Disable
                            //if (EFEM.Casstter_RecQueue.DeQueue(1000) == false)
                            //{
                            //    result = 2;
                            //    return;
                            //}

                            #endregion

                            #region Mapping Require / Clear In process

                            if (cmd.command == SocketCommand.Load)
                                Robot1.NeedMappingList.Add((cmd.port).ToString());
                            else if (cmd.command == SocketCommand.Unload)
                                PLC.Plc_CmdSend((All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.CstPort, cmd.port + 1)), PLC_Device.B, (int)PLC_B.CSTProcess + (cmd.port * 1), 0);

                            #endregion
                        }
                        break;

                    case NormalStatic.MagazinePort:
                        {
                            #region Interlock

                            if (EFEM.MP_Busy(cmd.port))
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Magazine Port Busy."));
                                result = 2;
                            }
                            if (EFEM.MP_Presence(cmd.port) == false)
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Magazine Absent."));
                                result = 2;
                            }
                            if (EFEM.MP_GetOutDoorOpen(cmd.port) == IOLPDoor.Open
                             && (cmd.command == SocketCommand.Load || cmd.command == SocketCommand.Unload))
                            {
                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Command Reject: Magazine Port OutDoor is Open."));
                                result = 2;
                            }

                            #endregion

                            if (result != 0)
                                return;

                            #region Commamd

                            EFEM.Command_EnQueue(cmd);

                            //Joanne 20210825 Disable
                            //if (EFEM.Magazine_RecQueue.DeQueue(1000) == false) 
                            //{
                            //    result = 2;
                            //    return;
                            //}

                            #endregion

                            #region Mapping Require / Clear In process

                            if (cmd.command == SocketCommand.Load)
                                Robot2.NeedMappingList.Add((cmd.port).ToString());
                            else if (cmd.command == SocketCommand.Unload)
                                PLC.Plc_CmdSend((All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.MagazinePort, cmd.port + 1)), PLC_Device.B, (int)PLC_B.MagProcess + (cmd.port * 1), 0);

                            #endregion
                        }
                        break;
                }
            }
        }

        private void SecsPortReloadRequest(int port, ref int accept_result) // 20201130 Walson 用SECS指令來觸發Magazine Load動作
        {
            Thread.Sleep(100);

            if (port < (int)IOLPDevice.MP1)
            {
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Reload command {0}. Reject by Error Port Index.", (IOLPDevice)port));
                accept_result = 2;
                return;
            }
            if (EFEM.MP_Busy(port - (int)IOLPDevice.MP1) == true)
            {
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Reload command {0}. Reject by MP Busy.", (IOLPDevice)port));
                accept_result = 2;
                return;
            }
            if (EFEM.MP_Presence(port - (int)IOLPDevice.MP1) != true)
            {
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Reload command {0}. Reject by not MAG Presence.", (IOLPDevice)port));
                accept_result = 2;
                return;
            }

            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("S -> M:Reload command {0}", (IOLPDevice)port));

            if (HT.EFEM.Status == EFEMStatus.Run_Now && Device_BG.IsBusy)
            {
                Device_Queue.EnQueue(string.Format("{0}!{1}", SQLWaferInforStep.MP_Reload, port - (int)IOLPDevice.MP1));
            }
            else
            {
                Magazine_Command(SocketCommand.Reloading, port - (int)IOLPDevice.MP1);
            }
        }

        #endregion

        #region Robot2_Ready

        private void Robot2_Ready_DoWork(object sender, DoWorkEventArgs e)
        {
            Refresh_System();
            EFEM_Work = NormalStatic.Ready;
            EFEM.Robot_RecQueue[1].Clear();
            EFEM.Magazine_RecQueue.Clear();
            Interrupt_Queue.Clear();

            #region Robot2 Home

            if (Robot2_Command(SocketCommand.InitialHome) == false)
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }
   
            if (!WaitAutoRobot2(ROBOT_TIMEOUT))
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            #endregion

            #region MP Load

            for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
            {
                if ((EFEM.MP_Presence(i) == true) && EFEM.MP_GetInDoorOpen(i) != IOLPDoor.Open)
                {
                    if (Ready_MPLoad(i) == false)
                    {
                        e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                        return;
                    }
                }
            }

            if (!WaitMagazineInitialHome(IOLP_TIMEOUT))
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            #endregion

            #region Robot2 Mapping

            for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
            {
                if (EFEM.MP_Presence(i) == true && EFEM.MP_GetInDoorOpen(i) == IOLPDoor.Open && (EFEM.MP_CheckNeedMapping(i) || HT.EFEM.Status == EFEMStatus.Continue_Now))
                {
                    if (Robot2_Ready_Command(SocketCommand.RobotMapping, true,string.Format("{0}{1}", NormalStatic.MagazinePort, i + 1)) == false)
                    {
                        e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                        return;
                    }
                }
            }

            #endregion

            #region Robot2 Home

            if (Robot2_Command(SocketCommand.InitialHome) == false)
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }
            if (!WaitAutoRobot2(ROBOT_TIMEOUT))
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            #endregion

            Robot2_Work = "TBD";

            e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.True);
        }

        private bool Ready_MPLoad(int port)
        {
            Robot2_Data.obj = NormalStatic.MagazinePort;
            Robot2_Data.port = port;
            Robot2_Data.command = SocketCommand.Load;
            Robot2_Work = SocketCommand.Load.ToString();

            EFEM.Command_EnQueue(Robot2_Data);

            if (EFEM.Magazine_RecQueue.DeQueue())
            {
                return true;
            }
            return false;
        }

        private bool Robot2_Ready_Command(SocketCommand command ,bool IsWait,string dest)
        {
            Robot2_Data.obj = NormalStatic.Robot;
            Robot2_Data.port = 1;
            Robot2_Data.command = command;
            Robot2_Data.Parameter = dest;

            EFEM.Command_EnQueue(Robot2_Data);

            if (EFEM.Robot_RecQueue[1].DeQueue())
            {
                Robot2_Work = string.Format("{0},{1}", command, dest);

                if (IsWait)
                {
                    if (!WaitAutoRobot2(ROBOT_TIMEOUT))
                        return false;
                }
                return true;
            }
            return false;
        }

        #endregion

        #region Robot1_Ready

        private void Robot1_Ready_DoWork(object sender, DoWorkEventArgs e)
        {
            Refresh_System();
            EFEM.Robot_RecQueue[0].Clear();
            EFEM.Casstter_RecQueue.Clear();
            Interrupt_Queue.Clear();

            #region Robot1 Home

            if (Robot1_Command(SocketCommand.InitialHome) == false)
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            if (!WaitAutoRobot1(ROBOT_TIMEOUT))
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            #endregion

            #region CP Load

            for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
            {
                if ((EFEM.CP_Presence(i) == true) && EFEM.CP_GetInDoorOpen(i) != IOLPDoor.Open)
                {
                    if (Ready_CPLoad(i) == false)
                    {
                        e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                        return;
                    }

                }
            }

            if (!WaitCstInitialHome(IOLP_TIMEOUT))
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            #endregion

            #region Robot1 Mapping

            for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
            {
                if (EFEM.CP_Presence(i) == true && EFEM.CP_GetInDoorOpen(i) == IOLPDoor.Open && (EFEM.CP_CheckNeedMapping(i) || HT.EFEM.Status == EFEMStatus.Continue_Now ) )
                {
                    if (Robot1_Ready_Command(SocketCommand.RobotMapping, true, string.Format("{0}{1}", NormalStatic.CstPort, i + 1)) == false)
                    {
                        e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                        return;
                    }
                }
            }

            #endregion

            #region Robot1 Home

            if (Robot1_Command(SocketCommand.InitialHome) == false)
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            if (!WaitAutoRobot1(ROBOT_TIMEOUT))
            {
                e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            #endregion

            Robot1_Work = "TBD";
            e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.True);
        }

        private bool Ready_CPLoad(int port)
        {
            Robot1_Data.obj = NormalStatic.CstPort;
            Robot1_Data.port = port;
            Robot1_Data.command = SocketCommand.Load;
            Robot1_Work = SocketCommand.Load.ToString();

            EFEM.Command_EnQueue(Robot1_Data);

            if (EFEM.Casstter_RecQueue.DeQueue())
            {
                return true;
            }
            return false;
        }

        private bool Robot1_Ready_Command(SocketCommand command ,bool Iswait,string dest)
        {
            Robot1_Data.obj = NormalStatic.Robot;
            Robot1_Data.port = 0;
            Robot1_Data.command = command;
            Robot1_Data.Parameter = dest;

            EFEM.Command_EnQueue(Robot1_Data);

            if (EFEM.Robot_RecQueue[0].DeQueue())
            {
                Robot1_Work = string.Format("{0},{1}", command, dest);

                if(Iswait)
                {
                    if (!WaitAutoRobot1(ROBOT_TIMEOUT))
                        return false;
                }
                return true;
            }
            return false;
        }

        #endregion

        #region Initial

        private void Initial_DoWork(object sender, DoWorkEventArgs e)
        {
            Refresh_System();
            EFEM_Work = NormalStatic.InitialDevice;

            for (int i = 0; i < HCT_EFEM.RobotCount; i++)
            {
                EFEM.Robot_RecQueue[i].Clear();
            }

            EFEM.Casstter_RecQueue.Clear();
            EFEM.Magazine_RecQueue.Clear();
            EFEM.Aligner_RecQueue.Clear();

            for (int i = 0; i < HCT_EFEM.StageCount; i++)
            {
                EFEM.Stage_RecQueue[i].Clear();
            }

            Interrupt_Queue.Clear();

 
#if false //Mike
            while(true)
            {
                System.Threading.Thread.Sleep(1000);

                if(EFEM.StageReady(0) == true && EFEM.StageBusy(0) == false)
                {
                    Device_Queue.EnQueue(string.Format("{0}-{1}-{2}", EFEM.StageCarrierWaferInfo(0) == WaferStatus.WithOut ? SQLWaferInforStep.Mix_ing : SQLWaferInforStep.Separation_ing, "123", 0));
                }
                if (EFEM.StageReady(1) == true && EFEM.StageBusy(1) == false)
                {
                    Device_Queue.EnQueue(string.Format("{0}-{1}-{2}", EFEM.StageCarrierWaferInfo(1) == WaferStatus.WithOut ? SQLWaferInforStep.Mix_ing : SQLWaferInforStep.Separation_ing, "123", 1));
                }

            }
#else
            #region Robot Home

            if (Robot1_Command(SocketCommand.InitialHome) == false)
            {
                e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Robot1_Data.obj,Robot1_Data.command);
                return;
            }

            if (Robot2_Command(SocketCommand.InitialHome) == false)
            {
                e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Robot2_Data.obj, Robot2_Data.command);
                return;
            }

            if (!WaitAutoRobot1(ROBOT_TIMEOUT))
            {
                e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Robot1_Data.obj, Robot1_Data.command);
                return;
            }
            if (!WaitAutoRobot2(ROBOT_TIMEOUT))
            {
                e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Robot2_Data.obj, Robot2_Data.command);
                return;
            }

            #endregion

            #region CP/MP/Aligner/Stage Home

            //for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
            //{
            //    if (Casstter_Command(SocketCommand.Home, i) == false)
            //    {
            //        e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Device_Data.obj, Device_Data.command);
            //        return;
            //    }
            //}

            //for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
            //{
            //    if (Magazine_Command(SocketCommand.Home, i) == false)
            //    {
            //        e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Device_Data.obj, Device_Data.command);
            //        return;
            //    }
            //}

            if (Alinger_Command(SocketCommand.InitialHome, 0, "") == false)
            {
                e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Device_Data.obj, Device_Data.command);
                return;
            }
            //Wayne 0913
            PLC.InitialCommand();

            //for (int i = 0; i < HCT_EFEM.StageCount; i++)
            //{
            //    if (Stage_Command(SocketCommand.Home, i) == false)
            //    {
            //        e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Device_Data.obj, Device_Data.command);
            //        return;
            //    }
            //}

            //Joanne 20210825
            for (int i = 0; i < HCT_EFEM.D900Count; i++)
            {
                if (D900_Command(SocketCommand.Read, i) == false)
                {
                    e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Device_Data.obj, Device_Data.command);
                    return;
                }
            }

            //Wayne 0913 //Joanne 20210825
            if (!WaitCstInitialHome(IOLP_TIMEOUT)
             || !WaitMagazineInitialHome(IOLP_TIMEOUT)
             || !WaitAligner(ALIGNER_TIMEOUT, 0)
             || !WaitStageRobot1(STAGE_TIMEOUTOUT, 0)
             || !WaitStageRobot2(STAGE_TIMEOUTOUT, 1)
                || !WaitPLCInitial(STAGE_TIMEOUTOUT)
                || !WaitD900Initial(STAGE_TIMEOUTOUT,0)
                || !WaitD900Initial(STAGE_TIMEOUTOUT,1))
            {
                e.Result = string.Format("{0},{1},{2},{3}", NormalStatic.InitialDevice, NormalStatic.False, Device_Data.obj, Device_Data.command);
                return;
            }

            #endregion

            EFEM_Work = "TBD";
            e.Result = string.Format("{0},{1}", NormalStatic.InitialDevice, NormalStatic.True); 
#endif

        }

        private bool Robot1_Command(SocketCommand command)
        {
            Robot1_Data.obj = NormalStatic.Robot;
            Robot1_Data.port = 0;
            Robot1_Data.command = command;
            Robot1_Work = command.ToString();

            EFEM.Command_EnQueue(Robot1_Data);

            if (EFEM.Robot_RecQueue[0].DeQueue())
            {
                return true;
            }
            return false;
        }

        private bool Robot2_Command(SocketCommand command)
        {
            Robot2_Data.obj = NormalStatic.Robot;
            Robot2_Data.port = 1;
            Robot2_Data.command = command;
            Robot2_Work = command.ToString();

            EFEM.Command_EnQueue(Robot2_Data);

            if (EFEM.Robot_RecQueue[1].DeQueue())
            {
                return true;
            }
            return false;
        }

        private bool Casstter_Command(SocketCommand command, int port)
        {
            lock (Device_Lock) 
            {
                Device_Data.obj = NormalStatic.CstPort;
                Device_Data.port = port;
                Device_Data.command = command;

                EFEM.Command_EnQueue(Device_Data);

                if(EFEM.Casstter_RecQueue.DeQueue(1000))
                {
                    return true;
                }
                return false;
            }

        }

        private bool Magazine_Command(SocketCommand command ,int port)
        {
            lock (Device_Lock) 
            {
                Device_Data.obj = NormalStatic.MagazinePort;
                Device_Data.port = port;
                Device_Data.command = command;

                EFEM.Command_EnQueue(Device_Data);

                if (EFEM.Magazine_RecQueue.DeQueue(1000))
                {
                    return true;
                }
                return false;
            }
        }

        private bool Alinger_Command(SocketCommand command,int port, string paramater)
        {
            lock (Device_Lock) 
            {
                Device_Data.obj = NormalStatic.Aligner;
                Device_Data.port = port;
                Device_Data.command = command;
                Device_Data.Parameter = paramater;

                EFEM.Command_EnQueue(Device_Data);

                if (EFEM.Aligner_RecQueue.DeQueue(10000))
                {
                    UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Aligner Interlock True"));
                    return true;
                }
                UI.Log(NormalStatic.System, NormalStatic.Core, SystemList.ProgramOpen, string.Format("Aligner Interlock false"));
                return false;
            }            
        }

        private bool Stage_Command(SocketCommand command, int port)
        {
            Device_Data.obj = NormalStatic.Stage;
            Device_Data.port = port;
            Device_Data.command = command;

            EFEM.Command_EnQueue(Device_Data);

            if (EFEM.Stage_RecQueue[port].DeQueue())
            {
                return true;
            }

            return false;
        }

        private bool OCR_Command(SocketCommand command, int port)
        {
            Device_Data.obj = NormalStatic.OCRReader;
            Device_Data.port = port;
            Device_Data.command = command;

            EFEM.Command_EnQueue(Device_Data);

            if (EFEM.OCR_RecQueue[port].DeQueue())
            {
                return true;
            }

            return false;
        }

        private bool D900_Command(SocketCommand command, int port)
        {
            Device_Data.obj = NormalStatic.D900;
            Device_Data.port = port;
            Device_Data.command = command;

            EFEM.Command_EnQueue(Device_Data);

            if (EFEM.D900_RecQueue[port].DeQueue())
            {
                return true;
            }

            return false;
        }

        #endregion

        #region Check

        public bool CheckJobStatus()
        {
            Robot1.Core_Dt = SQLite.ReadDataTable(SQLTable.PJ_Pool, "1=1");

            if (Robot1.Core_Dt.Rows.Count == 0)
            {
                UI.Alarm(NormalStatic.Core, ErrorList.EF_NoJob_1105); //Mike
                return false;
            }

            for(int i=0; i < Robot1.Core_Dt.Rows.Count; i++)
            {
                string wafer = Robot1.Core_Dt.Rows[i][(int)WaferInforTableItem.WaferStatus].ToString();
                string carrier = Robot1.Core_Dt.Rows[i][(int)WaferInforTableItem.CarrierStatus].ToString();

               if ((wafer != carrier) 
               || ((wafer == carrier) && 
               ((wafer != SQLWaferInforStep.Start.ToString() && (carrier != SQLWaferInforStep.Start.ToString()))) && ((wafer != SQLWaferInforStep.Finish.ToString() || (carrier != SQLWaferInforStep.Finish.ToString()))))
               )
                {
                    UI.Alarm(NormalStatic.Core, ErrorList.EF_JobStatusFail_1106); 
                    return false;
                }
            }

            return true;
        }

        public bool CheckWaferPresence()
        {
            Robot1.Core_Dt = SQLite.ReadDataTable(SQLTable.PJ_Pool, string.Format("{0}!= '{1}'", WaferInforTableItem.WaferStatus, SQLWaferInforStep.Finish));

            //for (int i = 0; i < Robot1.Core_Dt.Rows.Count; i++)
            //{
            //    string CPport = Robot1.Core_Dt.Rows[i][(int)WaferInforTableItem.SocPort].ToString();
            //    int C_port = Convert.ToInt16(CPport.Substring(NormalStatic.CstPort.Length, CPport.Length - NormalStatic.CstPort.Length)) - 1;
            //    int C_Slot = Convert.ToInt32(Robot1.Core_Dt.Rows[i][(int)WaferInforTableItem.SocSlot].ToString());

            //    string MPport = Robot1.Core_Dt.Rows[i][(int)WaferInforTableItem.DesPort].ToString();
            //    int M_port = Convert.ToInt16(MPport.Substring(NormalStatic.MagazinePort.Length, MPport.Length - NormalStatic.MagazinePort.Length)) - 1;
            //    int M_Slot = Convert.ToInt32(Robot1.Core_Dt.Rows[i][(int)WaferInforTableItem.DesSlot].ToString());

            //    if(HT.CassetteData[C_port].Wafer[C_Slot-1].Status != WaferStatus.With ||HT.MagazineData[M_port].Wafer[M_Slot-1].Status != WaferStatus.With)
            //    {
            //        UI.Alarm(NormalStatic.Core, ErrorList.RB_WaferDataError_0313);
            //        return false;
            //    }
            //}

            return true;
        }
        #endregion

        private void CompletedBG(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                Refresh_System();
                string[] Result = e.Result.ToString().Split(',');
                switch (Result[0])
                {
                    case NormalStatic.Auto:
                        {
                            //Robot_Queue[0].Clear();
                            //Robot_Queue[1].Clear();

                            if ((HT.Recipe.AutoMode != PJ_Type.Sortering && Robot1_BG.IsBusy == false && Robot2_BG.IsBusy == false)
                              ||(HT.Recipe.AutoMode == PJ_Type.Sortering && Robot1_BG.IsBusy == false))
                            {
                                if (Result[1] == NormalStatic.True)
                                {
                                    IO_EFEM.EFEMStatusControl(StatusControl.Idle);

                                    if (HT.EFEM.Mode == EFEMMode.Remote)
                                    {   
                                        #region Remote

                                        UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ProcessJobEnd_Complete, "");
                                        UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ControlJobEnd_Complete, "");

                                        if (Robot1_BG.IsBusy == false)
                                            Robot1_BG.RunWorkerAsync();
                                        if (Robot2_BG.IsBusy == false)
                                            Robot2_BG.RunWorkerAsync();

                                        UI.Log(NormalStatic.System, NormalStatic.EFEM, SystemList.ProgramClose, NormalStatic.Auto);

                                        #endregion
                                    }
                                    else
                                    {
                                        if (HT.EFEM.DryRunMode && (HT.EFEM.DryRunTotalCount > HT.EFEM.DryRunNowCount))
                                        {
                                            #region Local + 千傳
                                            HT.EFEM.DryRunNowCount++;

                                            labNowCount.Text = HT.EFEM.DryRunNowCount.ToString();

                                            switch (HT.Recipe.AutoMode)
                                            {
                                                case PJ_Type.Load:
                                                    HT.Recipe.AutoMode = PJ_Type.Unload;
                                                    break;

                                                case PJ_Type.Unload:
                                                    HT.Recipe.AutoMode = PJ_Type.Load;
                                                    break;

                                                case PJ_Type.LoadUnload:
                                                    {
                                                        SQLite.SetSwapTest( WaferInforTableItem.SocSlot,WaferInforTableItem.SwapSlot,"1=1");
                                                        SQLite.SetSwapTest(WaferInforTableItem.SocPort, WaferInforTableItem.SwapPort, "1=1");
                                                    }
                                                    break;

                                                case PJ_Type.Sortering:
                                                    {
                                                        SQLite.SetSwapTest(WaferInforTableItem.SocSlot, WaferInforTableItem.DesSlot, "1=1");
                                                        SQLite.SetSwapTest(WaferInforTableItem.SocPort, WaferInforTableItem.DesPort, "1=1");
                                                    }
                                                    break;
                                            }

                                            SQLite.CopyWaferInfoToHistory(SQLTable.PJ_Pool, string.Format("{0}= '{2}' and {1}= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish));
                                            SQLite.LimitWaferInfoToHistory(SQLTable.PJ_History, 100000);

                                            Update_PJ("1=1", WaferInforTableItem.WaferStatus, SQLWaferInforStep.Start.ToString());
                                            Update_PJ("1=1", WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Start.ToString());
                                            Robot1_BG.RunWorkerAsync();
                                            Robot2_BG.RunWorkerAsync();

                                            #endregion
                                        }
                                        else if(HT.EFEM.IsContinue || SECS.CJList.Count > 0) //Walson追加
                                        {
                                            #region Continue完成後, 若PJ自動切換成Remote模式

                                            HT.EFEM.IsContinue = false;

                                            SQLite.CopyWaferInfoToHistory(SQLTable.PJ_Pool, string.Format("{0}= '{2}' or {1}= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish));
                                            SQLite.LimitWaferInfoToHistory(SQLTable.PJ_History, 100000);

                                            Change_EFEM_Mode(EFEMMode.Remote);

                                            //Joanne 20210825
                                            UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ToolModeChange_Remote, "");

                                            UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ProcessJobEnd_Complete, "");
                                            UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ControlJobEnd_Complete, "");

                                            if (Robot1_BG.IsBusy == false)
                                                Robot1_BG.RunWorkerAsync();
                                            if (Robot2_BG.IsBusy == false)
                                                Robot2_BG.RunWorkerAsync();

                                            UI.Log(NormalStatic.System, NormalStatic.EFEM, SystemList.ProgramClose, NormalStatic.Auto);

                                            #endregion
                                        }
                                        else
                                        {
                                            UI.AutoButton(EFEMStatus.Run_Finish, Result[1]);

                                            SQLite.CopyWaferInfoToHistory(SQLTable.PJ_Pool, string.Format("{0}= '{2}' or {1}= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish));
                                            SQLite.LimitWaferInfoToHistory(SQLTable.PJ_History, 100000);
                                            SQLite.Delete(SQLTable.PJ_Pool, string.Format("{0}= '{2}'and {1}= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish));
                                       
                                            UI.Log(NormalStatic.System, NormalStatic.EFEM, SystemList.ProgramClose, NormalStatic.Cycle);
                                        }
                                    }

                                    //Joanne 20201009 Add Start
                                    IsSetJobComplete_RB1 = false;
                                    IsSetJobComplete_RB2 = false;
                                    //Joanne 20201009 Add End
                                }
                                else
                                {
                                    UI.AutoButton(EFEMStatus.Run_Finish, Result[1]);
                                    UI.Alarm(NormalStatic.EFEM, ErrorList.ProcessError, Result[2]);
                                }
                            }
                        }
                        break;

                    case NormalStatic.Ready:
                        {
                            if (Robot1_MappingReadyBG.IsBusy == false && Robot2_MappingReadyBG.IsBusy == false)
                            {
                                if(HT.EFEM.Status == EFEMStatus.Continue_Now)
                                    UI.AutoButton(EFEMStatus.Continue_Finish, Result[1]);
                                else
                                    UI.AutoButton(EFEMStatus.Ready_Finish, Result[1]);

                                if (Result[1] == NormalStatic.True)
                                    UI.Log(NormalStatic.System, NormalStatic.EFEM, SystemList.ProgramClose, NormalStatic.Ready);
                                else
                                    UI.Alarm(NormalStatic.EFEM, ErrorList.ProcessError, NormalStatic.Ready);
                            }

                        }
                        break;

                    case NormalStatic.InitialDevice:
                        {
                            UI.AutoButton(EFEMStatus.Init_Finish, Result[1]);

                            if (Result[1] == NormalStatic.True)
                                UI.Log(NormalStatic.System, NormalStatic.EFEM, SystemList.ProgramClose, NormalStatic.InitialDevice);
                            else
                                UI.Alarm(NormalStatic.EFEM, ErrorList.ProcessError, string.Format("{0}:{1}", Result[2], Result[3]));
                        }
                        break;

                    case NormalStatic.Device:
                        {
                            UI.Log(NormalStatic.System, NormalStatic.EFEM, SystemList.ProgramClose, NormalStatic.Device);

                          //  if (Robot1_BG.IsBusy == false) 
                          //      UI.AutoButton(EFEMStatus.Run_Finish, Result[1]);

                          //  if (Result[1] == NormalStatic.False)
                          //      UI.Alarm(NormalStatic.EFEM, ErrorList.ProcessError, Result[2]);
                        }
                        break;
                }

            }
            catch (Exception ex)
            {
                UI.Alarm(NormalStatic.Core, ErrorList.AP_TryCatchError, string.Format("{0},{1}", "BG", ex.ToString()));
            }
        }  

        #endregion

        #region Task

        public  void Port_InOutDoor_Open()
        {
            for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
            {
                if (Casstter_Command(SocketCommand.InDoorOpen, i) == false)
                {
                    return;
                }
            }

            if (!WaitCstInitialHome(IOLP_TIMEOUT))
            {
                //e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
            {
                if (Magazine_Command(SocketCommand.InDoorOpen, i) == false)
                {
                    return;
                }
            }

            if (!WaitMagazineInitialHome(IOLP_TIMEOUT))
            {
               // e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
            {
                if (Casstter_Command(SocketCommand.OutDoorOpen, i) == false)
                {
                    return;
                }
            }

            if (!WaitCstInitialHome(IOLP_TIMEOUT))
            {
                //e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }

            for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
            {
                if (Magazine_Command(SocketCommand.OutDoorOpen, i) == false)
                {
                    return;
                }
            }

            if (!WaitMagazineInitialHome(IOLP_TIMEOUT))
            {
                //e.Result = string.Format("{0},{1}", NormalStatic.Ready, NormalStatic.False);
                return;
            }
        }
        
        
        #endregion

        #region Wait

        private bool Wait_EFEM()
        {
            string Interrupt = Interrupt_Queue.DeQueue(100);
            if (Interrupt == null)
                return true;

            UI.Alarm(NormalStatic.Core, ErrorList.ProcessError , "User Interrupt");
            return false;
        }
        //60
        private bool WaitNoEFEMRobot2(int timeout)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.RobotBusy(1))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.RobotDevice(1), ErrorList.Timeout_1010, string.Format("{0}S", ROBOT_TIMEOUT));
                    return false;
                }

                System.Threading.Thread.Sleep(100);
                i++;
            }
            return true;
        }
        //60
        private bool WaitNoEFEMRobot1(int timeout)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.RobotBusy(0))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.RobotDevice(0), ErrorList.Timeout_1010, string.Format("{0}S", ROBOT_TIMEOUT));
                    return false;
                }

                System.Threading.Thread.Sleep(100);
                i++;
            }
            return true;
        }
        //60
        private bool WaitAutoRobot2(int timeout)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.RobotBusy(1))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.RobotDevice(1), ErrorList.Timeout_1010, string.Format("{0}S", ROBOT_TIMEOUT));
                    return false;
                }

                if (!Wait_EFEM())
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitAutoRobot1(int timeout)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.RobotBusy(0))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.RobotDevice(0), ErrorList.Timeout_1010, string.Format("{0}S", ROBOT_TIMEOUT));
                    return false;
                }
                if (!Wait_EFEM())
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitCstInitialHome(int timeout)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.CP_Busy(0) || EFEM.CP_Busy(1) || EFEM.CP_Busy(2) || EFEM.CP_Busy(3) || EFEM.CP_Busy(4) || EFEM.CP_Busy(5) || EFEM.CP_Busy(6) || EFEM.CP_Busy(7) || EFEM.CP_Busy(8) || EFEM.CP_Busy(9))
            {
                if (i > time)
                {
                    UI.Alarm(NormalStatic.CstPort, ErrorList.Timeout_1010, string.Format("{0}S", IOLP_TIMEOUT));
                    return false;
                }
                if (!Wait_EFEM())
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitMagazineInitialHome(int timeout)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.MP_Busy(0) || EFEM.MP_Busy(1) || EFEM.MP_Busy(2) || EFEM.MP_Busy(3) || EFEM.MP_Busy(4) || EFEM.MP_Busy(5) || EFEM.MP_Busy(6) || EFEM.MP_Busy(7))
            {
                if (i > time)
                {
                    UI.Alarm(NormalStatic.MagazinePort, ErrorList.Timeout_1010, string.Format("{0}S", IOLP_TIMEOUT));
                    return false;
                }
                if (!Wait_EFEM())
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitCassetteport(int timeout, int Index)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.CP_Busy(Index))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.CP_Device(Index), ErrorList.Timeout_1010, string.Format("{0}S", IOLP_TIMEOUT));
                    return false;
                }
                if (!Wait_EFEM())
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitMagazineport(int timeout, int Index)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.MP_Busy(Index))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.MP_Device(Index), ErrorList.Timeout_1010, string.Format("{0}S", IOLP_TIMEOUT));
                    return false;
                }
                if (!Wait_EFEM())
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitAligner(int timeout, int index)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.AlignerBusy(index))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.AlignerDevice(index), ErrorList.Timeout_1010, string.Format("{0}S", ALIGNER_TIMEOUT));
                    return false;
                }
                if (!Wait_EFEM())//外部中斷
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitStageRobot1(int timeout, int index)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.StageBusy(index))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.StageDevice(index), ErrorList.Timeout_1010, string.Format("{0}S", STAGE_TIMEOUTOUT));
                    return false;
                }
                if (!Wait_EFEM())//外部中斷
                    return false;
                i++;
            }
            return true;
        }
        //60
        private bool WaitStageRobot2(int timeout, int index)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.StageBusy(index))
            {
                if (i > time)
                {
                    UI.Alarm(EFEM.StageDevice(index), ErrorList.Timeout_1010, string.Format("{0}S", STAGE_TIMEOUTOUT));
                    return false;
                }
                if (!Wait_EFEM())//外部中斷
                    return false;
                i++;
            }
            return true;
        }
        //Wayne 0913
        private bool WaitPLCInitial(int timeout)
        {
            int i = 0;
            int time = timeout * 10;
            while (PLC.Initialing || HT.EFEM.PLC_EFEM_Status[(int)EFEM_DI.Busy])
            {
                if (i > time)
                {
                    UI.Alarm("PLC Initital", ErrorList.Timeout_1010, string.Format("{0}S", STAGE_TIMEOUTOUT));
                    return false;
                }
                if (!Wait_EFEM())//外部中斷
                    return false;
                i++;
            }
            return true;
        }

        //Joanne 20210825
        private bool WaitD900Initial(int timeout,int index)
        {
            int i = 0;
            int time = timeout * 10;
            while (EFEM.D900Busy(index))
            {
                if (i > time)
                {
                    UI.Alarm("D900 Initital", ErrorList.Timeout_1010, string.Format("{0}S", STAGE_TIMEOUTOUT));
                    return false;
                }
                if (!Wait_EFEM())//外部中斷
                    return false;
                i++;
            }
            return true;
        }
        #endregion

        #region Refresh

        private void btnRefreshJob_Click(object sender, EventArgs e)
        {
            Refresh_System();
            Refresh_PJ();
            UI.Operate(NormalStatic.Core, "Refresh_PJ");
        }         

        public void Refresh_System()
        {
            if (InvokeRequired)
            {
                this.Invoke(new MethodInvoker(delegate() { Refresh_System(); }));
                return;
            }

            labEFEMBusy.BackColor = (InitialBG.IsBusy || Robot1_MappingReadyBG.IsBusy || Robot2_MappingReadyBG.IsBusy) ? Color.Red : Color.LightGreen;
            labRobot1Busy.BackColor = Robot1_BG.IsBusy ? Color.Red : Color.LightGreen;
            labRobot2Busy.BackColor = Robot2_BG.IsBusy ? Color.Red : Color.LightGreen;
            Busy = (InitialBG.IsBusy || Robot1_MappingReadyBG.IsBusy || Robot2_MappingReadyBG.IsBusy || Robot1_BG.IsBusy || Robot2_BG.IsBusy || Device_BG.IsBusy);

            labNowCount.Text = HT.EFEM.DryRunNowCount.ToString();
            //labNowCount_2.Text = HT.EFEM.DryRunNowCount_2.ToString();

            EFEM.AuthorityChange(Busy);
            Refresh_AuthorityCondition();
        }

        public void Refresh_AuthorityCondition()
        {
            if (HT.EFEM.Authority == AuthorityTable.Operator || Busy)
            {
                gbxCoreContrl.Visible = false;
                gbxCycle.Enabled = false;
            }
            else
            {
                if (HT.EFEM.Status == EFEMStatus.Run_Fail || HT.EFEM.Status == EFEMStatus.SysCheck_Finish)
                    gbxCoreContrl.Visible = true;
                else
                    gbxCoreContrl.Visible = false;

                if (HT.EFEM.Authority == AuthorityTable.Engineer)
                    gbxCycle.Enabled = false;
                else
                    gbxCycle.Enabled = true;
            }

        }

        public void Refresh_PJ()
        {
            if (InvokeRequired)
            {
                this.Invoke(new MethodInvoker(delegate() { Refresh_PJ(); }));
                return;
            }
            
            dgvQueuePJ.DataSource = SQLite.ReadDataTable(SQLTable.PJ_Pool, "1=1");
            dgvQueuePJ.Columns[(int)WaferInforTableItem.CJID].Frozen = true;
            dgvQueuePJ.Columns[(int)WaferInforTableItem.DesSlot].Frozen = true;
        }

        public void Refresh_WaferItem()
        {
            if (InvokeRequired)
            {
                this.Invoke(new MethodInvoker(delegate() { Refresh_WaferItem(); }));
                return;
            }

            cboWaferStatus.Items.Clear();
            cboWaferStatus.Items.Add(SQLWaferInforStep.Start);
            cboWaferStatus.Items.Add(SQLWaferInforStep.Finish);

            //for (int i = 0; i < Wafer_Step[(int)HT.Recipe.AutoMode].Count; i++)
            //{
            //    cboWaferStatus.Items.Add(Wafer_Step[(int)HT.Recipe.AutoMode][i]);
            //}
        }

        public void Refresh_CarrierItem()
        {
            if (InvokeRequired)
            {
                this.Invoke(new MethodInvoker(delegate() { Refresh_CarrierItem(); }));
                return;
            }

            cboCarrierStatus.Items.Clear();

            cboCarrierStatus.Items.Add(SQLWaferInforStep.Start);
            cboCarrierStatus.Items.Add(SQLWaferInforStep.Finish);
            //for (int i = 0; i < Carrier_Step[(int)HT.Recipe.AutoMode].Count; i++)
            //{
            //    cboCarrierStatus.Items.Add(Carrier_Step[(int)HT.Recipe.AutoMode][i]);
            //}
        }

        #endregion

        #region Method

        public void Interrupt()
        {
            Refresh_System();

            if (Busy)
            {
                Robot_Queue[0].EnQueue(NormalStatic.Stop);
                Robot_Queue[1].EnQueue(NormalStatic.Stop);
                Device_Queue.EnQueue(string.Format("{0}!{1}", NormalStatic.Stop, ""));
                Interrupt_Queue.EnQueue(NormalStatic.Stop);
            }
        }

        public void Close()
        {
            Interrupt();
            EFEM.Close();
            SECS.Close();
        }

        #endregion

        #region UI

        #region Delete

        private void btnDeleteWaferJob_Click(object sender, EventArgs e)
        {
            if (dgvQueuePJ.CurrentRow == null || dgvQueuePJ.SelectedRows.Count == 0)
                return;

            string Device = dgvQueuePJ.Rows[dgvQueuePJ.CurrentRow.Index].Cells[(int)WaferInforTableItem.SocPort].Value.ToString();
            int Slot = Convert.ToInt32(dgvQueuePJ.Rows[dgvQueuePJ.CurrentRow.Index].Cells[(int)WaferInforTableItem.SocSlot].Value.ToString());
            DialogResult result = MessageBox.Show(String.Format("Are yor sure delete selected Item Count {0}", dgvQueuePJ.SelectedRows.Count),
                                                 "Notice",
                                                 MessageBoxButtons.YesNo,
                                                 MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                string Delete_Com = "";
                for (int row = 0; row < dgvQueuePJ.SelectedRows.Count; row++)
                {
                    int current_row = dgvQueuePJ.SelectedRows[row].Index;
                    Device = dgvQueuePJ.Rows[current_row].Cells[(int)WaferInforTableItem.SocPort].Value.ToString();
                    Slot = Convert.ToInt32(dgvQueuePJ.Rows[current_row].Cells[(int)WaferInforTableItem.SocSlot].Value.ToString());
                    Delete_Com += string.Format("Delete from {0} where {1}= '{2}' and {3}= {4} ;", SQLTable.PJ_Pool, WaferInforTableItem.SocPort, Device, WaferInforTableItem.SocSlot, Slot);
                    UI.Operate(NormalStatic.Core, string.Format("Delete wafer infor :{0}-{1}", Device, Slot));
                }

                SQLite.Multi_DeleteWaferInfo(Delete_Com);
                Refresh_PJ();
            }
        }

        #endregion

        #region Create

        //private void btnCreateJob_Click(object sender, EventArgs e)
        //{
        //    CreaterJobAutoForm();
        //}

        //private void AutoPanel_FormClosed(object sender, EventArgs e)
        //{
        //    Refresh_PJ();
        //}

        public void CreaterJobAutoForm()
        {
            SQLite.Delete(SQLTable.PJ_Pool, "1=1");
            CreateJob = new Form_AutoJob();
            List<IOLPDevice> OMS_In = new List<IOLPDevice>();
            List<IOLPDevice> OMS_Out = new List<IOLPDevice>();
            List<int[]> Slot = new List<int[]>();
            int[] NowSlot = new int[12];

            #region Get Parameter

            for (int i = 0; i < 8; i++)
            {
                if (HT.MagazineData[i].PortType == MagazinePortType.OMS_In)
                    OMS_In.Add((IOLPDevice)(i + (int)IOLPDevice.MP1));
                else if (HT.MagazineData[i].PortType == MagazinePortType.OMS_Out)
                    OMS_Out.Add((IOLPDevice)(i + (int)IOLPDevice.MP1));
            }

            string[] FoupID = new string[(int)IOLPDevice.MaxCnt];

            for (int i = 0; i < (int)IOLPDevice.MaxCnt; i++)
            {
                if (i < (int)IOLPDevice.MP1)
                    FoupID[i] = HT.CassetteData[i].ID;
                else
                    FoupID[i] = HT.MagazineData[i - (int)IOLPDevice.MP1].ID;
            }

            for (int CP_index = (int)IOLPDevice.CP1; CP_index < (int)IOLPDevice.MP1; CP_index++)
            {
                Slot.Add(EFEM.CP_SlotData(CP_index));
            }

            for (int MP_index = 0; MP_index < 8; MP_index++)
            {
                if (HT.MagazineData[MP_index].PortType != MagazinePortType.OMS_Out)
                {
                    NowSlot = new int[12];
                    for (int i = 0; i < 12; i++)
                    {
                        NowSlot[i] = EFEM.MP_SlotData(MP_index, i + 1);
                    }
                }
                else
                {
                    NowSlot = new int[1];
                    NowSlot[0] = EFEM.MP_SlotData(MP_index, 1);
                }
                Slot.Add(NowSlot);
            }

            #endregion

            //#region Walson Test

            //int[] CP1 = new int[] { 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0 };
            //int[] CP2 = new int[] { 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 1, 0 };
            //int[] CP3 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            //int[] CP4 = new int[] { 0, 0, 1, 1, 2, 1, 0, 1, 0, 2, 1, 0 };
            //int[] CP5 = new int[] { 0, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 0 };
            //int[] CP6 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0 };
            //int[] CP7 = new int[] { 0, 0, 1, 0, 2, 1, 1, 1, 0, 2, 1, 0 };
            //int[] CP8 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0 };
            //int[] CP9 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 1, 0 };
            //int[] CP10 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 1, 0 };
            //int[] MP1 = new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            //int[] MP2 = new int[] { 0, 1, 1, 1, 0, 0, 0, 0, 0 };
            //int[] MP3 = new int[] { 0, 0, 1, 1, 1, 1, 1, 1, 1 };
            //int[] MP4 = new int[] { 0, 0, 1, 0, 2, 1, 0, 0, 0 };
            //int[] MP5 = new int[] { 1, 0, 1, 0, 2, 1, 0, 0, 0 };
            //int[] MP6 = new int[] { 0, 0, 1, 0, 1, 1, 0, 0, 0 };
            //int[] MP7 = new int[] { 0 };
            //int[] MP8 = new int[] { 0 };

            //List<int[]> Test_Slot = new List<int[]> { CP1, CP2, CP3, CP4, CP5, CP6, CP7, CP8, CP9, CP10, MP1, MP2, MP3, MP4, MP5, MP6, MP7, MP8 };

            //#endregion

            CreateJob.Initial( Slot, OMS_In.ToArray(), OMS_Out.ToArray(), FoupID );
            CreateJob.Show();
        }

        #endregion

        #region Status

        private void btnJobChange_Click(object sender, EventArgs e)
        { 
            if (dgvQueuePJ.CurrentRow == null || cboWaferStatus.SelectedIndex == -1)
                return;

            string Device = dgvQueuePJ.Rows[dgvQueuePJ.CurrentRow.Index].Cells[(int)WaferInforTableItem.SocPort].Value.ToString();
            int Slot = Convert.ToInt32(dgvQueuePJ.Rows[dgvQueuePJ.CurrentRow.Index].Cells[(int)WaferInforTableItem.SocSlot].Value.ToString());
            DialogResult result = MessageBox.Show(String.Format("Are yor sure to change the {0}-Slot_{1} status for {2}", Device, Slot, cboWaferStatus.Text),
                                                 "Notice",
                                                 MessageBoxButtons.YesNo,
                                                 MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                string condition = string.Format("{0}= '{1}' and {2}= {3}", WaferInforTableItem.SocPort, Device, WaferInforTableItem.SocSlot, Slot);
                Update_PJ(condition, WaferInforTableItem.WaferStatus, cboWaferStatus.Text);
                Refresh_PJ();
                cboWaferStatus.SelectedIndex = -1;
                UI.Operate(NormalStatic.Core, string.Format("Change Status Wafer:{0}", condition));
            }
        }

        private void btnCarrierChange_Click(object sender, EventArgs e)
        {
            if (dgvQueuePJ.CurrentRow == null || cboCarrierStatus.SelectedIndex == -1)
                return;

            string Device = dgvQueuePJ.Rows[dgvQueuePJ.CurrentRow.Index].Cells[(int)WaferInforTableItem.DesPort].Value.ToString();
            int Slot = Convert.ToInt32(dgvQueuePJ.Rows[dgvQueuePJ.CurrentRow.Index].Cells[(int)WaferInforTableItem.DesSlot].Value.ToString());
            DialogResult result = MessageBox.Show(String.Format("Are yor sure to change the {0}-Slot_{1} status for {2}", Device, Slot, cboWaferStatus.Text),
                                                 "Notice",
                                                 MessageBoxButtons.YesNo,
                                                 MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                string condition = string.Format("{0}= '{1}' and {2}= {3}", WaferInforTableItem.DesPort, Device, WaferInforTableItem.DesSlot, Slot);
                Update_PJ(condition, WaferInforTableItem.CarrierStatus, cboCarrierStatus.Text);
                Refresh_PJ();
                cboCarrierStatus.SelectedIndex = -1;
                UI.Operate(NormalStatic.Core, string.Format("Change Status Wafer:{0}", condition));
            }
        }
        #endregion 

        #endregion

        #region SQL

        private void Update_PJ(string condition, WaferInforTableItem Item, string content)
        {
            SQLite.SetWaferData(Item, condition, string.Format("'{0}'", content));
        }

        #endregion

        #region Step

        private void CreaterCarrierStep()
        {
            for (int i = 0; i < (int)Core_Loop.MaxCnt; i++)
            {
                Carrier_Step[i] = new List<SQLWaferInforStep>();
                Carrier_Step[i].Clear();
                Carrier_Step[i].Add(SQLWaferInforStep.Start);

                switch (i)
                {
                    #region Load

                    case (int)Core_Loop.Load:
                        {
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ed);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ing);  //+
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ed);

                            if (HT.Recipe.IsOCR_Stage)
                            {
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ed);
                            }

                            Carrier_Step[i].Add(SQLWaferInforStep.Mix_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Mix_ed); //+

                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ing);  //if +
                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ed);

                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ing); //Exchange == false
                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ed);
                        }
                        break; 

                    #endregion

                    #region Unload

                    case (int)Core_Loop.Unload:
                        {
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ed);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ing);  //+
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ed);

                            if (HT.Recipe.IsOCR_Stage)
                            {
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ed);
                            }

                            Carrier_Step[i].Add(SQLWaferInforStep.Separation_ing);  //+
                            Carrier_Step[i].Add(SQLWaferInforStep.Separation_ed);

                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ing);  //if+
                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ed);

                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ing); //Exchange == false
                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ed);
                        }
                        break; 

                    #endregion

                    #region LoadUnload

                    case (int)Core_Loop.LoadUnload:
                        {
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ed);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ing);  //+
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ed);

                            if (HT.Recipe.IsOCR_Stage)
                            {
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ed);
                            }

                            Carrier_Step[i].Add(SQLWaferInforStep.Separation_ing);  //+
                            Carrier_Step[i].Add(SQLWaferInforStep.Separation_ed);

                            Carrier_Step[i].Add(SQLWaferInforStep.Mix_ed);

                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ing);  //if+
                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ed);

                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ing); //Exchange == false
                            Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ed);
                        }
                        break; 

                    #endregion

                    #region OMS

                    case (int)Core_Loop.OMS_Load:
                        {
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_OMS_Get_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_OMS_Get_Magazine_ed);

                            // 20201102 Walson OMS With OCR
                            if (HT.Recipe.IsOCR_Stage)
                            {
                                Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ed);
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Stage_OCR_ed);
                                Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Up_Get_Stage_ed);
                                Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Up_Put_Magazine_ed);
                            }
                            else 
                            {
                                Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Magazine_ing);
                                Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Magazine_ed);
                            }
                        }
                        break;

                    case (int)Core_Loop.OMS_Unload:
                        {
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ed);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_OMS_Put_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_OMS_Put_Magazine_ed);
                        }
                        break;

                    case (int)Core_Loop.OMS_LoadUnload:
                        {
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Get_Magazine_ed);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Swap_OMS_Put_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Swap_OMS_Put_Magazine_ed);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_OMS_Get_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_OMS_Get_Magazine_ed);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Magazine_ing);
                            Carrier_Step[i].Add(SQLWaferInforStep.Down_Put_Magazine_ed);
                        }
                        break; 

                    #endregion
                }
                Carrier_Step[i].Add(SQLWaferInforStep.Finish);
            }
        }

        private void CreaterWaferStep(ref CoreData Robot1)
        {
            for (int i = 0; i < (int)Core_Loop.MaxCnt; i++)
            {
                Wafer_Step[i] = new List<SQLWaferInforStep>();//Wayne 20190913
                Wafer_Step[i].Clear();
                Wafer_Step[i].Add(SQLWaferInforStep.Start);

                switch (i)
                {
                    #region Load

                    case (int)Core_Loop.Load:
                        {
                            if (HT.Recipe.IsAligner)
                            {
                                Robot1.WaferCount[i] = 3;

                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Cassette_ing);
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Cassette_ed);
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ing);  //Exchange = false -1
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ed);

                                if (HT.Recipe.IsOCR_Down || HT.Recipe.IsOCR_Up)
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ed);  //Exchange = true  +1 // stage = false-1 
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_RobotArmExtendOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_RobotArmExtendOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ed);

                                    if (HT.Recipe.OCR_Degree != HT.Recipe.Aligner_Degree)
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ed);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);    //Exchange = true  +1 // stage = false-1 
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ed);
                                    }

                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);    //Exchange = true  +1 // stage = false-1 
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ed);
                                }

                                if (HT.Recipe.IsFlip)
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.TopPut_Stage_ing); //stage == true +1
                                    Wafer_Step[i].Add(SQLWaferInforStep.TopPut_Stage_ed);
                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ing);//stage == true +1
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ed);
                                }
                            }
                            else   //OK
                            {
                                Robot1.WaferCount[i] = 2;

                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Cassette_ing);
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Cassette_ed);

                                if (HT.Recipe.IsFlip) // lower
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.TopPut_Stage_ing);  //stage == true +1
                                    Wafer_Step[i].Add(SQLWaferInforStep.TopPut_Stage_ed);
                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ing); //stage == true +1
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Stage_ed);
                                }
                            }
                            Wafer_Step[i].Add(SQLWaferInforStep.Mix_ing);
                            Wafer_Step[i].Add(SQLWaferInforStep.Mix_ed);   //+2
                        }
                        break; 

                    #endregion

                    #region Unload

                    case (int)Core_Loop.Unload:
                        {
                            Wafer_Step[i].Add(SQLWaferInforStep.Separation_ed);

                            if (HT.Recipe.IsFlip) //lower
                            {
                                Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Stage_ing);
                                Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Stage_ed);
                            }
                            else
                            {
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Stage_ing);
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Stage_ed);
                            }

                            if (HT.Recipe.IsAligner)
                            {
                                Robot1.WaferCount[i] = 3;
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ing);   //Exchange = false -1
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ed);

                                if (HT.Recipe.IsOCR_Down || HT.Recipe.IsOCR_Up)
                                {

                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ed);    //Exchange = true  +1 // stage = false-1 
                                    Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_AlignerOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_AlignerOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Up_RobotArmExtendOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Up_RobotArmExtendOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ed);

                                    if (HT.Recipe.OCR_Degree != HT.Recipe.Aligner_Degree)
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ing);  //Unload_No
                                        Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ed);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);   //Exchange = true  +1  // stage = false-1 
                                        Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Aligner_ed);
                                    }
                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);   //Exchange = true  +1  // stage = false-1 
                                    Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Aligner_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Aligner_ed);
                                }

                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Cassette_ing);  //stage == true +1
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Cassette_ed);
                                
                            }
                            else  //OK
                            {
                                Robot1.WaferCount[i] = 2;
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Cassette_ing); 
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Cassette_ed);
                            }
                        }
                        break; 

                    #endregion

                    #region LoadUnload

                    case (int)Core_Loop.LoadUnload:
                        {
                            Robot1.WaferCount[i] = 2;

                            if (HT.Recipe.IsAligner)
                            {
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Cassette_ing);
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Cassette_ed);
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ing);  //Exchange = false -1
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ed); 

                                if (HT.Recipe.IsOCR_Down || HT.Recipe.IsOCR_Up)
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ed);  //stage = false-1 
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_RobotArmExtendOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_RobotArmExtendOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ed);

                                    if (HT.Recipe.OCR_Degree != HT.Recipe.Aligner_Degree)
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ed);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);  //stage = false-1 
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ed);
                                    }

                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);   //stage = false-1 
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ed);
                                }

                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Get_Stage_ing);  //carrier = saperater
                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Get_Stage_ed);

                                if (HT.Recipe.IsFlip) // lower
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopPut_Stage_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopPut_Stage_ed);
                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Stage_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Stage_ed);
                                }

                                Wafer_Step[i].Add(SQLWaferInforStep.Mix_ing);
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                //UnLoad
                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Put_Aligner_ing); 
                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Put_Aligner_ed);

                                if (HT.Recipe.IsOCR_Down || HT.Recipe.IsOCR_Up)
                                {

                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_AlignmentOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_AlignmentOCR_ed);    //Exchange = true  +1


                                    if (HT.Recipe.OCR_Degree == HT.Recipe.Aligner_Degree)
                                    {
                                        if (HT.Recipe.IsFlip) //lower
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopGet_Aligner_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopGet_Aligner_ed);
                                        }
                                        else
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ed);
                                        }
                                    }
                                    else
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ed);
                                    }

                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_RobotArmExtendOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_RobotArmExtendOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_Aligner_OCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_Aligner_OCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_RobotArmHome_GP1_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_RobotArmHome_GP1_ed);

                                    if (HT.Recipe.OCR_Degree != HT.Recipe.Aligner_Degree)
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Aligner_ed);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_AlignmentFinal_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_AlignmentFinal_ed);

                                        if (HT.Recipe.IsFlip) //lower
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopGet_Aligner_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopGet_Aligner_ed);
                                        }
                                        else
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_Aligner_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_Aligner_ed);
                                        }
                                    }
                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_AlignmentFinal_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_AlignmentFinal_ed);  //Exchange = true  +1

                                    if (HT.Recipe.IsFlip) //lower
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopGet_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopGet_Aligner_ed);
                                    }
                                    else
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Get_Aligner_ed);
                                    }
                                }

                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Cassette_ing);  //stage == true +1
                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Cassette_ed);
                            }
                            else
                            {
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Cassette_ing);  
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Cassette_ed);

                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Get_Stage_ing);  //carrier = saperater
                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Get_Stage_ed);

                                if (HT.Recipe.IsFlip) // lower
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopPut_Stage_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_TopPut_Stage_ed);
                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Stage_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Swap_Down_Put_Stage_ed);
                                }

                                Wafer_Step[i].Add(SQLWaferInforStep.Mix_ing);

                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Put_Cassette_ing); 
                                Wafer_Step[i].Add(SQLWaferInforStep.Swap_Up_Put_Cassette_ed);
                            }
                        }

                        break; 

                    #endregion

                    #region Sortering

                    case (int)Core_Loop.Sortering:
                        {
                            if (HT.Recipe.IsAligner)
                            {
                                Robot1.WaferCount[i] = 3;
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Cassette_ing);
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Get_Cassette_ed);
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ing);   //Exchange = false -1
                                Wafer_Step[i].Add(SQLWaferInforStep.Up_Put_Aligner_ed);

                                if (HT.Recipe.IsOCR_Down || HT.Recipe.IsOCR_Up)
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentOCR_ed);     //Exchange = true  +1 // stage = false-1 

                                    if (HT.Recipe.OCR_Degree == HT.Recipe.Aligner_Degree)
                                    {
                                        if (HT.Recipe.IsFlip) //lower
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Aligner_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Aligner_ed);
                                        }
                                        else
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ed);
                                        }
                                    }
                                    else
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_AlignerOCR_ed);
                                    }
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_RobotArmExtendOCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Down_RobotArmExtendOCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.Aligner_OCR_ed);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.RobotArmHome_GP1_ed);

                                    if (HT.Recipe.OCR_Degree != HT.Recipe.Aligner_Degree)
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Put_Aligner_ed);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);    //Exchange = true  +1 // stage = false-1 

                                        if (HT.Recipe.IsFlip) //lower
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Aligner_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Aligner_ed);
                                        }
                                        else
                                        {
                                            Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ing);
                                            Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ed);
                                        }
                                    }
                                }
                                else
                                {
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ing);
                                    Wafer_Step[i].Add(SQLWaferInforStep.AlignmentFinal_ed);      //Exchange = true  +1  // stage = false-1

                                    if (HT.Recipe.IsFlip) //lower
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.TopGet_Aligner_ed);
                                    }
                                    else
                                    {
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ing);
                                        Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Aligner_ed);
                                    }
                                }
                           
                            }
                            else
                            {
                                Robot1.WaferCount[i] = 2;
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Cassette_ing);
                                Wafer_Step[i].Add(SQLWaferInforStep.Down_Get_Cassette_ed);
                            }

                            Wafer_Step[i].Add(SQLWaferInforStep.Dest_Down_Put_Cassette_ing);  //stage == true +1
                            Wafer_Step[i].Add(SQLWaferInforStep.Dest_Down_Put_Cassette_ed);
                        }
                        break; 

                    #endregion
                }
                Wafer_Step[i].Add(SQLWaferInforStep.Finish);

                if (HT.Recipe.IsUseLower == false || HT.Recipe.IsUseUpper == false)
                    Robot1.WaferCount[i] = 2;
            }
        }

        private void SecsRecipeChange()
        {
            CreaterCarrierStep();
            CreaterWaferStep(ref Robot1);
        }

        #endregion

        #region Trace Log

        private void TraceLog() 
        {
            #region Trace Robot1

            DataTable data = SQLite.ReadDataTable(SQLTable.PJ_Pool,
            string.Format("{0}!= '{1}' and {0}!= '{2}'",
            WaferInforTableItem.WaferStatus, SQLWaferInforStep.Start, SQLWaferInforStep.Finish));

            if (data.Rows.Count == 0)
            {
                data = SQLite.ReadDataTableLimit(SQLTable.PJ_Pool,
                string.Format("{0}!= '{1}'",
                WaferInforTableItem.WaferStatus, SQLWaferInforStep.Finish), 1);
            }

            for (int row = 0; row < data.Rows.Count; row++) 
            {
                #region 確定目前的STEP
                SQLWaferInforStep finish_action = (SQLWaferInforStep)Enum.Parse( typeof(SQLWaferInforStep),
                            data.Rows[row][(int)WaferInforTableItem.WaferStatus].ToString() );

                //忽略OMS
                if (Convert.ToBoolean(data.Rows[row][(int)WaferInforTableItem.IsOMS].ToString()))
                    continue;
                #endregion

                #region 確定目前的Flow

                int flow_type = 0;
                switch(HT.Recipe.AutoMode)
                {
                    case PJ_Type.Load:flow_type = (int)Core_Loop.Load; break;
                    case PJ_Type.Unload: flow_type = (int)Core_Loop.Unload; break;
                    case PJ_Type.LoadUnload: flow_type = (int)Core_Loop.LoadUnload; break;
                    case PJ_Type.Sortering: flow_type = (int)Core_Loop.Sortering; break;
                    default: continue;

                }
                #endregion

                int next_step =Wafer_Step[flow_type].FindIndex(x => x == finish_action) + 1;
                string soc_port = data.Rows[row][(int)WaferInforTableItem.SocPort].ToString();
                string soc_slot = data.Rows[row][(int)WaferInforTableItem.SocSlot].ToString();
                int now_stage = Convert.ToInt32(data.Rows[row][(int)WaferInforTableItem.StagePos]) - 1;
                int port = int.Parse(soc_port.Substring(NormalStatic.CstPort.Length)) - 1;

                string msg = string.Format(" Trace => [{0} slot {1} wafer] => {2}", soc_port, soc_slot, Wafer_Step[flow_type][next_step]);
                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter, msg);

                #region RobotArm

                bool arm = false;

                if ((SQLWaferInforStep.Down_Start < Wafer_Step[flow_type][next_step]) && (SQLWaferInforStep.Down_End > Wafer_Step[flow_type][next_step]))
                {
                    if (HT.Recipe.IsUseLower == false)
                        arm = true;
                    else
                        arm = false;
                }
                else if ((SQLWaferInforStep.Up_Start < Wafer_Step[flow_type][next_step]) && (SQLWaferInforStep.Up_End > Wafer_Step[flow_type][next_step]))
                {
                    if (HT.Recipe.IsUseUpper == false)
                        arm = false;
                    else
                        arm = true;
                }

                #endregion

                switch (Wafer_Step[flow_type][next_step]) 
                {
                    #region CP

                    case SQLWaferInforStep.Up_Get_Cassette_ing:
                    case SQLWaferInforStep.Down_Get_Cassette_ing:
                        {
                            if (EFEM.CP_Busy(port) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter, 
                                                string.Format("CP{0} is Busy", port + 1));
                            if (EFEM.CP_GetInDoorOpen(port) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                string.Format("CP{0} door not open", port + 1));

                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                string.Format("Robot {0} arm has wafer", arm ? "Upper": "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Down_Put_Cassette_ing:
                    case SQLWaferInforStep.Up_Put_Cassette_ing:
                        {
                            if (EFEM.CP_Busy(port) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("CP{0} is Busy", port + 1));
                            if (EFEM.CP_GetInDoorOpen(port) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("CP{0} door not open", port + 1));
                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Dest_Down_Put_Cassette_ing:
                        {
                            string Des_Port = data.Rows[row][(int)WaferInforTableItem.DesPort].ToString();
                            int Des_Index = Convert.ToInt16(Des_Port.Substring(NormalStatic.CstPort.Length)) - 1;

                            if (EFEM.CP_Busy(Des_Index) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("CP{0} is Busy", Des_Index + 1));
                            if (EFEM.CP_GetInDoorOpen(Des_Index) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("CP{0} door not open", Des_Index + 1));
                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Swap_Up_Put_Cassette_ing:
                    case SQLWaferInforStep.Swap_Down_Put_Cassette_ing:
                        {
                            string Swap_Port = Robot1.Core_Dt.Rows[Robot1.NowIndex][(int)WaferInforTableItem.SwapPort].ToString();
                            int Swap_Index = Convert.ToInt16(Swap_Port.Substring(NormalStatic.CstPort.Length)) - 1;

                            if (EFEM.CP_Busy(Swap_Index) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("CP{0} is Busy", Swap_Index + 1));
                            if (EFEM.CP_GetInDoorOpen(Swap_Index) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("CP{0} door not open", Swap_Index + 1));
                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    #endregion

                    #region Aligner

                    case SQLWaferInforStep.Up_Get_AlignerOCR_ing:
                    case SQLWaferInforStep.Down_Get_AlignerOCR_ing:
                    case SQLWaferInforStep.Swap_Down_Get_AlignerOCR_ing:
                    case SQLWaferInforStep.Up_Get_Aligner_ing:
                    case SQLWaferInforStep.Down_Get_Aligner_ing:
                    case SQLWaferInforStep.Swap_Down_Get_Aligner_ing:
                    case SQLWaferInforStep.Swap_TopGet_Aligner_ing:
                    case SQLWaferInforStep.TopGet_Aligner_ing:
                        {
                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm has wafer", arm ? "Upper" : "Lower"));
                            if (EFEM.AlignerBusy(0) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner is Busy"));
                            if (EFEM.AlignerPresence(0) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner without wafer"));
                            if (EFEM.AlignerUnitStatus(0) != AlignerStatus.FindNotch 
                                && EFEM.AlignerUnitStatus(0) != AlignerStatus.ToAngle)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner status:{0}", EFEM.AlignerUnitStatus(0)));
                            if (EFEM.AlignerLiftPin(0) != LiftPinEnum.Up)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner Lift Pin Not Up position"));
                        }
                        break;

                    case SQLWaferInforStep.Up_Put_Aligner_ing:
                    case SQLWaferInforStep.Swap_Up_Put_Aligner_ing:
                    case SQLWaferInforStep.Down_Put_Aligner_ing:
                    case SQLWaferInforStep.Swap_Down_Put_Aligner_ing:
                        {
                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                            if (EFEM.AlignerBusy(0) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner is Busy"));
                            if (EFEM.AlignerPresence(0) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner has wafer"));
                            if (EFEM.AlignerUnitStatus(0) != AlignerStatus.Home)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner status:{0}", EFEM.AlignerUnitStatus(0)));
                            if (EFEM.AlignerLiftPin(0) != LiftPinEnum.Up)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner Lift Pin Not Up position"));
                        }
                        break;

                    #endregion

                    #region Stage

                    case SQLWaferInforStep.Swap_Up_Get_Stage_ing:
                    case SQLWaferInforStep.Down_Get_Stage_ing:
                    case SQLWaferInforStep.TopGet_Stage_ing:
                        {
                            if (EFEM.StageReady(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is not ready", now_stage + 1));
                            if (EFEM.StageBusy(now_stage) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is busy", now_stage + 1));
                            if (EFEM.StageWaferAvailable(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} Available is false", now_stage + 1));

                            if (EFEM.StageWaferPresence(now_stage) != WaferStatus.With )
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} without wafer", now_stage + 1));

                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm has wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Down_Put_Stage_ing:
                    case SQLWaferInforStep.Swap_Down_Put_Stage_ing:
                    case SQLWaferInforStep.TopPut_Stage_ing:
                    case SQLWaferInforStep.Swap_TopPut_Stage_ing:
                        {
                            if (EFEM.StageReady(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is not ready", now_stage + 1));
                            if (EFEM.StageBusy(now_stage) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is busy", now_stage + 1));
                            if (EFEM.StageWaferAvailable(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} Available is false", now_stage + 1));

                            if (EFEM.StageWaferPresence(now_stage) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} has wafer", now_stage + 1));

                            if (EFEM.Robot_ArmPresence(0, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    #endregion

                    #region Aligner_Aciotn

                    case SQLWaferInforStep.Swap_AlignmentOCR_ing:
                    case SQLWaferInforStep.AlignmentOCR_ing:
                    case SQLWaferInforStep.Swap_AlignmentFinal_ing:
                    case SQLWaferInforStep.AlignmentFinal_ing:
                        {
                            if (EFEM.AlignerBusy(0) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner is Busy"));
                            if (EFEM.AlignerPresence(0) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner without wafer"));
                            if (EFEM.AlignerUnitStatus(0) != AlignerStatus.Home)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Aligner status:{0}", EFEM.AlignerUnitStatus(0)));
                        }
                        break;

                    #endregion

                    #region Mix

                    case SQLWaferInforStep.Mix_ing:
                        {
                            if (EFEM.StageWaferInvade(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot1 is Invading Stage{0}", now_stage + 1));
                            if (EFEM.StageCarrierInvade(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Robot2 is Invading Stage{0}", now_stage + 1));
                            if (EFEM.StageBusy(now_stage) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is Busy", now_stage + 1));
                            if (EFEM.StageReady(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is not Ready", now_stage + 1));
                            if (EFEM.StageWaferPresence(now_stage) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} wafer side without wafer", now_stage + 1));
                            if (EFEM.StageCarrierPresence(now_stage) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Wafer, SystemList.CommandParameter,
                                                    string.Format("Stage{0} carrier side without wafer", now_stage + 1));
                        }
                        break;

                        #endregion
                }
            }

            #endregion

            #region Trace Robot2

            data = SQLite.ReadDataTable(SQLTable.PJ_Pool,
            string.Format("{0}!= '{1}' and {0}!= '{2}'",
            WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Start, SQLWaferInforStep.Finish));

            if(data.Rows.Count == 0) 
            {
                data = SQLite.ReadDataTableLimit(SQLTable.PJ_Pool,
                string.Format("{0}!= '{1}'",
                WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish), 1);
            }

            for (int row = 0; row < data.Rows.Count; row++) 
            {
                #region 確定目前的STEP
                SQLWaferInforStep finish_action = (SQLWaferInforStep)Enum.Parse(typeof(SQLWaferInforStep),
                            data.Rows[row][(int)WaferInforTableItem.CarrierStatus].ToString());

                #endregion

                if (Convert.ToBoolean(data.Rows[row][(int)WaferInforTableItem.IsOMS].ToString()))
                    continue;

                bool IsOMS = Convert.ToBoolean(data.Rows[row][(int)WaferInforTableItem.IsOMS].ToString());

                #region 確定目前的Flow

                int flow_type = 0;
                
                if(IsOMS == false) 
                {
                    switch (HT.Recipe.AutoMode)
                    {
                        case PJ_Type.Load: flow_type = (int)Core_Loop.Load; break;
                        case PJ_Type.Unload: flow_type = (int)Core_Loop.Unload; break;
                        case PJ_Type.LoadUnload: flow_type = (int)Core_Loop.LoadUnload; break;
                        case PJ_Type.Sortering: flow_type = (int)Core_Loop.Sortering; break;
                        default: continue;
                    }
                }
                else 
                {
                    switch (HT.Recipe.AutoMode)
                    {
                        case PJ_Type.Load: flow_type = (int)Core_Loop.OMS_Load; break;
                        case PJ_Type.Unload: flow_type = (int)Core_Loop.OMS_Unload; break;
                        case PJ_Type.LoadUnload: flow_type = (int)Core_Loop.OMS_LoadUnload; break;
                        case PJ_Type.Sortering: flow_type = (int)Core_Loop.Sortering; break;
                        default: continue;
                    }
                }

                #endregion

                #region 讀取資料

                int next_step = Carrier_Step[flow_type].FindIndex(x => x == finish_action) + 1;
                string soc_port = data.Rows[row][(int)WaferInforTableItem.SocPort].ToString();
                string soc_slot = data.Rows[row][(int)WaferInforTableItem.SocSlot].ToString();
                string des_port = data.Rows[row][(int)WaferInforTableItem.DesPort].ToString();
                string des_slot = data.Rows[row][(int)WaferInforTableItem.DesSlot].ToString();
                string swap_port = data.Rows[row][(int)WaferInforTableItem.SwapPort].ToString();
                string swap_slot = data.Rows[row][(int)WaferInforTableItem.SwapSlot].ToString();
                int now_stage = Convert.ToInt32(data.Rows[row][(int)WaferInforTableItem.StagePos]) - 1;
                int port = int.Parse(des_port.Substring(NormalStatic.MagazinePort.Length)) - 1;

                string msg = string.Format(" Trace => [{0} slot {1} carrier] => {2}", des_port, des_slot, Carrier_Step[flow_type][next_step]);
                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandStart, msg);

                #endregion

                #region Set_RobotArm
                bool arm = false;
                if ((SQLWaferInforStep.Down_Start < Carrier_Step[flow_type][next_step]) 
                    && (SQLWaferInforStep.Down_End > Carrier_Step[flow_type][next_step]))
                {
                    if (HT.Recipe.IsUseLower == false && IsOMS == false)
                        arm = true;
                    else
                        arm = false;
                }
                else if ((SQLWaferInforStep.Up_Start < Carrier_Step[flow_type][next_step]) 
                    && (SQLWaferInforStep.Up_End > Carrier_Step[flow_type][next_step]))
                {
                    if (HT.Recipe.IsUseUpper == false)
                        arm = false;
                    else
                        arm = true;
                }

                #endregion

                switch (Carrier_Step[flow_type][next_step])
                {
                    #region Magazine

                    case SQLWaferInforStep.Down_Get_Magazine_ing:
                    case SQLWaferInforStep.Up_Get_Magazine_ing:
                        {
                            if (EFEM.MP_Busy(port) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} is Busy", port + 1));
                            if (EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} door not open", port + 1));

                            if (EFEM.Robot_ArmPresence(1, arm) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("Robot {0} arm has wafer", arm ? "Upper" : "Lower"));
                        }
                        break;
                    case SQLWaferInforStep.Down_Put_Magazine_ing:
                    case SQLWaferInforStep.Up_Put_Magazine_ing:
                        {
                            if (EFEM.MP_Busy(port) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} is Busy", port + 1));
                            if (EFEM.MP_GetInDoorOpen(port) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} door not open", port + 1));

                            if (EFEM.Robot_ArmPresence(1, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Down_Swap_OMS_Put_Magazine_ing:
                    case SQLWaferInforStep.Up_Swap_OMS_Put_Magazine_ing:
                        {
                            int swap_index = Convert.ToInt16(swap_port.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                            if (EFEM.MP_Busy(swap_index) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} is Busy", swap_index + 1));
                            if (EFEM.MP_GetInDoorOpen(swap_index) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} door not open", swap_index + 1));

                            if (EFEM.Robot_ArmPresence(1, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Up_OMS_Get_Magazine_ing:
                    case SQLWaferInforStep.Down_OMS_Get_Magazine_ing:
                        {
                            int soc_index = Convert.ToInt16(soc_port.Substring(NormalStatic.MagazinePort.Length)) - 1;

                            if (EFEM.MP_Busy(soc_index) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} is Busy", soc_index + 1));
                            if (EFEM.MP_GetInDoorOpen(soc_index) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} door not open", soc_index + 1));

                            if (EFEM.Robot_ArmPresence(1, arm) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("Robot {0} arm has wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Up_OMS_Put_Magazine_ing:
                    case SQLWaferInforStep.Down_OMS_Put_Magazine_ing:
                        {
                            int soc_index = Convert.ToInt16(soc_port.Substring(NormalStatic.MagazinePort.Length)) - 1;

                            if (EFEM.MP_Busy(soc_index) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} is Busy", soc_index + 1));
                            if (EFEM.MP_GetInDoorOpen(soc_index) != IOLPDoor.Open)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("MP{0} door not open", soc_index + 1));

                            if (EFEM.Robot_ArmPresence(1, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;


                    #endregion

                    #region Stage

                    case SQLWaferInforStep.Up_Get_Stage_ing:
                        {
                            if (EFEM.StageReady(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is not ready", now_stage + 1));
                            if (EFEM.StageBusy(now_stage) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is busy", now_stage + 1));
                            if (EFEM.StageWaferAvailable(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} Available is false", now_stage + 1));

                            if (EFEM.StageCarrierPresence(now_stage) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} without wafer", now_stage + 1));

                            if (EFEM.Robot_ArmPresence(1, arm) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm has wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    case SQLWaferInforStep.Down_Put_Stage_ing:
                        {
                            if (EFEM.StageReady(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is not ready", now_stage + 1));
                            if (EFEM.StageBusy(now_stage) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is busy", now_stage + 1));
                            if (EFEM.StageWaferAvailable(now_stage) == false)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} Available is false", now_stage + 1));

                            if (EFEM.StageCarrierPresence(now_stage) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} has wafer", now_stage + 1));

                            if (EFEM.Robot_ArmPresence(1, arm) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Robot {0} arm without wafer", arm ? "Upper" : "Lower"));
                        }
                        break;

                    #endregion

                    #region Mix_Separation

                    case SQLWaferInforStep.Separation_ing:
                        {
                            if (EFEM.StageWaferInvade(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Robot1 is Invading Stage{0}", now_stage + 1));
                            if (EFEM.StageCarrierInvade(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Robot2 is Invading Stage{0}", now_stage + 1));
                            if (EFEM.StageBusy(now_stage) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is Busy", now_stage + 1));
                            if (EFEM.StageReady(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is not Ready", now_stage + 1));
                            if (EFEM.StageWaferPresence(now_stage) != WaferStatus.WithOut)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} wafer side has wafer", now_stage + 1));
                            if (EFEM.StageCarrierPresence(now_stage) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} carrier side without wafer", now_stage + 1));
                        }
                        break;

                    case SQLWaferInforStep.Mix_ing:
                        {
                            if (EFEM.StageWaferInvade(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Robot1 is Invading Stage{0}", now_stage + 1));
                            if (EFEM.StageCarrierInvade(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Robot2 is Invading Stage{0}", now_stage + 1));
                            if (EFEM.StageBusy(now_stage) == true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is Busy", now_stage + 1));
                            if (EFEM.StageReady(now_stage) != true)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} is not Ready", now_stage + 1));
                            if (EFEM.StageWaferPresence(now_stage) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} wafer side without wafer", now_stage + 1));
                            if (EFEM.StageCarrierPresence(now_stage) != WaferStatus.With)
                                UI.Log(LogDir.Trace.ToString(), NormalStatic.Carrier, SystemList.CommandParameter,
                                                    string.Format("Stage{0} carrier side without wafer", now_stage + 1));
                        }
                        break;

                        #endregion
                }

            }

            #endregion
        }

        #endregion

        private void button1_Click_1(object sender, EventArgs e)
        {
            CreateJob = new Form_AutoJob();
            List<IOLPDevice> OMS_In = new List<IOLPDevice>();
            List<IOLPDevice> OMS_Out = new List<IOLPDevice>();
            List<int[]> Slot = new List<int[]>();
            int[] NowSlot = new int[12];




            for (int i = 0; i < 8; i++)
            {
                if (HT.MagazineData[i].PortType == MagazinePortType.OMS_In)
                    OMS_In.Add((IOLPDevice)(i + (int)IOLPDevice.MP1));
                else if (HT.MagazineData[i].PortType == MagazinePortType.OMS_Out)
                    OMS_Out.Add((IOLPDevice)(i + (int)IOLPDevice.MP1));
            }

            string[] FoupID = new string[(int)IOLPDevice.MaxCnt];

            for (int i = 0; i < (int)IOLPDevice.MaxCnt; i++)
            {
                if (i < (int)IOLPDevice.MP1)
                    FoupID[i] = HT.CassetteData[i].ID;
                else
                    FoupID[i] = HT.MagazineData[i - (int)IOLPDevice.MP1].ID;
            }
#if false
            for (int CP_index = (int)IOLPDevice.CP1; CP_index < (int)IOLPDevice.MP1; CP_index++)
            {
                Slot.Add(EFEM.CP_SlotData(CP_index));
            }

            for (int MP_index = 0; MP_index < 8; MP_index++)
            {
                if (EFEM.MP_CheckPortType(MP_index) != MagazinePortType.OMS_Out)
                {
                    NowSlot = new int[12];
                    for (int i = 0; i < 12; i++)
                    {
                        NowSlot[i] = EFEM.MP_SlotData(MP_index, i + 1);
                    }
                }
                else
                {
                    NowSlot = new int[1];
                    NowSlot[0] = EFEM.MP_SlotData(MP_index, 1);
                }
                Slot.Add(NowSlot);
            }
#else

            //#region Walson Test

            int[] CP1 = new int[] { 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0 };
            int[] CP2 = new int[] { 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 1, 0 };
            int[] CP3 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            int[] CP4 = new int[] { 0, 0, 1, 1, 2, 1, 0, 1, 0, 2, 1, 0 };
            int[] CP5 = new int[] { 0, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 0 };
            int[] CP6 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0 };
            int[] CP7 = new int[] { 0, 0, 1, 0, 2, 1, 1, 1, 0, 2, 1, 0 };
            int[] CP8 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0 };
            int[] CP9 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 1, 0 };
            int[] CP10 = new int[] { 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 1, 0 };
            int[] MP1 = new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            int[] MP2 = new int[] { 0, 1, 1, 1, 0, 0, 0, 0, 0 };
            int[] MP3 = new int[] { 0, 0, 1, 1, 1, 1, 1, 1, 1 };
            int[] MP4 = new int[] { 0, 0, 1, 0, 2, 1, 0, 0, 0 };
            int[] MP5 = new int[] { 1, 0, 1, 0, 2, 1, 0, 0, 0 };
            int[] MP6 = new int[] { 0, 0, 1, 0, 1, 1, 0, 0, 0 };
            int[] MP7 = new int[] { 0 };
            int[] MP8 = new int[] { 0 };

            List<int[]> Test_Slot = new List<int[]> { CP1, CP2, CP3, CP4, CP5, CP6, CP7, CP8, CP9, CP10, MP1, MP2, MP3, MP4, MP5, MP6, MP7, MP8 };

            
#endif
            CreateJob.Initial(Test_Slot, OMS_In.ToArray(), OMS_Out.ToArray(), FoupID);
            CreateJob.Show();
        }

        private void ckbDrymode_CheckedChanged(object sender, EventArgs e)
        {
            HT.EFEM.DryRunMode = ckbDrymode.Checked;
            if (ckbDrymode.Checked == false)
            {
                labNowCount.Text =  "0"; 
                HT.EFEM.DryRunNowCount = 0;
            }
        }

        private void txtCycleCount_TextChanged(object sender, EventArgs e)
        {
            int temp;
            if (int.TryParse(txtCycleCount.Text, out temp))
                HT.EFEM.DryRunTotalCount = temp;
            else
                HT.EFEM.DryRunTotalCount = 0;
        }

        // Joanne 20201011 Add Start
        private void SetJobInfo()
        {
            if (InvokeRequired)
            {
                this.Invoke(new MethodInvoker(delegate () { SetJobInfo(); }));
                return;
            }

            int PortIdx;
            DataTable DT = SQLite.ReadDataTable(SQLTable.PJ_Pool, 
                string.Format("{0}!= '{2}' and {1}!= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish) );

            if (DT.Rows.Count == 0)
            {
                return;
            }

            for (int RowIdx = 0; RowIdx < DT.Rows.Count; RowIdx++)
            {
                string SocPort = DT.Rows[RowIdx][(int)WaferInforTableItem.SocPort].ToString();
                string SocSlot = DT.Rows[RowIdx][(int)WaferInforTableItem.SocSlot].ToString();
                string DesPort = DT.Rows[RowIdx][(int)WaferInforTableItem.DesPort].ToString();
                string DesSlot = DT.Rows[RowIdx][(int)WaferInforTableItem.DesSlot].ToString();

                EFEM.Ui_Recipe = HT.Recipe.AutoMode;

                switch (HT.Recipe.AutoMode)
                {
                    case PJ_Type.Load:
                        if (SocPort.IndexOf(NormalStatic.CstPort) == 0) //Ex. SocPort = CP5, SocSlot = 25, DesPort = MP8, DesSlot = 2
                        {
                            PortIdx = Convert.ToInt16(SocPort.Substring(NormalStatic.CstPort.Length, SocPort.Length - NormalStatic.CstPort.Length)) - 1;    //4
                            HT.CassetteData[PortIdx].WaferData[int.Parse(SocSlot) - 1].IsTransferComplete = false;
                            EFEM.SetCPData(PortIdx, SocPort, Convert.ToInt16(SocSlot), DesPort, Convert.ToInt16(DesSlot));  //4,CP5,25,MP8,2
                        }
                        break;
                    case PJ_Type.Sortering: //Ex.SocPort = CP1, SocSlot = 1, DesPort = CP5, DesSlot = 10 
                        {
                            PortIdx = Convert.ToInt16(SocPort.Substring(NormalStatic.CstPort.Length, SocPort.Length - NormalStatic.CstPort.Length)) - 1;    //0
                            HT.CassetteData[PortIdx].WaferData[int.Parse(SocSlot) - 1].IsTransferComplete = false;
                            EFEM.SetCPData(PortIdx, SocPort, Convert.ToInt16(SocSlot), DesPort, Convert.ToInt16(DesSlot));  //Walson 20201117
                        }
                        break;
                }
            }

            IsSetJobComplete_RB1 = true;
        }
        // Joanne 20201011 Add End


        private void HostTriggerStop(bool ref_Value) 
        {
            UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.CommandStart, ", Host send stop command");
            //UI.Alarm(NormalStatic.SECS, ErrorList.AP_ParameterFail_0291, ", Host send stop command");

            //Interrupt();
        }
    }
}
