using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using KSecsWrapperDotNet;
using NPOI.HSSF.UserModel;
using System.Runtime.InteropServices;
using System.IO;

namespace HirataMainControl
{
    public partial class UserSECS : UserControl
    {
        #region Class
        public class TransferInfoStruct
        {
            public int PortNo;
            public int SlotNo;
            public int StageNo;
            public string FOUPID;
            public string Upper_WaferID;
            public string Lower_WaferID;
            public string CarrierID;
            public string FOUPAction;
        }

        public class JobEndStruct
        {
            public string SourcePortID;
            public string SourcePort;
            public string SourceSlot;
            public string DestinationPortID;
            public string DestinationPort;
            public string DestinationSlot;
            public string Result;
            public string CarrierID;
            public string UpWaferID;
            public string DownWaferID;
            public string FlipResult;
        }

        public class PJStruct
        {
            public string[] PJID;
            public PJ_Type Recipe;
            public bool IsOCRUp;
            public bool IsOCRDown;
            public bool IsOCR_Stage;
            public bool IsAligner;
            public bool IsFlip;
            public float AlignerDegree;
            public float UpOCRDegree;
            public float DownOCRDegree;
        }

        public class CJStruct
        {
            public string[] PJID;   //Joanne 20201005 Add
            public string CJID;
            public string[] UseFOUP;
            public List<TransferJobStruct> TransferJobInfo = new List<TransferJobStruct>();
        }

        public class TransferJobStruct
        {
            public string SourcePortID;
            public string SourcePort;
            public string SourceSlot;
            public string SourceSlotID;
            public string DestinationPortID;
            public string DestinationPort;
            public string DestinationSlot;
            public string DestinationSlotID;
            public string IsOMS;
            public string StageNo;
            public string SwapPortID;
            public string SwapPort;
            public string SwapSlot;
            public string SwapSlotID;
        }
        #endregion

        #region Event/Delegate

        //public delegate void PJEvent(PJ_Type _RecipeType, bool _IsAligner, bool _IsStageOCR, bool _IsOCRUp, bool _IsOCRDown, float _AlinerDegree, float _OCRDegree, bool _IsFlip);
        //public event PJEvent PJ_Received;
        public delegate void CarrierActionEvent(SQLWaferInforStep step, string port, ref int accept_result);
        public event CarrierActionEvent CarrierActionChange;
        public delegate void ControlModeChangeEvent(EFEMMode _ControlMode);
        public event ControlModeChangeEvent ControlModeChange;
        public delegate void RecipeChangeEvent();
        public event RecipeChangeEvent RecipeChange;
        public delegate void PortReloadEvent(int port, ref int accept_result);
        public event PortReloadEvent PortReload;

        /// <summary>
        /// Host Stop Request Event
        /// </summary>
        /// <param name="_stop"></param>
        /// <remarks>
        ///     <para>
        ///     Release  ：430-21-06-09-D900
        ///     Overview ：地震停機功能追加
        ///     Editor   ：Joanne
        ///     Details  ：Host Stop Request Event 追加
        ///     </para>
        /// </remarks>
        public delegate void StopCommandEvent(bool _stop);
        public event StopCommandEvent StopRequest;


        #endregion

        #region BG/Queue

        private BackgroundWorker CmdSendBG = new BackgroundWorker();
        private static BlockQueue<string> CmdQueue = new BlockQueue<string>();

        private BackgroundWorker JobBG = new BackgroundWorker();

        #endregion

        #region Excel

        public static List<string[,]>[] VID_Excel;

        #endregion

        #region Private Variable

        private string[] SplitSeparate = { NormalStatic.Comma };
        private int LoopCount = 100;
        private string CmdData;

        private int CEID;
        private string[] RPTID_List;
        private string[] VID_List;
        public static string[] RPTIDData_Excel;   // 儲存Excel的RPTID
        public static string[] VIDData_Excel; // 儲存Excel的VID
        public static string[] CEIDData_Excel;
        private string DataType;

        public CEID_Item[] PortsStatus = new CEID_Item[18]; //20200127 Walson改成Public

        private string InsertCom = "";

        private List<string> JobEndData = new List<string>();
        private List<string[]> WaferInfoList = new List<string[]>();
        private List<string> SocInfo = new List<string>();
        private List<string> DesInfo = new List<string>();
        private List<string> SwapJob = new List<string>();

        private List<string> TempLinkVID = new List<string>();
        private List<string> TempLinkRPTID = new List<string>();

        private string[] SlotResult = new string[18];

        private string[] UseFoup;
        private string[] CJ_SelectedFoup;

        private int OMSInPort;
        private int OMSOutPort;

        private string CombineSlot = "";
        private string CombineUpperWaferID = "";
        private string CombineLowerWaferID = "";
        private string ComMgzPort = "";
        private string ComMgzID = "";

        private string Report_PortID;
        private int Report_PortNo;
        private string Report_SlotNo;
        private string Report_WaferID;
        private string Report_UpWaferID;
        private string Report_DownWaferID;
        private string Report_CarrierID;

        private string Slot_HaveNoWafer = "1";
        private string Slot_Error = "2";
        private string Slot_HaveWafer = "3";

        public string[] PortIDList;  //20200127 Walson改成Public
        private string[] SlotMapList;

        private string Transfer_WaferStatus;
        private string Transfer_CarrierStatus;

        private const string ASCII = "A";
        private const string UINT1 = "U1";
        private const string UINT2 = "U2";
        private const string UINT4 = "U4";
        private const string FLOAT1 = "F1";
        private const string FLOAT2 = "F2";
        private const string FLOAT4 = "F4";
        private const string LIST = "L";
        private const string BOOLEAN = "Boolean";
        private const string BINARY = "B";

        private string SVID_Unit;
        private string SVID_Name;

        private string[] PortTransferStatus;
        private LoadUnloadStatus[] PortLoadUnloadStatus;
        private string[] WaferType;

        private string FunName;

        public List<PJStruct> PJList = new List<PJStruct>(); //20200127 Walson改成Public
        public List<CJStruct> CJList = new List<CJStruct>(); //20200127 Walson改成Public

        //Joanne 20201005 Add Start
        public List<PJStruct> PJSelected = new List<PJStruct>(); //20200127 Walson改成Public
        public List<CJStruct> CJSelected = new List<CJStruct>(); //20200127 Walson改成Public
        //Joanne 20201005 Add End

        private All_Device DeviceNameEnum = All_Device.Fn;
        #endregion

        #region Public
        public TransferInfoStruct TransferInfo;
        public JobEndStruct JobEndInfo;
        public PJStruct PJInfo;
        public CJStruct CJInfo;
        public TransferJobStruct TransferJob_Data;
        public EFEMMode Current_Mode;

        public bool connect;
        public bool IsJobComplete;
        public bool IsPJCreateComplete;
        public bool IsPJNeedDeQueue;
        public bool IsCJNeedDeQueue;

        public PJ_Type CurrnetRecipe;

        public Dictionary<string, PJStruct> PJ_Dic = new Dictionary<string, PJStruct>();    //Joanne 20200330
        public Dictionary<string, CJStruct> CJ_Dic = new Dictionary<string, CJStruct>();    //Joanne 20200330
        #endregion

        #region Initial

        public UserSECS()
        {
            InitializeComponent();
        }

        public void Initial()
        {
            Ui_SECSMode = false;
            SecsWrapper1 = new KSecsWrapper();
            this.SecsWrapper1.OnPrimaryReceived += new KSecsWrapperDotNet.KSecsWrapper.OnMessageEvent(this.SecsWrapper1_OnPrimaryReceived);
            this.SecsWrapper1.OnSecondaryReceived += new KSecsWrapperDotNet.KSecsWrapper.OnMessageEvent(this.SecsWrapper1_OnSecondaryReceived);

            ToConnect();

            CmdSendBG.DoWork += new DoWorkEventHandler(SendCmd_DoWork);
            CmdSendBG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(CmdSendBG_Completed);
            CmdSendBG.RunWorkerAsync();

            JobBG.DoWork += new DoWorkEventHandler(JobMonitor_DoWork);
            JobBG.RunWorkerCompleted += new RunWorkerCompletedEventHandler(JobBG_Completed);
            JobBG.RunWorkerAsync();

            TransferInfo = new TransferInfoStruct();
            JobEndInfo = new JobEndStruct();

            PortIDList = new string[18];
            PortTransferStatus = new string[18];
            PortLoadUnloadStatus = new LoadUnloadStatus[18];
            WaferType = new string[18];

            Refresh_IDList();

            PJList.Clear();
            CJList.Clear();

            //Joanne 20201005 Add Start
            PJSelected.Clear();
            CJSelected.Clear();
            //Joanne 20201005 Add End

            IsJobComplete = true;
            IsCJNeedDeQueue = true;
            //IsPJNeedDeQueue = true;   //Joanne 20201005 Disable

        }

        #endregion

        #region SECS Connect
        public void ToConnect()
        {
            string Exe_PathName = Application.ExecutablePath;
            int Index;
            Index = Exe_PathName.LastIndexOf("\\");

            string Ini_PathName = Exe_PathName.Substring(0, Index + 1) + "secs.ini";
            SecsWrapper1.LoadFromIni(Ini_PathName, NormalStatic.SECS);

            SecsWrapper1.Open();

            Thread.Sleep(1000);
            Ui_SECSMode = SecsWrapper1.IsConnected;

        }

        public void Disconnect()
        {
            SecsWrapper1.Close();
            Ui_SECSMode = false;
        }

        public void Close()
        {
            Disconnect();
            //  SecsAgentQueue.EnQueue("END");
        }

        #endregion

        #region EnQueue
        public static void SendEvent(StreamNo _S, FunctionNo _F, CEID_Item _CEID, string _MessageInfo)
        {
            if (HT.EFEM.Mode == EFEMMode.Remote)
            {
                CmdQueue.EnQueue(string.Format("{0},{1},{2},{3}", _S, _F, (int)_CEID, _MessageInfo));
            }
            else if (_CEID == CEID_Item.ToolModeChange_Remote || _CEID == CEID_Item.ToolModeChange_Local) 
            {
                CmdQueue.EnQueue(string.Format("{0},{1},{2},{3}", _S, _F, (int)_CEID, _MessageInfo));
            }

            if (HT.EFEM.Status >= EFEMStatus.SysCheck_Now && HT.EFEM.Mode == EFEMMode.Remote)
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1},{2},{3}", _S, _F, _CEID, _MessageInfo));
        }

        
        #endregion

        #region BG Work

        private void SendCmd_DoWork(object sender, DoWorkEventArgs e)
        {
            CmdData = "";

            while (true)
            {
                if (CmdSendBG.IsBusy == false)
                {
                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "CmdSendBG IsBusy = False");
                    CmdSendBG.RunWorkerAsync();
                }

                if (CmdSendBG.CancellationPending)
                {
                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "CmdSendBG is cancel");
                    e.Cancel = true;
                }

                CmdData = CmdQueue.DeQueue(LoopCount);

                if (SecsWrapper1.IsConnected && CmdData != null)
                {
                    SendMessageToHost(CmdData);
                }
                else
                {
                    if (SecsWrapper1.IsConnected == false || Ui_SECSMode == false)
                        ToConnect();
                }
            }
        }

        private void JobMonitor_DoWork(object sender, DoWorkEventArgs e)
        {
            while (true)
            {
                if (JobBG.IsBusy == false)
                {
                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "JobBG IsBusy = False");
                    JobBG.RunWorkerAsync();
                }

                if (JobBG.CancellationPending)
                {
                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "JobBG is cancel");
                    e.Cancel = true;
                }

                if (IsJobComplete)
                {
                    if (HT.EFEM.Mode == EFEMMode.Remote)
                    {
                        if (HT.EFEM.Status == EFEMStatus.Run_Now || HT.EFEM.Status == EFEMStatus.Run_Finish)
                        {
                            //Joanne 20201005 Disable Start
                            //if (PJList.Count != 0 && IsPJNeedDeQueue)
                            //{
                            //    if (PJList[0] == null)
                            //        break;

                            //    if (CreatePJ(PJList[0]))
                            //    {
                            //        IsPJNeedDeQueue = false;
                            //        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsPJNeedDeQueue Flag = False");
                            //    }
                            //}
                            //Joanne 20201005 Disable End

                            if (CJList.Count != 0 && IsCJNeedDeQueue)
                            {
                                if (CJList[0] == null)
                                    break;

                                if (CreateCJ(CJList[0]))
                                {
                                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", "Create CJ Success", CJList[0].CJID));

                                    IsCJNeedDeQueue = false;
                                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsCJNeedDeQueue Flag = False");

                                    S6F11((int)CEID_Item.ControlJobStart_Auto);
                                    Thread.Sleep(300);
                                    S6F11((int)CEID_Item.ProcessJobStart_Auto);
                                }
                            }
                        }
                    }
                }
            }
        }

        private void CmdSendBG_Completed(object sender, RunWorkerCompletedEventArgs e)
        {
            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "CmdSendBG_Completed is Close");

            if (CmdSendBG.IsBusy == false || e.Cancelled)
            {
                CmdSendBG.RunWorkerAsync();
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "CmdSendBG_Completed is Run Again");
            }
        }

        private void JobBG_Completed(object sender, RunWorkerCompletedEventArgs e)
        {
            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "JobBG_Completed is Close");

            if (JobBG.IsBusy == false || e.Cancelled)
            {
                JobBG.RunWorkerAsync();
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "JobBG_Completed is Run Again");
            }
        }
        #endregion

        #region Send Message To Host
        private void SendMessageToHost(string _Message)
        {
            string[] DataList = _Message.Split(SplitSeparate, StringSplitOptions.None);

            switch ((StreamNo)Enum.Parse(typeof(StreamNo), DataList[0]))
            {
                case StreamNo.S5:
                    {
                        #region S5
                        switch ((FunctionNo)Enum.Parse(typeof(FunctionNo), DataList[1]))
                        {
                            case FunctionNo.F1:
                                {
                                    IsJobComplete = false;  //Joanne 20210922
                                    S5F1(DataList[3], DataList[4]);
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
                case StreamNo.S6:
                    {
                        #region S6
                        switch ((FunctionNo)Enum.Parse(typeof(FunctionNo), DataList[1]))
                        {
                            case FunctionNo.F11:
                                {
                                    #region S6F11
                                    int CEID_Idx = int.Parse(DataList[2]);

                                    switch (CEID_Idx)
                                    {
                                        case (int)CEID_Item.ToolModeChange_Remote:
                                            {
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ControlMode, (int)VID_Col.VID_Value, "5");

                                                //int PortTransfer;

                                                //for (int CstNo = 0; CstNo < HCT_EFEM.CassetteCount; CstNo++)
                                                //{
                                                //    if (HT.CassetteData[CstNo].Presence)
                                                //    {
                                                //        PortTransfer = int.Parse(NormalStatic.ReadyToUnload);
                                                //        SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ReadyToUnload, string.Format("{0}", CstNo + 1));
                                                //    }
                                                //    else
                                                //    {
                                                //        PortTransfer = int.Parse(NormalStatic.ReadyToLoad);
                                                //        SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ReadyToLoad, string.Format("{0}", CstNo + 1));
                                                //    }
                                                //}

                                                //for (int MgzNo = 0; MgzNo < HCT_EFEM.MagazineCount; MgzNo++)
                                                //{
                                                //    if (HT.MagazineData[MgzNo].Presence)
                                                //    {
                                                //        PortTransfer = int.Parse(NormalStatic.ReadyToUnload);
                                                //        SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ReadyToUnload, string.Format("{0}", HCT_EFEM.CassetteCount + MgzNo + 1));
                                                //    }
                                                //    else
                                                //    {
                                                //        PortTransfer = int.Parse(NormalStatic.ReadyToLoad);
                                                //        SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.ReadyToLoad, string.Format("{0}", HCT_EFEM.CassetteCount + MgzNo + 1));
                                                //    }
                                                //}

                                                //Add_PortTransferStatus();
                                            }
                                            break;

                                        case (int)CEID_Item.ToolModeChange_Local:
                                            {
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ControlMode, (int)VID_Col.VID_Value, "4");
                                            }
                                            break;

                                        case (int)CEID_Item.ReadyToLoad:
                                        case (int)CEID_Item.ReadyToUnload:
                                        case (int)CEID_Item.LoadComplete:
                                        case (int)CEID_Item.UnloadComplete:
                                            {
                                                #region Port Transfer Status
                                                Report_PortNo = int.Parse(DataList[3]);
                                                
                                                PortsStatus[Report_PortNo - 1] = (CEID_Item)CEID_Idx;  //Walson 20210102追加

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, Report_PortNo.ToString());

                                                if (CEID_Idx == (int)CEID_Item.ReadyToLoad)
                                                {
                                                    
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortTransferState, (int)VID_Col.VID_Value, NormalStatic.ReadyToLoad);
                                                    PortTransferStatus[Report_PortNo -1 ] = NormalStatic.ReadyToLoad; // Walson 20201122 Debug

                                                }
                                                else if (CEID_Idx == (int)CEID_Item.ReadyToUnload)
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortTransferState, (int)VID_Col.VID_Value, NormalStatic.ReadyToUnload);
                                                    PortTransferStatus[Report_PortNo - 1] = NormalStatic.ReadyToUnload; // Walson 20201122 Debug
                                                }
                                                else
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortTransferState, (int)VID_Col.VID_Value, NormalStatic.TransferBlocked);                                                    
                                                    PortTransferStatus[Report_PortNo - 1] = NormalStatic.TransferBlocked; // Walson 20201122 Debug
                                                    PortIDList[Report_PortNo - 1] = "";
                                                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0}{1}{2}", "Port ", Report_PortNo, " FOUP ID Clear"));
                                                }

                                                Add_PortTransferStatus();
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.CarrierIDRead_WaitingForHost:
                                            {
                                                #region 防止Host在ReadyToUnload的狀態再次Load (20210102 Walson Bypass)

                                                //if (PortsStatus[Report_PortNo - 1] != CEID_Item.LoadComplete)
                                                //{
                                                //    #region Port狀態不對, 退出 Cassette/Magazine

                                                //    int result = 0;
                                                //    string port = (Report_PortNo - 1).ToString();

                                                //    if (Report_PortNo > HCT_EFEM.CassetteCount)
                                                //        CarrierActionChange(SQLWaferInforStep.MP_OpenDoor, port, ref result);
                                                //    else
                                                //        CarrierActionChange(SQLWaferInforStep.CP_OpenDoor, port, ref result);

                                                //    #endregion
                                                //    return;
                                                //}
                                                #endregion

                                                #region PortID Verify

                                                Report_PortNo = int.Parse(DataList[3]);
                                                Report_PortID = PortIDList[Report_PortNo - 1] = DataList[4];

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, Report_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortID, (int)VID_Col.VID_Value, Report_PortID);
                                                
                                                PortsStatus[Report_PortNo - 1] = CEID_Item.CarrierIDRead_WaitingForHost;

                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.SlotMapResult_WaitingForHost:
                                        case (int)CEID_Item.SlotMapVerifyOK:
                                            {
                                                #region Slot Map
                                                Report_PortNo = int.Parse(DataList[3]);
                                                Report_PortID = PortIDList[Report_PortNo - 1];

                                                string Current_SlotMap = "";
                                                int SlotCount = 0;

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, Report_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortID, (int)VID_Col.VID_Value, Report_PortID);

                                                if (Report_PortNo > 0 && Report_PortNo <= HCT_EFEM.CassetteCount + HCT_EFEM.MagazineCount) // Walson 20201122 Debug
                                                {
                                                    if (Report_PortNo > HCT_EFEM.CassetteCount)
                                                    {
                                                        SlotCount = 12;

                                                        for (int MP_SlotIdx = 0; MP_SlotIdx < SlotCount; MP_SlotIdx++)
                                                        {
                                                            if (HT.MagazineData[Report_PortNo - 1 - HCT_EFEM.CassetteCount].CarrierData[MP_SlotIdx].Status == WaferStatus.With)
                                                            {
                                                                if (MP_SlotIdx == SlotCount - 1)
                                                                {
                                                                    Current_SlotMap += Slot_HaveWafer;
                                                                }
                                                                else
                                                                {
                                                                    Current_SlotMap += string.Format("{0},", Slot_HaveWafer);
                                                                }
                                                            }
                                                            else if (HT.MagazineData[Report_PortNo - 1 - HCT_EFEM.CassetteCount].CarrierData[MP_SlotIdx].Status == WaferStatus.WithOut)
                                                            {
                                                                if (MP_SlotIdx == SlotCount - 1)
                                                                {
                                                                    Current_SlotMap += Slot_HaveNoWafer;
                                                                }
                                                                else
                                                                {
                                                                    Current_SlotMap += string.Format("{0},", Slot_HaveNoWafer);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (MP_SlotIdx == SlotCount - 1)
                                                                {
                                                                    Current_SlotMap += Slot_Error;
                                                                }
                                                                else
                                                                {
                                                                    Current_SlotMap += string.Format("{0},", Slot_Error);
                                                                }
                                                            }
                                                        }

                                                        HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.SlotMap, (int)VID_Col.VID_Value, Current_SlotMap);
                                                    }
                                                    else
                                                    {
                                                        SlotCount = 25;

                                                        for (int CP_SlotIdx = 0; CP_SlotIdx < SlotCount; CP_SlotIdx++)
                                                        {
                                                            if (HT.CassetteData[Report_PortNo - 1].WaferData[CP_SlotIdx].Status == WaferStatus.With)
                                                            {
                                                                if (CP_SlotIdx == SlotCount - 1)
                                                                {
                                                                    Current_SlotMap += Slot_HaveWafer;
                                                                }
                                                                else
                                                                {
                                                                    Current_SlotMap += string.Format("{0},", Slot_HaveWafer);
                                                                }

                                                            }
                                                            else if (HT.CassetteData[Report_PortNo - 1].WaferData[CP_SlotIdx].Status == WaferStatus.WithOut)
                                                            {
                                                                if (CP_SlotIdx == SlotCount - 1)
                                                                {
                                                                    Current_SlotMap += Slot_HaveNoWafer;
                                                                }
                                                                else
                                                                {
                                                                    Current_SlotMap += string.Format("{0},", Slot_HaveNoWafer);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (CP_SlotIdx == SlotCount - 1)
                                                                {
                                                                    Current_SlotMap += Slot_Error;
                                                                }
                                                                else
                                                                {
                                                                    Current_SlotMap += string.Format("{0},", Slot_Error);
                                                                }

                                                                S5F1("0001","Wafer Error");
                                                            }
                                                        }

                                                        HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.SlotMap, (int)VID_Col.VID_Value, Current_SlotMap);
                                                    }
                                                }
                                                else
                                                {
                                                }

                                                SlotResult[Report_PortNo - 1] = Current_SlotMap;

                                                if (CEID_Idx == (int)CEID_Item.SlotMapResult_WaitingForHost)
                                                {
                                                    PortsStatus[Report_PortNo - 1] = CEID_Item.SlotMapResult_WaitingForHost;
                                                }
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.Trigger_ReadOCR:
                                            {
                                                #region ReaD Wafer ID
                                                Report_PortNo = (int)((All_Device)Enum.Parse(typeof(All_Device), DataList[3]));
                                                Report_PortID = PortIDList[Report_PortNo - 1];
                                                Report_SlotNo = DataList[4];
                                                //Report_WaferID = DataList[5];   //需刪除Joanne 20191206 

                                                //Joanne 20191206
                                                Report_UpWaferID = DataList[5];
                                                Report_DownWaferID = DataList[6];

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, Report_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortID, (int)VID_Col.VID_Value, Report_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_SlotNo, (int)VID_Col.VID_Value, Report_SlotNo);

                                                if (HT.Recipe.IsOCR_Down && !HT.Recipe.IsOCR_Up)
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, Report_DownWaferID);
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, "");
                                                }
                                                else if (HT.Recipe.IsOCR_Up && !HT.Recipe.IsOCR_Down)
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, "");
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, Report_UpWaferID);
                                                }
                                                else if (!HT.Recipe.IsOCR_Up && !HT.Recipe.IsOCR_Down)
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, "");
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, "");
                                                }
                                                else
                                                { 
                                                    //Joanne 20191206 Add
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, Report_UpWaferID);
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, Report_DownWaferID);
                                                }

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CombinePort, (int)VID_Col.VID_Value, Report_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CombinePortID, (int)VID_Col.VID_Value, Report_PortID);
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.Trigger_ReadTrayID:
                                            {
                                                #region Read Carrier ID
                                                Report_PortNo = (int)((All_Device)Enum.Parse(typeof(All_Device), DataList[3]));
                                                Report_PortID = PortIDList[Report_PortNo - 1];
                                                Report_SlotNo = DataList[4];
                                                Report_CarrierID = DataList[5];

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, Report_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortID, (int)VID_Col.VID_Value, Report_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_SlotNo, (int)VID_Col.VID_Value, Report_SlotNo);

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_MagazineID, (int)VID_Col.VID_Value, Report_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CarrierID, (int)VID_Col.VID_Value, Report_CarrierID);
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.Trigger_CombineTrayWafer:
                                            {
                                                #region Combine Wafer and Carrier
                                                int CP_PortNo = (int)((All_Device)Enum.Parse(typeof(All_Device), DataList[3]));
                                                //int MP_PortNo = (int)((All_Device)Enum.Parse(typeof(All_Device), DataList[6])); //需刪除Joanne 20191206
                                                
                                                //Joanne 20191206 Add
                                                int MP_PortNo = (int)((All_Device)Enum.Parse(typeof(All_Device), DataList[7]));
                                                Report_UpWaferID = DataList[5];
                                                Report_DownWaferID = DataList[6];
                                                Report_CarrierID = DataList[8];

                                                string CP_PortID = PortIDList[CP_PortNo - 1];
                                                string MP_PortID = PortIDList[MP_PortNo - 1];

                                                Report_SlotNo = DataList[4];
                                                //Report_WaferID = DataList[5];   //需刪除 Joanne 20191206
                                                //Report_CarrierID = DataList[7]; //需刪除 Joanne 20191206
                                                

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, MP_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortID, (int)VID_Col.VID_Value, MP_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CombinePort, (int)VID_Col.VID_Value, CP_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CombinePortID, (int)VID_Col.VID_Value, CP_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_SlotNo, (int)VID_Col.VID_Value, Report_SlotNo);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CarrierID, (int)VID_Col.VID_Value, Report_CarrierID);

                                                if (HT.Recipe.IsOCR_Down && !HT.Recipe.IsOCR_Up)
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, Report_DownWaferID);
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, "");
                                                }
                                                else if (HT.Recipe.IsOCR_Up && !HT.Recipe.IsOCR_Down)
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, "");
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, Report_UpWaferID);
                                                }
                                                else if (!HT.Recipe.IsOCR_Up && !HT.Recipe.IsOCR_Down)
                                                {
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, "");
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, "");
                                                }
                                                else
                                                {
                                                    //Joanne 20191206 Add
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Lower_WaferID, (int)VID_Col.VID_Value, "");
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Upper_WaferID, (int)VID_Col.VID_Value, "");
                                                }
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.ControlJobStart_Auto:
                                            {
                                                #region CJ Start
                                                //if (Recipe.CJID != null)
                                                //{
                                                //    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ControlJob_ID, (int)VID_Col.VID_Value, Recipe.CJID);
                                                //}
                                                //else
                                                //{
                                                //    return;
                                                //}
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.ControlJobEnd_Complete:
                                            {
                                                #region CJ End
                                                JobEndData.Clear();

                                                DataTable WaferInfo = SQLite.ReadDataTable(SQLTable.PJ_Pool, "1=1");

                                                if (WaferInfo.Rows.Count != 0)
                                                {
                                                    for (int DataIndex = 0; DataIndex < WaferInfo.Rows.Count; DataIndex++)
                                                    {
                                                        JobEndInfo.SourcePortID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocPortID].ToString();
                                                        JobEndInfo.SourcePort = ((int)((All_Device)Enum.Parse(typeof(All_Device), WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocPort].ToString()))).ToString();
                                                        JobEndInfo.SourceSlot = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlot].ToString();
                                                        JobEndInfo.DestinationPortID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.DesPortID].ToString();
                                                        JobEndInfo.DestinationPort = ((int)((All_Device)Enum.Parse(typeof(All_Device), WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.DesPort].ToString()))).ToString();
                                                        JobEndInfo.DestinationSlot = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.DesSlot].ToString();

                                                        if (HT.Recipe.IsFlip)
                                                        {
                                                            JobEndInfo.FlipResult = NormalStatic.TransferResultOK;
                                                        }
                                                        else
                                                        {
                                                            JobEndInfo.FlipResult = NormalStatic.TransferResultFail;
                                                        }

                                                        Transfer_WaferStatus = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.WaferStatus].ToString();
                                                        Transfer_CarrierStatus = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.CarrierStatus].ToString();

                                                        JobEndInfo.Result = CheckTransferResult(Transfer_WaferStatus, Transfer_CarrierStatus);

                                                        switch (HT.Recipe.AutoMode)
                                                        {
                                                            case PJ_Type.Load:
                                                            case PJ_Type.Unload:
                                                            case PJ_Type.Sortering:
                                                                {
                                                                    #region Load/Unload/Sorting
                                                                    string JobData = "";

                                                                    if (HT.Recipe.IsAligner)
                                                                    {
                                                                        if (HT.Recipe.IsOCR_Down && !HT.Recipe.IsOCR_Up)
                                                                        {
                                                                            JobEndInfo.UpWaferID = "";
                                                                            JobEndInfo.DownWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Down].ToString();
                                                                        }
                                                                        else if (HT.Recipe.IsOCR_Up && !HT.Recipe.IsOCR_Down)
                                                                        {
                                                                            JobEndInfo.UpWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Up].ToString();
                                                                            JobEndInfo.DownWaferID = "";
                                                                        }
                                                                        else if (!HT.Recipe.IsOCR_Down && !HT.Recipe.IsOCR_Up)
                                                                        {
                                                                            JobEndInfo.UpWaferID = "";
                                                                            JobEndInfo.DownWaferID = "";
                                                                        }
                                                                        else
                                                                        {
                                                                            //Joanne 20191206 Add
                                                                            JobEndInfo.UpWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Up].ToString();
                                                                            JobEndInfo.DownWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Down].ToString();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        JobEndInfo.UpWaferID = "";
                                                                        JobEndInfo.DownWaferID = "";
                                                                    }

                                                                    if (CheckIsOMS(int.Parse(JobEndInfo.SourcePort)))
                                                                    {
                                                                        JobEndInfo.UpWaferID = "";
                                                                        JobEndInfo.DownWaferID = "";
                                                                        JobEndInfo.CarrierID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.DesSlotID].ToString();
                                                                    }
                                                                    else
                                                                    {
                                                                        if (HT.Recipe.AutoMode == PJ_Type.Sortering)
                                                                        {
                                                                            JobEndInfo.CarrierID = "";
                                                                        }
                                                                        else
                                                                        {
                                                                            JobEndInfo.CarrierID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.DesSlotID].ToString();
                                                                        }
                                                                    }

                                                                    if (HT.Recipe.AutoMode == PJ_Type.Load || HT.Recipe.AutoMode == PJ_Type.Sortering)
                                                                    {
                                                                        JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                    JobEndInfo.SourcePortID,
                                                                                                    JobEndInfo.SourcePort,
                                                                                                    JobEndInfo.SourceSlot,
                                                                                                    JobEndInfo.DestinationPortID,
                                                                                                    JobEndInfo.DestinationPort,
                                                                                                    JobEndInfo.DestinationSlot,
                                                                                                    JobEndInfo.Result,
                                                                                                    JobEndInfo.CarrierID,
                                                                                                    JobEndInfo.UpWaferID,
                                                                                                    JobEndInfo.DownWaferID
                                                                                               );
                                                                    }
                                                                    else
                                                                    {
                                                                        JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                    JobEndInfo.DestinationPortID,
                                                                                                    JobEndInfo.DestinationPort,
                                                                                                    JobEndInfo.DestinationSlot,
                                                                                                    JobEndInfo.SourcePortID,
                                                                                                    JobEndInfo.SourcePort,
                                                                                                    JobEndInfo.SourceSlot,
                                                                                                    JobEndInfo.Result,
                                                                                                    JobEndInfo.CarrierID,
                                                                                                    JobEndInfo.UpWaferID,
                                                                                                    JobEndInfo.DownWaferID
                                                                                               );
                                                                    }

                                                                    JobEndData.Add(JobData);
                                                                    #endregion
                                                                }
                                                                break;
                                                            case PJ_Type.LoadUnload:
                                                                {
                                                                    #region Swap
                                                                    string JobData = "";

                                                                    // 20210106 Walson追加 讀取Carrier ID
                                                                    if (HT.Recipe.IsOCR_Stage)
                                                                        JobEndInfo.CarrierID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.DesSlotID].ToString();
                                                                    else
                                                                        JobEndInfo.CarrierID = "";

                                                                    if (HT.Recipe.IsAligner)
                                                                    {
                                                                        if (HT.Recipe.IsOCR_Down && !HT.Recipe.IsOCR_Up)
                                                                        {
                                                                            JobEndInfo.UpWaferID = "";

                                                                            for (int IsUnload = 0; IsUnload < 2; IsUnload++)
                                                                            {
                                                                                if (IsUnload == 0)
                                                                                {
                                                                                    JobEndInfo.DownWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Down].ToString();

                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }
                                                                                else
                                                                                {
                                                                                    JobEndInfo.SourcePortID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPortID].ToString();
                                                                                    JobEndInfo.SourcePort = ((int)((All_Device)Enum.Parse(typeof(All_Device), WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPort].ToString()))).ToString();
                                                                                    JobEndInfo.SourceSlot = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlot].ToString();
                                                                                    JobEndInfo.DownWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlotID_Down].ToString();

                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }

                                                                                JobEndData.Add(JobData);
                                                                            }
                                                                        }
                                                                        else if (HT.Recipe.IsOCR_Up && !HT.Recipe.IsOCR_Down)
                                                                        {
                                                                            JobEndInfo.DownWaferID = "";

                                                                            for (int IsUnload = 0; IsUnload < 2; IsUnload++)
                                                                            {
                                                                                if (IsUnload == 0)
                                                                                {
                                                                                    JobEndInfo.UpWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Up].ToString();

                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }
                                                                                else
                                                                                {
                                                                                    JobEndInfo.SourcePortID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPortID].ToString();
                                                                                    JobEndInfo.SourcePort = ((int)((All_Device)Enum.Parse(typeof(All_Device), WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPort].ToString()))).ToString();
                                                                                    JobEndInfo.SourceSlot = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlot].ToString();
                                                                                    JobEndInfo.UpWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlotID_Up].ToString();

                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }

                                                                                JobEndData.Add(JobData);
                                                                            }
                                                                        }
                                                                        else if (!HT.Recipe.IsOCR_Down && !HT.Recipe.IsOCR_Up)
                                                                        {
                                                                            JobEndInfo.UpWaferID = "";
                                                                            JobEndInfo.DownWaferID = "";

                                                                            for (int IsUnload = 0; IsUnload < 2; IsUnload++)
                                                                            {
                                                                                if (IsUnload == 0)
                                                                                {
                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }
                                                                                else
                                                                                {
                                                                                    JobEndInfo.SourcePortID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPortID].ToString();
                                                                                    JobEndInfo.SourcePort = ((int)((All_Device)Enum.Parse(typeof(All_Device), WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPort].ToString()))).ToString();
                                                                                    JobEndInfo.SourceSlot = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlot].ToString();

                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }

                                                                                JobEndData.Add(JobData);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            JobEndInfo.UpWaferID = "";
                                                                            JobEndInfo.DownWaferID = "";

                                                                            // Joanne 20191206 Add
                                                                            for (int IsUnload = 0; IsUnload < 2; IsUnload++)
                                                                            {
                                                                                if (IsUnload == 0)
                                                                                {
                                                                                    JobEndInfo.UpWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Up].ToString();
                                                                                    JobEndInfo.DownWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SocSlotID_Down].ToString();

                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }
                                                                                else
                                                                                {
                                                                                    JobEndInfo.SourcePortID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPortID].ToString();
                                                                                    JobEndInfo.SourcePort = ((int)((All_Device)Enum.Parse(typeof(All_Device), WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPort].ToString()))).ToString();
                                                                                    JobEndInfo.SourceSlot = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlot].ToString();
                                                                                    JobEndInfo.UpWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlotID_Up].ToString();
                                                                                    JobEndInfo.DownWaferID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlotID_Down].ToString();

                                                                                    JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                                JobEndInfo.DestinationPortID,
                                                                                                                JobEndInfo.DestinationPort,
                                                                                                                JobEndInfo.DestinationSlot,
                                                                                                                JobEndInfo.SourcePortID,
                                                                                                                JobEndInfo.SourcePort,
                                                                                                                JobEndInfo.SourceSlot,
                                                                                                                JobEndInfo.Result,
                                                                                                                JobEndInfo.CarrierID,
                                                                                                                JobEndInfo.UpWaferID,
                                                                                                                JobEndInfo.DownWaferID
                                                                                                           );
                                                                                }

                                                                                JobEndData.Add(JobData);
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        JobEndInfo.UpWaferID = "";
                                                                        JobEndInfo.DownWaferID = "";

                                                                        for (int IsUnload = 0; IsUnload < 2; IsUnload++)
                                                                        {
                                                                            if (IsUnload == 0)
                                                                            {
                                                                                JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                            JobEndInfo.SourcePortID,
                                                                                                            JobEndInfo.SourcePort,
                                                                                                            JobEndInfo.SourceSlot,
                                                                                                            JobEndInfo.DestinationPortID,
                                                                                                            JobEndInfo.DestinationPort,
                                                                                                            JobEndInfo.DestinationSlot,
                                                                                                            JobEndInfo.Result,
                                                                                                            JobEndInfo.CarrierID,
                                                                                                            JobEndInfo.UpWaferID,
                                                                                                            JobEndInfo.DownWaferID
                                                                                                       );
                                                                            }
                                                                            else
                                                                            {
                                                                                JobEndInfo.SourcePortID = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPortID].ToString();
                                                                                JobEndInfo.SourcePort = ((int)((All_Device)Enum.Parse(typeof(All_Device), WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapPort].ToString()))).ToString();
                                                                                JobEndInfo.SourceSlot = WaferInfo.Rows[DataIndex][(int)WaferInforTableItem.SwapSlot].ToString();

                                                                                JobData = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                                                                                            JobEndInfo.DestinationPortID,
                                                                                                            JobEndInfo.DestinationPort,
                                                                                                            JobEndInfo.DestinationSlot,
                                                                                                            JobEndInfo.SourcePortID,
                                                                                                            JobEndInfo.SourcePort,
                                                                                                            JobEndInfo.SourceSlot,
                                                                                                            JobEndInfo.Result,
                                                                                                            JobEndInfo.CarrierID,
                                                                                                            JobEndInfo.UpWaferID,
                                                                                                            JobEndInfo.DownWaferID
                                                                                                       );
                                                                            }

                                                                            JobEndData.Add(JobData);
                                                                        }
                                                                    }

                                                                    if (CheckIsOMS(int.Parse(JobEndInfo.SourcePort)))
                                                                    {
                                                                        JobEndInfo.UpWaferID = "";
                                                                        JobEndInfo.DownWaferID = "";
                                                                        JobEndInfo.CarrierID = "";
                                                                    }
                                                                    #endregion
                                                                }
                                                                break;
                                                        }
                                                    }

                                                    SQLite.CopyWaferInfoToHistory(SQLTable.PJ_Pool, string.Format("{0}= '{2}' or {1}= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish));
                                                    SQLite.LimitWaferInfoToHistory(SQLTable.PJ_History, 100000);
                                                    SQLite.Delete(SQLTable.PJ_Pool, string.Format("{0}= '{2}'and {1}= '{2}'", WaferInforTableItem.WaferStatus, WaferInforTableItem.CarrierStatus, SQLWaferInforStep.Finish));
                                                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", "CJ End", "Delete DB Data"));

                                                    string PJ_Use = "";

                                                    if (PJSelected.Count != 0)
                                                    {
                                                        for (int PJIdx = 0; PJIdx < PJSelected[0].PJID.Length; PJIdx++) //Joanne 20201005 Edit
                                                        {
                                                            PJ_Use += string.Format("{0}{1}", PJSelected[0].PJID[PJIdx], NormalStatic.Comma);
                                                        }
                                                    }

                                                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", "Remove PJ", PJ_Use));

                                                    if (PJList.Count != 0)
                                                    {
                                                        PJList.RemoveAt(0);
                                                    }
                                                    PJSelected.Clear(); // 20201126 Joanne

                                                    if (CJSelected.Count != 0 && CJList.Count != 0)
                                                    {
                                                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", "Remove CJ", CJSelected[0].CJID));
                                                        CJList.RemoveAt(0);
                                                    }

                                                    CJSelected.Clear(); // 20201126 Joanne

                                                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0}{1},{2}{3}", "PJList Count = ", PJList.Count, "CJList Count = ", CJList.Count));

                                                    //Joanne 20201005 Disable Start
                                                    //IsPJNeedDeQueue = true;
                                                    //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsPJNeedDeQueue Flag = True");
                                                    //Joanne 20201005 Disable End
                                                }
                                                //Joanne 20201005 Add Start
                                                IsCJNeedDeQueue = true;
                                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsCJNeedDeQueue Flag = True");
                                                //Joanne 20201005 Add End

                                                IsJobComplete = true;
                                                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsJobComplete Flag = True");
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.ProcessJobStart_Auto:
                                            {
                                                #region PJ Start
                                                //string PJList = "";

                                                //for (int PJ_Idx = 0; PJ_Idx < Recipe.PJID_List.Length; PJ_Idx++)
                                                //{
                                                //    if (PJ_Idx == Recipe.PJID_List.Length - 1)
                                                //    {
                                                //        PJList += Recipe.PJID_List[PJ_Idx];
                                                //    }
                                                //    else
                                                //    {
                                                //        PJList += string.Format("{0},", Recipe.PJID_List[PJ_Idx]);
                                                //    }
                                                //}

                                                //HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ProcessJob_ID, (int)VID_Col.VID_Value, PJList);   // Set PJID
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.ProcessJobEnd_Complete:
                                            {
                                                #region PJ End
                                                string PJ_List = "";

                                                if (PJSelected.Count == 0)
                                                {
                                                    PJ_List = "";
                                                }
                                                else
                                                {
                                                    for (int PJ_Idx = 0; PJ_Idx < PJSelected[0].PJID.Length; PJ_Idx++)
                                                    {
                                                        if (PJ_Idx == PJSelected[0].PJID.Length - 1)
                                                        {
                                                            PJ_List += PJSelected[0].PJID[PJ_Idx];
                                                        }
                                                        else
                                                        {
                                                            PJ_List += string.Format("{0},", PJSelected[0].PJID[PJ_Idx]);
                                                        }
                                                    }
                                                }

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ProcessJob_ID, (int)VID_Col.VID_Value, PJ_List);   // Set PJID
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.PJPooled:
                                            {
                                                #region PJ Create
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.PJSettingUp:
                                            {
                                                #region PJ Setting Up
                                                //string PJList = "";

                                                //for (int PJ_Idx = 0; PJ_Idx < Recipe.PJID_List.Length; PJ_Idx++)
                                                //{
                                                //    if (PJ_Idx == Recipe.PJID_List.Length - 1)
                                                //    {
                                                //        PJList += Recipe.PJID_List[PJ_Idx];
                                                //    }
                                                //    else
                                                //    {
                                                //        PJList += string.Format("{0},", Recipe.PJID_List[PJ_Idx]);
                                                //    }
                                                //}

                                                //HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ProcessJob_ID, (int)VID_Col.VID_Value, PJList);   // Set PJID
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.OMS_Out:
                                            {
                                                #region OMS Out
                                                Report_PortNo = int.Parse(DataList[3]);
                                                Report_PortID = PortIDList[Report_PortNo - 1];
                                                Report_SlotNo = DataList[4];

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, Report_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortID, (int)VID_Col.VID_Value, Report_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_MagazineID, (int)VID_Col.VID_Value, Report_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_SlotNo, (int)VID_Col.VID_Value, Report_SlotNo);
                                                #endregion
                                            }
                                            break;
                                        case (int)CEID_Item.OMS_ReadID:
                                            {
                                                //Joanne 20201106 Add Start
                                                #region OMS Read ID
                                                Report_PortNo = (int)((All_Device)Enum.Parse(typeof(All_Device), DataList[3]));
                                                Report_PortID = PortIDList[Report_PortNo - 1];
                                                Report_SlotNo = DataList[4];
                                                Report_CarrierID = DataList[5];

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortNo, (int)VID_Col.VID_Value, Report_PortNo.ToString());
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_PortID, (int)VID_Col.VID_Value, Report_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_SlotNo, (int)VID_Col.VID_Value, Report_SlotNo);

                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.Current_MagazineID, (int)VID_Col.VID_Value, Report_PortID);
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CarrierID, (int)VID_Col.VID_Value, Report_CarrierID);
                                                #endregion
                                                //Joanne 20201106 Add End
                                            }
                                            break;
                                        case (int)CEID_Item.Continue_Finish:
                                            {
                                                ContinueFinish(true);
                                                return;
                                            }
                                    }

                                    S6F11(CEID_Idx);
                                    #endregion
                                }
                                break;
                        }

                        #endregion
                    }
                    break;
            }
        }
        #endregion

        #region Received Message From Host
        private void SecsWrapper1_OnPrimaryReceived(KSecsTransaction SECS_Transaction, KSecsMessage SECS_Message, string SECS_SmlTag, bool SECS_IsDefined)
        {
            string Name = string.Format("{0}{1}{2}{3}","S",SECS_Message.Stream,"F",SECS_Message.Function);
            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0}{1}{2}", "H -> S：", "Received ", Name));

            switch (SECS_Message.Stream)
            {
                case (int)StreamNo.S1:
                    {
                        #region S1
                        switch (SECS_Message.Function)
                        {
                            case (int)FunctionNo.F1:
                                {
                                    #region S1F1
                                    KSecsMessage reply_message = SecsWrapper1.LoadMessage(NormalStatic.S1F2_Messgae);
                                    reply_message.RootItem.Items[0].AsString = NormalStatic.DeviceType;
                                    reply_message.RootItem.Items[1].AsString = NormalStatic.Version;
                                    SECS_Transaction.Secondary = reply_message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F3:
                                {
                                    #region S1F3
                                        
                                    HCT_EFEM.ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.VID, ".xls"), ref VID_Excel);    // 更新Excel
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S1F4_Messgae);

                                    int SVID_Count = SECS_Message.RootItem.ItemNumber;
                                    string SVID = "";
                                    int VID_No = 0;
                                    string SVID_Value = "";

                                    for (int VID_Index = 0; VID_Index < SVID_Count; VID_Index++)
                                    {
                                        SVID = SECS_Message.RootItem.Items[VID_Index].AsString;
                                        VID_No = Array.IndexOf(VIDData_Excel, SVID);

                                        if (VID_No >= 0)
                                        {
                                            SVID_Value = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 5];
                                            DataType = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 3];

                                            if (SVID_Value != null && DataType != null)
                                            {
                                                switch (DataType)
                                                {
                                                    case ASCII:
                                                        {
                                                            Reply_Message.RootItem.Items[VID_Index].AsString = SVID_Value;
                                                        }
                                                        break;
                                                    case UINT1:
                                                        {
                                                            Reply_Message.RootItem.Items[VID_Index].AsU1 = (uint)int.Parse(SVID_Value);
                                                        }
                                                        break;
                                                    case UINT2:
                                                        {
                                                            Reply_Message.RootItem.Items[VID_Index].AsU2 = (uint)int.Parse(SVID_Value);
                                                        }
                                                        break;
                                                    case UINT4:
                                                        {
                                                            Reply_Message.RootItem.Items[VID_Index].AsU4 = (uint)int.Parse(SVID_Value);
                                                        }
                                                        break;
                                                    case LIST:
                                                        {
                                                            switch (SVID)
                                                            {
                                                                case "1131":
                                                                    {
                                                                        #region SVID = 1131
                                                                        int PortTransfer;

                                                                        for (int CstNo = 0; CstNo < HCT_EFEM.CassetteCount; CstNo++)
                                                                        {
                                                                            if (HT.CassetteData[CstNo].Presence)
                                                                            {
                                                                                PortTransfer = int.Parse(NormalStatic.ReadyToUnload);
                                                                            }
                                                                            else
                                                                            {
                                                                                PortTransfer = int.Parse(NormalStatic.ReadyToLoad);
                                                                                PortIDList[CstNo] = "";
                                                                            }

                                                                            PortTransferStatus[CstNo] = PortTransfer.ToString();
                                                                            Reply_Message.RootItem.Items[VID_Index].Items[CstNo].AsU2 = (uint)PortTransfer;
                                                                        }

                                                                        for (int MgzNo = 0; MgzNo < HCT_EFEM.MagazineCount; MgzNo++)
                                                                        {
                                                                            if (HT.MagazineData[MgzNo].Presence)
                                                                            {
                                                                                PortTransfer = int.Parse(NormalStatic.ReadyToUnload);
                                                                            }
                                                                            else
                                                                            {
                                                                                PortTransfer = int.Parse(NormalStatic.ReadyToLoad);
                                                                                PortIDList[HCT_EFEM.CassetteCount + MgzNo] = "";
                                                                            }

                                                                            PortTransferStatus[MgzNo + HCT_EFEM.CassetteCount] = PortTransfer.ToString();
                                                                            Reply_Message.RootItem.Items[VID_Index].Items[MgzNo + 10].AsU2 = (uint)PortTransfer;
                                                                        }

                                                                        Add_PortTransferStatus();
                                                                        #endregion
                                                                    }
                                                                    break;
                                                                case "5010":
                                                                    {
                                                                        #region SVID = 5010
                                                                        string PortType = "";

                                                                        for (int CstNo = 0; CstNo < HCT_EFEM.CassetteCount; CstNo++)
                                                                        {
                                                                            switch (HT.CassetteData[CstNo].PortType)
                                                                            {
                                                                                case CassetterPortType.Real:
                                                                                    {
                                                                                        PortType = "Real Wafer";
                                                                                    }
                                                                                    break;
                                                                                case CassetterPortType.Dummy:
                                                                                    {
                                                                                        PortType = "Dummy Wafer";
                                                                                    }
                                                                                    break;
                                                                            }

                                                                            WaferType[CstNo] = PortType;
                                                                            Reply_Message.RootItem.Items[VID_Index].Items[CstNo].AsString = PortType;
                                                                        }

                                                                        for (int MgzNo = 0; MgzNo < HCT_EFEM.MagazineCount; MgzNo++)
                                                                        {
                                                                            switch (HT.MagazineData[MgzNo].PortType)
                                                                            {
                                                                                case MagazinePortType.OMS_In:
                                                                                    {
                                                                                        PortType = "OMS In";
                                                                                    }
                                                                                    break;
                                                                                case MagazinePortType.OMS_Out:
                                                                                    {
                                                                                        PortType = "OMS Out";
                                                                                    }
                                                                                    break;
                                                                                case MagazinePortType.Real:
                                                                                    {
                                                                                        PortType = "Real Carrier";
                                                                                    }
                                                                                    break;
                                                                            }

                                                                            WaferType[MgzNo + HCT_EFEM.CassetteCount] = PortType;
                                                                            Reply_Message.RootItem.Items[VID_Index].Items[MgzNo + 10].AsString = PortType;
                                                                        }

                                                                        Add_WaferType();
                                                                        #endregion
                                                                    }
                                                                    break;
                                                                default:
                                                                    {
                                                                        #region Other SVID
                                                                        string[] Values = SVID_Value.Split(SplitSeparate, StringSplitOptions.None);

                                                                        for (int Val_No = 0; Val_No < Values.Length; Val_No++)
                                                                        {
                                                                            Reply_Message.RootItem.Items[VID_Index].Items[Val_No].AsU1 = (uint)int.Parse(Values[Val_No]);
                                                                        }
                                                                        #endregion
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            Reply_Message.RootItem.ItemNumber = 0;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                            return;
                                        }
                                    }

                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F11:
                                {
                                    #region S1F11
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S1F12_Messgae);

                                    HCT_EFEM.ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.VID, ".xls"), ref VID_Excel);    // 更新Excel

                                    int SVID_Count = SECS_Message.RootItem.ItemNumber;
                                    int VID_No = 0;

                                    if (SVID_Count == 0)
                                    {
                                        for (int SVID_Idx = 0; SVID_Idx < VIDData_Excel.Length; SVID_Idx++)
                                        {
                                            string SVID = SECS_Message.RootItem.Items[SVID_Idx].AsString;

                                            VID_No = Array.IndexOf(VIDData_Excel, SVID);

                                            if (VID_No < 0)
                                            {
                                                return;
                                            }

                                            SVID_Unit = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 4];
                                            SVID_Name = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 1];

                                            Reply_Message.RootItem.Items[SVID_Idx].Items[0].AsU2 = SECS_Message.RootItem.Items[SVID_Idx].AsU2;
                                            Reply_Message.RootItem.Items[SVID_Idx].Items[1].AsString = SVID_Name;
                                            Reply_Message.RootItem.Items[SVID_Idx].Items[2].AsString = SVID_Unit;
                                        }
                                    }
                                    else
                                    {
                                        for (int SVID_Index = 0; SVID_Index < SVID_Count; SVID_Index++)
                                        {
                                            string SVID = SECS_Message.RootItem.Items[SVID_Index].AsString;

                                            VID_No = Array.IndexOf(VIDData_Excel, SVID);

                                            if (VID_No < 0)
                                            {
                                                return;
                                            }

                                            SVID_Unit = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 4];
                                            SVID_Name = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 1];

                                            Reply_Message.RootItem.Items[SVID_Index].Items[0].AsU2 = SECS_Message.RootItem.Items[SVID_Index].AsU2;
                                            Reply_Message.RootItem.Items[SVID_Index].Items[1].AsString = SVID_Name;
                                            Reply_Message.RootItem.Items[SVID_Index].Items[2].AsString = SVID_Unit;
                                        }
                                    }

                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F13:
                                {
                                    #region S1F13
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S1F14_Messgae);
                                    Reply_Message.RootItem.Items[0].AsByte = 0;
                                    Reply_Message.RootItem.Items[1].Items[0].AsString = NormalStatic.DeviceType;
                                    Reply_Message.RootItem.Items[1].Items[1].AsString = NormalStatic.Version;
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F17:
                                {
                                    #region S1F17
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S1F18_Messgae);

                                    byte Accept_Result = 0;

                                    if (HT.EFEM.Status == EFEMStatus.Run_Now)
                                    {
                                        Accept_Result = 0;
                                    }
                                    else if (HT.EFEM.Mode == EFEMMode.Remote)
                                    {
                                        Accept_Result = 0;
                                    }
                                    else
                                    {
                                        Accept_Result = 0;
                                    }

                                    Reply_Message.RootItem.AsByte = Accept_Result;
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
                case (int)StreamNo.S2:
                    {
                        #region S2
                        switch (SECS_Message.Function)
                        {
                            case (int)FunctionNo.F31:
                                {
                                    #region S2F31
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S2F32_Messgae);
                                    Reply_Message.RootItem.AsByte = 0;
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F33:
                                {
                                    #region S2F33
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S2F34_Messgae);

                                    byte Accept_Result = 0;
                                    KSecsItemType Received_Type;
                                    TempLinkVID.Clear();

                                    int RPTID_Count = SECS_Message.RootItem.Items[1].ItemNumber;

                                    if (RPTID_Count == 0)
                                    {
                                        Initial_LinkID(IDExcelTable.RPTID);

                                        Accept_Result = 0;
                                        Reply_Message.RootItem.AsByte = Accept_Result;
                                        SECS_Transaction.Secondary = Reply_Message;
                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                        return;
                                    }

                                    for (int RPTID_Index = 0; RPTID_Index < RPTID_Count; RPTID_Index++)
                                    {
                                        Received_Type = SECS_Message.RootItem.Items[1].Items[RPTID_Index].Items[0].ItemType;

                                        if (Received_Type != KSecsItemType.itU2)
                                        {
                                            Accept_Result = 2;
                                            Reply_Message.RootItem.AsByte = Accept_Result;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                            return;
                                        }

                                        string RPTID_Value = SECS_Message.RootItem.Items[1].Items[RPTID_Index].Items[0].AsString;

                                        if (TempLinkVID.IndexOf(RPTID_Value) >= 0)
                                        {
                                            Accept_Result = 3;
                                            Reply_Message.RootItem.AsByte = Accept_Result;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                            return;
                                        }

                                        TempLinkVID.Add(RPTID_Value);

                                        int RPTID_No = Array.IndexOf(RPTIDData_Excel, RPTID_Value);
                                        int VID_Count = SECS_Message.RootItem.Items[1].Items[RPTID_Index].Items[1].ItemNumber;
                                        string VID_Value = "";
                                        string VID_String = "";

                                        for (int VID_Index = 0; VID_Index < VID_Count; VID_Index++)
                                        {
                                            VID_Value = SECS_Message.RootItem.Items[1].Items[RPTID_Index].Items[1].Items[VID_Index].AsString;

                                            if (Array.IndexOf(VIDData_Excel, VID_Value) < 0)
                                            {
                                                Accept_Result = 4;
                                                Reply_Message.RootItem.AsByte = Accept_Result;
                                                SECS_Transaction.Secondary = Reply_Message;
                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                return;
                                            }
                                            else
                                            {
                                                if (VID_Index == VID_Count - 1)
                                                {
                                                    VID_String += VID_Value;
                                                }
                                                else
                                                {
                                                    VID_String += string.Format("{0},", VID_Value);
                                                }
                                            }
                                        }

                                        if (RPTID_No < 0)
                                        {
                                            HCT_EFEM.ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.VID, ".xls"), ref VID_Excel);

                                            HCT_EFEM.WirteExcel((int)IDExcelTable.RPTID, VID_Excel[(int)IDExcelTable.RPTID][0].Length / 4 - 2, (int)RPTID_Col.RPTID_Name, string.Format("{0}{1}", "RPT", RPTID_Value));
                                            HCT_EFEM.WirteExcel((int)IDExcelTable.RPTID, VID_Excel[(int)IDExcelTable.RPTID][0].Length / 4 - 2, (int)RPTID_Col.RPTID, RPTID_Value);
                                            HCT_EFEM.WirteExcel((int)IDExcelTable.RPTID, VID_Excel[(int)IDExcelTable.RPTID][0].Length / 4 - 2, (int)RPTID_Col.Link_VIDs, VID_String);

                                            Refresh_IDList();
                                        }
                                        else
                                        {
                                            HCT_EFEM.WirteExcel((int)IDExcelTable.RPTID, RPTID_No, (int)RPTID_Col.Link_VIDs, VID_String);
                                        }

                                        Accept_Result = 0;
                                        Reply_Message.RootItem.AsByte = Accept_Result;
                                        SECS_Transaction.Secondary = Reply_Message;
                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    }
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F35:
                                {
                                    #region S2F35
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S2F36_Messgae);

                                    KSecsItemType Received_Type;
                                    TempLinkRPTID.Clear();
                                    byte Accept_Result = 0;
                                    int CEID_Count = SECS_Message.RootItem.Items[1].ItemNumber;

                                    if (CEID_Count == 0)
                                    {
                                        Initial_LinkID(IDExcelTable.CEID);

                                        Accept_Result = 0;
                                        Reply_Message.RootItem.AsByte = Accept_Result;
                                        SECS_Transaction.Secondary = Reply_Message;
                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    }

                                    string RPTID_Value = "";

                                    for (int CEID_Index = 0; CEID_Index < CEID_Count; CEID_Index++)
                                    {
                                        Received_Type = SECS_Message.RootItem.Items[1].Items[CEID_Index].Items[0].ItemType;

                                        if (Received_Type != KSecsItemType.itU2)
                                        {
                                            Accept_Result = 2;
                                            Reply_Message.RootItem.AsByte = Accept_Result;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                            return;
                                        }

                                        string CEID_Value = SECS_Message.RootItem.Items[1].Items[CEID_Index].Items[0].AsString;
                                        int CEID_No = Array.IndexOf(CEIDData_Excel, CEID_Value);

                                        if (CEID_No < 0)
                                        {
                                            Accept_Result = 4;
                                            Reply_Message.RootItem.AsByte = Accept_Result;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                            return;
                                        }

                                        if (TempLinkRPTID.IndexOf(CEID_Value) >= 0)
                                        {
                                            Accept_Result = 3;
                                            Reply_Message.RootItem.AsByte = Accept_Result;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                            return;
                                        }

                                        TempLinkRPTID.Add(CEID_Value);

                                        string RPTID_String = "";
                                        int RPTID_Count = SECS_Message.RootItem.Items[1].Items[CEID_Index].Items[1].ItemNumber;

                                        for (int RPTID_Index = 0; RPTID_Index < RPTID_Count; RPTID_Index++)
                                        {
                                            RPTID_Value = SECS_Message.RootItem.Items[1].Items[CEID_Index].Items[1].Items[RPTID_Index].AsString;

                                            if (Array.IndexOf(RPTIDData_Excel, RPTID_Value) < 0)
                                            {
                                                Accept_Result = 5;
                                                Reply_Message.RootItem.AsByte = Accept_Result;
                                                SECS_Transaction.Secondary = Reply_Message;
                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                return;
                                            }
                                            else
                                            {
                                                if (RPTID_Index == RPTID_Count - 1)
                                                {
                                                    RPTID_String += RPTID_Value;
                                                }
                                                else
                                                {
                                                    RPTID_String += string.Format("{0},", RPTID_Value);
                                                }
                                            }
                                        }

                                        HCT_EFEM.WirteExcel((int)IDExcelTable.CEID, CEID_No, (int)CEID_Col.Link_RPTIDs, RPTID_String);
                                    }

                                    Accept_Result = 0;
                                    Reply_Message.RootItem.AsByte = Accept_Result;
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F37:
                                {
                                    #region S2F37
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S2F38_Messgae);

                                    bool Enable_Result = SECS_Message.RootItem.Items[0].AsBoolean;
                                    int CEID_Count = SECS_Message.RootItem.Items[1].ItemNumber;
                                    byte Accept_Result = 0;

                                    if (CEID_Count == 0)
                                    {
                                        for (int CEID_Idx = 0; CEID_Idx < CEIDData_Excel.Length; CEID_Idx++)
                                        {
                                            if (Enable_Result)
                                            {
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.CEID, CEID_Idx, (int)CEID_Col.CEID_Enable, "T");
                                            }
                                            else
                                            {
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.CEID, CEID_Idx, (int)CEID_Col.CEID_Enable, "F");
                                            }
                                        }

                                        Accept_Result = 0;
                                        Reply_Message.RootItem.AsByte = Accept_Result;
                                        SECS_Transaction.Secondary = Reply_Message;
                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                        return;
                                    }

                                    for (int Idx = 0; Idx < CEID_Count; Idx++)
                                    {
                                        string CEID_Value = SECS_Message.RootItem.Items[1].Items[Idx].AsString;
                                        int CEID_No = Array.IndexOf(CEIDData_Excel, CEID_Value);

                                        if (CEID_No >= 0)
                                        {
                                            if (Enable_Result)
                                            {
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.CEID, CEID_No, (int)CEID_Col.CEID_Enable, "T");
                                            }
                                            else
                                            {
                                                HCT_EFEM.WirteExcel((int)IDExcelTable.CEID, CEID_No, (int)CEID_Col.CEID_Enable, "F");
                                            }
                                        }
                                        else
                                        {
                                            Accept_Result = 1;
                                            Reply_Message.RootItem.AsByte = Accept_Result;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                            return;
                                        }
                                    }

                                    Accept_Result = 0;
                                    Reply_Message.RootItem.AsByte = Accept_Result;
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                            case (int)FunctionNo.F41:  //Walson 20201124 修改
                                {
                                    #region S2F41
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S2F42_Messgae);                                    
                                    int Accept_Result = 0;

                                    int PortNo = 0; 

                                    switch (SECS_Message.RootItem.Items[0].AsString.ToUpper())
                                    {
                                        case "REMOTE":
                                            {
                                                //if(HT.EFEM.Status == EFEMStatus.Init_Finish != true
                                                //&& HT.EFEM.Status == EFEMStatus.Run_Fail != true) 
                                                //{
                                                //    Accept_Result = 1;
                                                //}
                                                //else 
                                                //{
                                                    Accept_Result = 0;
                                                    Current_Mode = EFEMMode.Remote;
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ControlMode, (int)VID_Col.VID_Value, "5");
                                                    ControlModeChange(Current_Mode);
                                                //}
                                            }
                                            break;
                                        case "LOCAL":
                                            {
                                                //if (HT.EFEM.Status == EFEMStatus.Init_Finish != true
                                                //&& HT.EFEM.Status == EFEMStatus.Run_Fail != true)
                                                //{
                                                //    Accept_Result = 2;
                                                //}
                                                //else
                                                //{
                                                    Accept_Result = 0;
                                                    Current_Mode = EFEMMode.Local;
                                                    HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ControlMode, (int)VID_Col.VID_Value, "4");
                                                    ControlModeChange(Current_Mode);
                                                //}
                                            }
                                            break;
                                        case "LOAD":
                                            {
                                                if (HT.EFEM.Status == EFEMStatus.Init_Finish != true
                                                && HT.EFEM.Status == EFEMStatus.Run_Fail != true
                                                && HT.EFEM.Status == EFEMStatus.Run_Now != true)
                                                {
                                                    Accept_Result = 2;
                                                }
                                                else if (SECS_Message.RootItem.Items[1].Items[0].Items[0].AsString.ToUpper() != "PORT")
                                                {
                                                    Accept_Result = 1;
                                                }
                                                else
                                                {
                                                    Accept_Result = 0;
                                                    PortNo = int.Parse(SECS_Message.RootItem.Items[1].Items[0].Items[1].AsString);
                                                    CarrierActionChange( SQLWaferInforStep.MP_Reload , (PortNo - 1).ToString(), ref Accept_Result);
                                                }
                                            }
                                            break;

                                        case "STOP":
                                            {
                                                Accept_Result = 0;
                                                StopRequest(true);
                                            }
                                            break;

                                        case "PAUSE":
                                            {
                                            }
                                            break;

                                        case "RESUME":
                                            {
                                            }
                                            break;

                                        default:
                                            {
                                                Accept_Result = 1;
                                            }
                                            break;
                                    }

                                    Reply_Message.RootItem.Items[0].AsU1 = (uint)Accept_Result;
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);

                                    #endregion
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
                case (int)StreamNo.S3:
                    {
                        #region S3
                        switch (SECS_Message.Function)
                        {
                            case (int)FunctionNo.F17:
                                {
                                    #region S3F17
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S3F18_Messgae);
                                    int Accept_Result = 0;

                                    if (HT.EFEM.Status == EFEMStatus.Run_Now)
                                    {
                                        Accept_Result = 0;

                                        TransferInfo.FOUPAction = SECS_Message.RootItem.Items[1].AsString;
                                        TransferInfo.FOUPID = SECS_Message.RootItem.Items[2].AsString;
                                        TransferInfo.PortNo = int.Parse(SECS_Message.RootItem.Items[3].AsString);

                                        switch (TransferInfo.FOUPAction)
                                        {
                                            case "ProceedWithCarrier":
                                                {
                                                    if (PortsStatus[TransferInfo.PortNo - 1] == CEID_Item.CarrierIDRead_WaitingForHost)
                                                    {
                                                        CarrierActionChange(TransferInfo.PortNo > 10 ? SQLWaferInforStep.MP_Load : SQLWaferInforStep.CP_Load, (TransferInfo.PortNo - 1).ToString(), ref Accept_Result);

                                                        if(Accept_Result != 0) // 20201221 Walson
                                                        {
                                                            Reply_Message.RootItem.Items[0].AsU1 = (uint)Accept_Result;
                                                            SECS_Transaction.Secondary = Reply_Message;
                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                            return;
                                                        }

                                                        //Joanne 20200630 Add
                                                        if (TransferInfo.PortNo <= HCT_EFEM.CassetteCount)
                                                        {
                                                            DeviceNameEnum = (All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.CstPort, TransferInfo.PortNo));
                                                            PLC.Plc_CmdSend(DeviceNameEnum, PLC_Device.B, (int)PLC_B.CSTProcess + ((TransferInfo.PortNo - 1) * 1), 1);
                                                        }
                                                        else
                                                        {
                                                            DeviceNameEnum = (All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.MagazinePort, TransferInfo.PortNo - HCT_EFEM.CassetteCount));
                                                            PLC.Plc_CmdSend(DeviceNameEnum, PLC_Device.B, (int)PLC_B.MagProcess + ((TransferInfo.PortNo - HCT_EFEM.CassetteCount - 1) * 1), 1);
                                                        }

                                                        PortLoadUnloadStatus[TransferInfo.PortNo - 1] = LoadUnloadStatus.Load;  //Joanne 20201014 Add
                                                    }
                                                    else // 20210102 Walson追加
                                                    {
                                                        UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.SocketReceive, "Reject Load Command With Not Read ID");
                                                        Accept_Result = 1;
                                                        Reply_Message.RootItem.Items[0].AsU1 = (uint)Accept_Result;
                                                        SECS_Transaction.Secondary = Reply_Message;
                                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                        return;
                                                    }
                                                }
                                                break;

                                            case "CarrierRelease":
                                            case "CancelCarrier":
                                            case "CancelCarrierAtPort":
                                                {
                                                    CarrierActionChange(TransferInfo.PortNo > 10 ? SQLWaferInforStep.MP_Unload : SQLWaferInforStep.CP_Unload, (TransferInfo.PortNo - 1).ToString(), ref Accept_Result);

                                                    if (Accept_Result != 0) // 20201221 Walson
                                                    {
                                                        Reply_Message.RootItem.Items[0].AsU1 = (uint)Accept_Result;
                                                        SECS_Transaction.Secondary = Reply_Message;
                                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                        return;
                                                    }

                                                    PortLoadUnloadStatus[TransferInfo.PortNo - 1] = LoadUnloadStatus.Unload;  //Joanne 20201014 Add

                                                    //Joanne 20200630 Add
                                                    //if (TransferInfo.PortNo <= HCT_EFEM.CassetteCount)
                                                    //{
                                                    //    DeviceNameEnum = (All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.CstPort, TransferInfo.PortNo));
                                                    //    PLC.Plc_CmdSend(DeviceNameEnum, PLC_Device.B, (int)PLC_B.CSTProcess + ((TransferInfo.PortNo - 1) * 1), 0);
                                                    //}
                                                    //else
                                                    //{
                                                    //    DeviceNameEnum = (All_Device)Enum.Parse(typeof(All_Device), string.Format("{0}{1}", NormalStatic.MagazinePort, TransferInfo.PortNo - HCT_EFEM.CassetteCount));
                                                    //    PLC.Plc_CmdSend(DeviceNameEnum, PLC_Device.B, (int)PLC_B.MagProcess + ((TransferInfo.PortNo - HCT_EFEM.CassetteCount - 1) * 1), 0);
                                                    //}
                                                }
                                                break;

                                            default:
                                                {
                                                    Accept_Result = 1;
                                                    Reply_Message.RootItem.Items[0].AsU1 = (uint)Accept_Result;
                                                    SECS_Transaction.Secondary = Reply_Message;
                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                    return;
                                                }
                                                break;
                                        }

                                        Accept_Result = 0;
                                        Reply_Message.RootItem.Items[0].AsU1 = (uint)Accept_Result;
                                        SECS_Transaction.Secondary = Reply_Message;
                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);

                                        if (PortsStatus[TransferInfo.PortNo - 1] == CEID_Item.SlotMapResult_WaitingForHost && TransferInfo.FOUPAction == "ProceedWithCarrier")
                                        {
                                            HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.SlotMap, (int)VID_Col.VID_Value, SlotResult[TransferInfo.PortNo - 1]);
                                            PortsStatus[TransferInfo.PortNo - 1] = CEID_Item.SlotMapVerifyOK;
                                            S6F11((int)CEID_Item.SlotMapVerifyOK);
                                        }
                                    }
                                    else
                                    {
                                        Accept_Result = 2;
                                        Reply_Message.RootItem.Items[0].AsU1 = (uint)Accept_Result;
                                        SECS_Transaction.Secondary = Reply_Message;
                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    }
                                    #endregion
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
                case (int)StreamNo.S5:
                    {
                        #region S5
                        switch (SECS_Message.Function)
                        {
                            case (int)FunctionNo.F3:
                                {
                                    #region S5F3
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S5F4_Messgae);

                                    string Alarm_Enable = SECS_Message.RootItem.Items[0].AsString;
                                    byte Accept_Result = 0;

                                    switch (Alarm_Enable)
                                    {
                                        case "80":
                                            {
                                            }
                                            break;
                                        case "00":
                                            {
                                            }
                                            break;
                                    }

                                    Reply_Message.RootItem.AsByte = Accept_Result;
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
                case (int)StreamNo.S7:
                    {
                        #region S7
                        switch (SECS_Message.Function)
                        {
                            case (int)FunctionNo.F19:
                                {
                                    #region S7F19
                                    KSecsMessage Reply_Message = SecsWrapper1.LoadMessage("S7F20");
                                    SECS_Transaction.Secondary = Reply_Message;
                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                    #endregion
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
                case (int)StreamNo.S14:
                    {
                        #region S14
                        switch (SECS_Message.Function)
                        {
                            case (int)FunctionNo.F9:
                                {
                                    #region S14F9
                                    if (HT.EFEM.Mode == EFEMMode.Remote)
                                    {
                                        
                                        if (HT.EFEM.Status == EFEMStatus.Run_Now)
                                        {
                                            KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S14F10_Messgae);
                                            
                                            CJInfo = new CJStruct();

                                            for (int Index = 0; Index < SECS_Message.RootItem.Items[2].ItemNumber; Index++)
                                            {
                                                string ItemName = SECS_Message.RootItem.Items[2].Items[Index].Items[0].AsString;

                                                switch (ItemName)
                                                {
                                                    case "ObjID":
                                                        {
                                                            #region ObjID
                                                            CJInfo.CJID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].AsString;
                                                            #endregion
                                                        }
                                                        break;
                                                    case "CarrierInputSpec":
                                                        {
                                                            #region CarrierInputSpec
                                                            int FoupCount = SECS_Message.RootItem.Items[2].Items[Index].Items[1].ItemNumber;
                                                            CJInfo.UseFOUP = new string[FoupCount];

                                                            for (int FoupIndex = 0; FoupIndex < FoupCount; FoupIndex++)
                                                            {
                                                                int idx = Array.IndexOf(PortIDList, SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[FoupIndex].AsString);

                                                                if (idx < 0)  // Walson 20210102追加 防止Host指定不存在的ID
                                                                {
                                                                    UI.Log(NormalStatic.SECS, NormalStatic.S14F9_Messgae, SystemList.SocketReceive, string.Format("Unknown Foup ID:{0}",
                                                                        SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[FoupIndex].AsString));
                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)21;
                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Unknown Foup ID";
                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                    return;
                                                                }

                                                                if (PortLoadUnloadStatus[idx] == LoadUnloadStatus.Unload)
                                                                {
                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)21;
                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Port is unload";
                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                    return;
                                                                }

                                                                CJInfo.UseFOUP[FoupIndex] = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[FoupIndex].AsString;
                                                            }
                                                            
                                                            #endregion
                                                        }
                                                        break;
                                                    case "MtrlOutSpec":
                                                        {
                                                            #region MtrlOutSpec
                                                            int Group_Count = SECS_Message.RootItem.Items[2].Items[Index].Items[1].ItemNumber;
                                                            int SlotCnt;
                                                            TransferInfo.StageNo = 0;
                                                            string[] Write_CJData = new string[14];

                                                            switch (CurrnetRecipe)
                                                            {
                                                                case PJ_Type.Load:
                                                                    {
                                                                        #region Load
                                                                        for (int GroupNo = 0; GroupNo < Group_Count; GroupNo++)
                                                                        {
                                                                            SlotCnt = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].ItemNumber;

                                                                            for (int SlotNo = 0; SlotNo < SlotCnt; SlotNo++)
                                                                            {
                                                                                TransferJob_Data = new TransferJobStruct();
                                                                                TransferJob_Data.SourcePortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[0].AsString;
                                                                                TransferJob_Data.DestinationPortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[0].AsString;

                                                                                #region 20210127 Walson 防範Host使用空字串ID
                                                                                if (TransferJob_Data.SourcePortID == string.Empty || TransferJob_Data.DestinationPortID == string.Empty ) 
                                                                                {
                                                                                    string error = string.Format("Destination Port ID is Empty. (CJID:{0})", CJInfo.CJID);
                                                                                    if (TransferJob_Data.SourcePortID == string.Empty)
                                                                                        error = string.Format("Source Port ID is Empty. (CJID:{0})", CJInfo.CJID);

                                                                                    UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.CommandParameter, error);

                                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)21;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = error;
                                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                    
                                                                                    return;
                                                                                }
                                                                                #endregion

                                                                                int Soc_PortNo = Array.IndexOf(PortIDList, TransferJob_Data.SourcePortID) + 1;
                                                                                int Des_PortNo = Array.IndexOf(PortIDList, TransferJob_Data.DestinationPortID) + 1;

                                                                                int Soc_Slot = int.Parse(SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].Items[SlotNo].AsString);
                                                                                int Des_Slot = int.Parse(SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[1].Items[SlotNo].AsString);

                                                                                string SocPort, DesPort;

                                                                                if (Soc_PortNo > 0 && Des_PortNo > 10)
                                                                                {
                                                                                    if (Soc_PortNo > 10)
                                                                                    {
                                                                                        SocPort = string.Format("{0}{1}", NormalStatic.MagazinePort, (Soc_PortNo - 10));

                                                                                        if (HT.MagazineData[Soc_PortNo - HCT_EFEM.CassetteCount - 1].PortType == MagazinePortType.OMS_In)
                                                                                        {
                                                                                            if (HT.MagazineData[Soc_PortNo - HCT_EFEM.CassetteCount - 1].CarrierData[Soc_Slot - 1].Status == WaferStatus.WithOut)
                                                                                            {
                                                                                                UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive, string.Format("Source Slot have no carrier.{0}-{1}", Soc_PortNo,Soc_Slot));
                                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)21;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source Slot have no carrier";
                                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                                return;
                                                                                            }

                                                                                            TransferJob_Data.IsOMS = NormalStatic.True;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive, string.Format("Source/Target Port is wrong.{0}", Soc_PortNo));
                                                                                            Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                            Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                            Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if (HT.CassetteData[Soc_PortNo - 1].WaferData[Soc_Slot - 1].Status == WaferStatus.WithOut)
                                                                                        {
                                                                                            UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive, string.Format("Source Slot have no wafer.{0}-{1}", Soc_PortNo, Soc_Slot));
                                                                                            Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                            Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                            Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)22;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source Slot have no wafer";
                                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                            return;
                                                                                        }

                                                                                        SocPort = string.Format("{0}{1}", NormalStatic.CstPort, Soc_PortNo);
                                                                                        TransferJob_Data.IsOMS = NormalStatic.False;
                                                                                    }

                                                                                    if (Des_PortNo > 10)
                                                                                    {
                                                                                        DesPort = string.Format("{0}{1}", NormalStatic.MagazinePort, (Des_PortNo - 10));

                                                                                        if (Soc_PortNo > 10)
                                                                                        {
                                                                                            if (HT.MagazineData[Des_PortNo - HCT_EFEM.CassetteCount - 1].CarrierData[Des_Slot - 1].Status == WaferStatus.With)
                                                                                            {
                                                                                                UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive, string.Format("Destination Slot have carrier.{0}-{1}", Des_PortNo, Des_Slot));
                                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)23;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Destination Slot have carrier";
                                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                                return;
                                                                                            }
                                                                                            else if (HT.MagazineData[Des_PortNo - HCT_EFEM.CassetteCount - 1].CarrierData[Des_Slot - 1].Status != WaferStatus.WithOut)  
                                                                                            {
                                                                                                //Joanne 20201012 Add Start
                                                                                                UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive,string.Format("Destination Slot Status is wrong.{0}-{1}", Des_PortNo, Des_Slot));
                                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)23;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Destination Slot Status is wrong";
                                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                                return;
                                                                                                //Joanne 20201012 Add End
                                                                                            }

                                                                                            if (HT.MagazineData[Soc_PortNo - 11].PortType == MagazinePortType.OMS_In)
                                                                                            {
                                                                                                TransferJob_Data.IsOMS = NormalStatic.True;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive, string.Format("Source/Target Port is wrong.{0}", Soc_PortNo));
                                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            TransferJob_Data.IsOMS = NormalStatic.False;
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive, string.Format("Source/Target Port is wrong(Des_PortNo =< 10).{0}", Des_PortNo));
                                                                                        Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                        Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                        Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                        SECS_Transaction.Secondary = Reply_Message;
                                                                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                        return;
                                                                                    }

                                                                                    TransferJob_Data.SourcePort = SocPort;
                                                                                    TransferJob_Data.DestinationPort = DesPort;
                                                                                }
                                                                                else
                                                                                {
                                                                                    UI.Log(NormalStatic.SECS, NormalStatic.SECS, SystemList.DeviceReceive, string.Format("Source/Target Port is wrong(Soc_PortNo < 0 || Des_PortNo < 10).{0}-{1}", Soc_PortNo, Des_PortNo));
                                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                    return;
                                                                                }

                                                                                if (TransferJob_Data.IsOMS == NormalStatic.False)
                                                                                {
                                                                                    if (TransferInfo.StageNo == 0)
                                                                                    {
                                                                                        if (HT.Recipe.IsUseStage1 && HT.Recipe.IsUseStage2 == false)
                                                                                            TransferJob_Data.StageNo = "1";
                                                                                        else if (HT.Recipe.IsUseStage1 == false && HT.Recipe.IsUseStage2)
                                                                                            TransferJob_Data.StageNo = "2";
                                                                                        else
                                                                                        {
                                                                                            TransferJob_Data.StageNo = "1";
                                                                                            TransferInfo.StageNo++;
                                                                                        }
                                                                                    }
                                                                                    else if (TransferInfo.StageNo == 1)
                                                                                    {
                                                                                        if (HT.Recipe.IsUseStage1 && HT.Recipe.IsUseStage2 == false)
                                                                                            TransferJob_Data.StageNo = "1";
                                                                                        else if (HT.Recipe.IsUseStage1 == false && HT.Recipe.IsUseStage2)
                                                                                            TransferJob_Data.StageNo = "2";
                                                                                        else
                                                                                        {
                                                                                            TransferJob_Data.StageNo = "2";
                                                                                            TransferInfo.StageNo = 0;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    TransferJob_Data.StageNo = "0";
                                                                                }

                                                                                TransferJob_Data.SourceSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].Items[SlotNo].AsString;
                                                                                TransferJob_Data.DestinationSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[1].Items[SlotNo].AsString;

                                                                                TransferJob_Data.SourceSlotID = "";
                                                                                TransferJob_Data.DestinationSlotID = "";

                                                                                CJInfo.TransferJobInfo.Add(TransferJob_Data);
                                                                            }
                                                                        }
                                                                        #endregion
                                                                    }
                                                                    break;
                                                                case PJ_Type.Unload:
                                                                    {
                                                                        #region Unload
                                                                        for (int GroupNo = 0; GroupNo < Group_Count; GroupNo++)
                                                                        {
                                                                            SlotCnt = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].ItemNumber;

                                                                            for (int SlotNo = 0; SlotNo < SlotCnt; SlotNo++)
                                                                            {
                                                                                TransferJob_Data = new TransferJobStruct();
                                                                                TransferJob_Data.SourcePortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[0].AsString;         // Target Carrier ID
                                                                                TransferJob_Data.DestinationPortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[0].AsString;    // Source Carrier ID

                                                                                int Soc_PortNo = Array.IndexOf(PortIDList, TransferJob_Data.DestinationPortID) + 1;
                                                                                int Des_PortNo = Array.IndexOf(PortIDList, TransferJob_Data.SourcePortID) + 1;

                                                                                int Soc_Slot = int.Parse(SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].Items[SlotNo].AsString);
                                                                                int Des_Slot = int.Parse(SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[1].Items[SlotNo].AsString);

                                                                                string SocPort, DesPort;

                                                                                if (Soc_PortNo > 10 && Des_PortNo > 0)
                                                                                {
                                                                                    if (Soc_PortNo > 10)
                                                                                    {
                                                                                        SocPort = string.Format("{0}{1}", NormalStatic.MagazinePort, (Soc_PortNo - 10));

                                                                                        if (HT.MagazineData[Soc_PortNo - HCT_EFEM.CassetteCount - 1].CarrierData[Soc_Slot - 1].Status == WaferStatus.WithOut)
                                                                                        {
                                                                                            Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                            Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                            Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)21;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source Slot have no carrier";
                                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                            return;
                                                                                        }

                                                                                        if (Des_PortNo > 10)
                                                                                        {
                                                                                            if (HT.MagazineData[Des_PortNo - 11].PortType == MagazinePortType.OMS_Out)
                                                                                            {
                                                                                                if (HT.MagazineData[Des_PortNo - HCT_EFEM.CassetteCount - 1].CarrierData[Des_Slot - 1].Status == WaferStatus.With)
                                                                                                {
                                                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)24;
                                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Destination Slot have carrier";
                                                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                                    return;
                                                                                                }

                                                                                                TransferJob_Data.IsOMS = NormalStatic.True;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                        Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                        Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                        SECS_Transaction.Secondary = Reply_Message;
                                                                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                        return;
                                                                                    }

                                                                                    if (Des_PortNo > 10)
                                                                                    {
                                                                                        DesPort = string.Format("{0}{1}", NormalStatic.MagazinePort, (Des_PortNo - 10));

                                                                                        if (HT.MagazineData[Des_PortNo - 11].PortType == MagazinePortType.OMS_Out)
                                                                                        {
                                                                                            if (HT.MagazineData[Des_PortNo - HCT_EFEM.CassetteCount - 1].CarrierData[Des_Slot - 1].Status == WaferStatus.With)
                                                                                            {
                                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)23;
                                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Destination Slot have carrier";
                                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                                return;
                                                                                            }

                                                                                            TransferJob_Data.IsOMS = NormalStatic.True;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                            Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                            Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if (HT.CassetteData[Des_PortNo - 1].WaferData[Des_Slot - 1].Status == WaferStatus.With)
                                                                                        {
                                                                                            Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                            Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                            Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)24;
                                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Destination Slot have wafer";
                                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                            return;
                                                                                        }

                                                                                        DesPort = string.Format("{0}{1}", NormalStatic.CstPort, Des_PortNo);
                                                                                        TransferJob_Data.IsOMS = NormalStatic.False;
                                                                                    }

                                                                                    TransferJob_Data.SourcePort = DesPort;
                                                                                    TransferJob_Data.DestinationPort = SocPort;
                                                                                }

                                                                                if (TransferJob_Data.IsOMS == NormalStatic.False)
                                                                                {
                                                                                    if (TransferInfo.StageNo == 0)
                                                                                    {
                                                                                        if (HT.Recipe.IsUseStage1 && HT.Recipe.IsUseStage2 == false)
                                                                                            TransferJob_Data.StageNo = "1";
                                                                                        else if (HT.Recipe.IsUseStage1 == false && HT.Recipe.IsUseStage2)
                                                                                            TransferJob_Data.StageNo = "2";
                                                                                        else
                                                                                        {
                                                                                            TransferJob_Data.StageNo = "1";
                                                                                            TransferInfo.StageNo++;
                                                                                        }
                                                                                    }
                                                                                    else if (TransferInfo.StageNo == 1)
                                                                                    {
                                                                                        if (HT.Recipe.IsUseStage1 && HT.Recipe.IsUseStage2 == false)
                                                                                            TransferJob_Data.StageNo = "1";
                                                                                        else if (HT.Recipe.IsUseStage1 == false && HT.Recipe.IsUseStage2)
                                                                                            TransferJob_Data.StageNo = "2";
                                                                                        else
                                                                                        {
                                                                                            TransferJob_Data.StageNo = "2";
                                                                                            TransferInfo.StageNo = 0;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    TransferJob_Data.StageNo = "0";
                                                                                }

                                                                                TransferJob_Data.SourceSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[1].Items[SlotNo].AsString;         // Target Slot
                                                                                TransferJob_Data.DestinationSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].Items[SlotNo].AsString;    // Source Slot

                                                                                TransferJob_Data.SourceSlotID = "";
                                                                                TransferJob_Data.DestinationSlotID = "";

                                                                                int port = Convert.ToInt16(TransferJob_Data.DestinationPort.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;
                                                                                int Slot = int.Parse(TransferJob_Data.DestinationSlot) - 1;
                                                                                HT.MagazineData[port].Wafer[Slot].SocPort = TransferJob_Data.SourcePort;
                                                                                HT.MagazineData[port].Wafer[Slot].SocSlot = int.Parse(TransferJob_Data.SourceSlot);
                                                                                HT.MagazineData[port].Wafer[Slot].Status = WaferStatus.With;
                                                                                HT.MagazineData[port].SetWafer(port, Slot);

                                                                                CJInfo.TransferJobInfo.Add(TransferJob_Data);
                                                                            }
                                                                        }
                                                                        #endregion
                                                                    }
                                                                    break;
                                                                case PJ_Type.LoadUnload:
                                                                    {
                                                                        #region Swap
                                                                        SocInfo.Clear();
                                                                        DesInfo.Clear();
                                                                        SwapJob.Clear();

                                                                        string SocPortID, SocPort, SocSlot, DesPortID, DesPort, DesSlot, SwapPortID, SwapPort, SwapSlot, OMS;

                                                                        for (int GroupNo = 0; GroupNo < Group_Count; GroupNo++)
                                                                        {
                                                                            SlotCnt = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].ItemNumber;

                                                                            SocPortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[0].AsString;
                                                                            DesPortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[0].AsString;

                                                                            int Soc_PortNo = Array.IndexOf(PortIDList, SocPortID) + 1;
                                                                            int Des_PortNo = Array.IndexOf(PortIDList, DesPortID) + 1;

                                                                            if (Soc_PortNo > 0 && Des_PortNo > 0)
                                                                            {
                                                                                SocPort = Soc_PortNo.ToString();    // Source Port
                                                                                DesPort = Des_PortNo.ToString();    // Target Port

                                                                                for (int SlotNo = 0; SlotNo < SlotCnt; SlotNo++)
                                                                                {
                                                                                    SocSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].Items[SlotNo].AsString;    // Source Slot
                                                                                    DesSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[1].Items[SlotNo].AsString;    // Target Slot

                                                                                    int SocSearch_Index = SocInfo.IndexOf(string.Format("{0},{1}", SocPortID, SocSlot));
                                                                                    int DesSearch_Index = DesInfo.IndexOf(string.Format("{0},{1}", DesPortID, DesSlot));

                                                                                    if (SocSearch_Index < 0 && DesSearch_Index < 0)
                                                                                    {
                                                                                        int SwapSocSearch = SocInfo.IndexOf(string.Format("{0},{1}", DesPortID, DesSlot));
                                                                                        int SwapDesSearch = DesInfo.IndexOf(string.Format("{0},{1}", SocPortID, SocSlot));

                                                                                        if (SwapSocSearch < 0 && SwapDesSearch < 0)
                                                                                        {
                                                                                            SocInfo.Add(string.Format("{0},{1}", SocPortID, SocSlot));
                                                                                            DesInfo.Add(string.Format("{0},{1}", DesPortID, DesSlot));
                                                                                        }
                                                                                        else if (SwapSocSearch >= 0 && SwapDesSearch < 0)
                                                                                        {
                                                                                            SwapJob.Add(string.Format("{0},{1},{2},{3},{4}", SocPortID, SocSlot, DesPortID, DesSlot, DesInfo[SwapSocSearch]));
                                                                                            SocInfo.Add(string.Format("{0},{1}", SocPortID, SocSlot));
                                                                                            DesInfo.Add(string.Format("{0},{1}", DesPortID, DesSlot));
                                                                                        }
                                                                                        else if (SwapSocSearch < 0 && SwapDesSearch >= 0)
                                                                                        {
                                                                                            SwapJob.Add(string.Format("{0},{1},{2},{3},{4}", SocInfo[SwapDesSearch], SocPortID, SocSlot, DesPortID, DesSlot));
                                                                                            SocInfo.Add(string.Format("{0},{1}", SocPortID, SocSlot));
                                                                                            DesInfo.Add(string.Format("{0},{1}", DesPortID, DesSlot));
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                        Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                        Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)6;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port and Slot is wrong";
                                                                                        SECS_Transaction.Secondary = Reply_Message;
                                                                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                        return;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                return;
                                                                            }
                                                                        }

                                                                        if (SwapJob.Count != Group_Count / 2)
                                                                        {
                                                                            Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                            Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                            Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)8;
                                                                            Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Job is wrong";
                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                            return;
                                                                        }

                                                                        #region Create Job
                                                                        for (int JobNo = 0; JobNo < SwapJob.Count; JobNo++)
                                                                        {
                                                                            TransferJob_Data = new TransferJobStruct();

                                                                            string[] Job = SwapJob[JobNo].Split(SplitSeparate, StringSplitOptions.None);

                                                                            TransferJob_Data.SourcePortID = Job[0];

                                                                            int Soc_PortNo = Array.IndexOf(PortIDList, Job[0]) + 1;
                                                                            string Soc_Port;

                                                                            if (Soc_PortNo > HCT_EFEM.CassetteCount)
                                                                            {
                                                                                Soc_Port = string.Format("{0}{1}", NormalStatic.MagazinePort, Soc_PortNo - HCT_EFEM.CassetteCount);

                                                                                if (HT.MagazineData[Soc_PortNo - 1 - HCT_EFEM.CassetteCount].PortType == MagazinePortType.OMS_In)
                                                                                {
                                                                                    TransferJob_Data.IsOMS = NormalStatic.True;
                                                                                }
                                                                                else
                                                                                {
                                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                    return;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                Soc_Port = string.Format("{0}{1}", NormalStatic.CstPort, Soc_PortNo);
                                                                                TransferJob_Data.IsOMS = NormalStatic.False;
                                                                            }

                                                                            TransferJob_Data.SourcePort = Soc_Port;
                                                                            TransferJob_Data.SourceSlot = Job[1];
                                                                            TransferJob_Data.SourceSlotID = "";
                                                                            TransferJob_Data.DestinationPortID = Job[2];

                                                                            int Des_PortNo = Array.IndexOf(PortIDList, Job[2]) + 1;
                                                                            string Des_Port;

                                                                            if (Des_PortNo > HCT_EFEM.CassetteCount)
                                                                            {
                                                                                Des_Port = string.Format("{0}{1}", NormalStatic.MagazinePort, (Des_PortNo - HCT_EFEM.CassetteCount));
                                                                                TransferJob_Data.IsOMS = NormalStatic.False;
                                                                            }
                                                                            else
                                                                            {
                                                                                Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                SECS_Transaction.Secondary = Reply_Message;
                                                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                return;
                                                                            }

                                                                            TransferJob_Data.DestinationPort = Des_Port;
                                                                            TransferJob_Data.DestinationSlot = Job[3];
                                                                            TransferJob_Data.DestinationSlotID = "";
                                                                            
                                                                            TransferJob_Data.SwapPortID = Job[4];

                                                                            int Swap_PortNo = Array.IndexOf(PortIDList, Job[4]) + 1;
                                                                            string Swap_Port;

                                                                            if (Swap_PortNo > HCT_EFEM.CassetteCount)
                                                                            {
                                                                                Swap_Port = string.Format("{0}{1}", NormalStatic.MagazinePort, (Swap_PortNo - HCT_EFEM.CassetteCount));

                                                                                if (HT.MagazineData[Swap_PortNo - 1 - HCT_EFEM.CassetteCount].PortType == MagazinePortType.OMS_Out)
                                                                                {
                                                                                    TransferJob_Data.IsOMS = NormalStatic.True;
                                                                                }
                                                                                else
                                                                                {
                                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                    return;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                Swap_Port = string.Format("{0}{1}", NormalStatic.CstPort, Swap_PortNo);
                                                                                TransferJob_Data.IsOMS = NormalStatic.False;
                                                                            }

                                                                            TransferJob_Data.SwapPort = Swap_Port;
                                                                            TransferJob_Data.SwapSlot = Job[5];
                                                                            TransferJob_Data.SwapSlotID = "";

                                                                            if (TransferJob_Data.IsOMS == NormalStatic.False)
                                                                            {
                                                                                if (TransferInfo.StageNo == 0)
                                                                                {
                                                                                    if (HT.Recipe.IsUseStage1 && HT.Recipe.IsUseStage2 == false)
                                                                                        TransferJob_Data.StageNo = "1";
                                                                                    else if (HT.Recipe.IsUseStage1 == false && HT.Recipe.IsUseStage2)
                                                                                        TransferJob_Data.StageNo = "2";
                                                                                    else
                                                                                    {
                                                                                        TransferJob_Data.StageNo = "1";
                                                                                        TransferInfo.StageNo++;
                                                                                    }
                                                                                }
                                                                                else if (TransferInfo.StageNo == 1)
                                                                                {
                                                                                    if (HT.Recipe.IsUseStage1 && HT.Recipe.IsUseStage2 == false)
                                                                                        TransferJob_Data.StageNo = "1";
                                                                                    else if (HT.Recipe.IsUseStage1 == false && HT.Recipe.IsUseStage2)
                                                                                        TransferJob_Data.StageNo = "2";
                                                                                    else
                                                                                    {
                                                                                        Write_CJData[(int)CJData_Item.StagePos] = "2";
                                                                                        TransferJob_Data.StageNo = "2";
                                                                                        TransferInfo.StageNo = 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                               
                                                                                TransferJob_Data.StageNo = "0";
                                                                            }

                                                                            int port = Convert.ToInt16(TransferJob_Data.DestinationPort.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;
                                                                            int Slot = int.Parse(TransferJob_Data.DestinationSlot) - 1;
                                                                            HT.MagazineData[port].Wafer[Slot].SocPort = TransferJob_Data.SwapPortID;
                                                                            HT.MagazineData[port].Wafer[Slot].SocSlot = int.Parse(TransferJob_Data.SwapSlot);
                                                                            HT.MagazineData[port].Wafer[Slot].Status = WaferStatus.With;
                                                                            HT.MagazineData[port].SetWafer(port, Slot);

                                                                            CJInfo.TransferJobInfo.Add(TransferJob_Data);
                                                                        }
                                                                        #endregion
                                                                        
                                                                        #endregion LoadUnload
                                                                    }
                                                                    break;
                                                                case PJ_Type.Sortering:
                                                                    {
                                                                        #region Sorting
                                                                        for (int GroupNo = 0; GroupNo < Group_Count; GroupNo++)
                                                                        {
                                                                            SlotCnt = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].ItemNumber;

                                                                            for (int SlotNo = 0; SlotNo < SlotCnt; SlotNo++)
                                                                            {
                                                                                TransferJob_Data = new TransferJobStruct();
                                                                                TransferJob_Data.SourcePortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[0].AsString;
                                                                                TransferJob_Data.DestinationPortID = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[0].AsString;
                                                                                
                                                                                int Soc_PortNo = Array.IndexOf(PortIDList, TransferJob_Data.SourcePortID) + 1;
                                                                                int Des_PortNo = Array.IndexOf(PortIDList, TransferJob_Data.DestinationPortID) + 1;

                                                                                int Soc_Slot = int.Parse(SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].Items[SlotNo].AsString);
                                                                                int Des_Slot = int.Parse(SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[1].Items[SlotNo].AsString);

                                                                                string SocPort, DesPort;

                                                                                if (Soc_PortNo > 0 && Des_PortNo > 0 && Soc_PortNo <= HCT_EFEM.CassetteCount && Des_PortNo <= HCT_EFEM.CassetteCount)
                                                                                {
                                                                                    SocPort = string.Format("{0}{1}", NormalStatic.CstPort, Soc_PortNo);
                                                                                    DesPort = string.Format("{0}{1}", NormalStatic.CstPort, Des_PortNo);

                                                                                    if (HT.CassetteData[Soc_PortNo - 1].WaferData[Soc_Slot - 1].Status == WaferStatus.WithOut)
                                                                                    {
                                                                                        Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                        Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                        Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)23;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Destination Slot have no wafer";
                                                                                        SECS_Transaction.Secondary = Reply_Message;
                                                                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                        return;
                                                                                    }

                                                                                    if (HT.CassetteData[Des_PortNo - 1].WaferData[Des_Slot - 1].Status == WaferStatus.With)
                                                                                    {
                                                                                        Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                        Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                        Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)24;
                                                                                        Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Destination Slot have wafer";
                                                                                        SECS_Transaction.Secondary = Reply_Message;
                                                                                        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                        return;
                                                                                    }

                                                                                    TransferJob_Data.SourcePort = SocPort;
                                                                                    TransferJob_Data.DestinationPort = DesPort;

                                                                                    TransferJob_Data.IsOMS = NormalStatic.False;

                                                                                    if (TransferInfo.StageNo == 0)
                                                                                    {
                                                                                        TransferJob_Data.StageNo = "1";
                                                                                        TransferInfo.StageNo++;
                                                                                    }
                                                                                    else if (TransferInfo.StageNo == 1)
                                                                                    {
                                                                                        TransferJob_Data.StageNo = "2";
                                                                                        TransferInfo.StageNo = 0;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                                                                    Reply_Message.RootItem.Items[1].ItemNumber = 0;
                                                                                    Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)1;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[0].AsU1 = (uint)3;
                                                                                    Reply_Message.RootItem.Items[2].Items[1].Items[1].AsString = "Source/Target Port is wrong";
                                                                                    SECS_Transaction.Secondary = Reply_Message;
                                                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                                    return;
                                                                                }

                                                                                TransferJob_Data.SourceSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[0].Items[1].Items[SlotNo].AsString;
                                                                                TransferJob_Data.DestinationSlot = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[GroupNo].Items[1].Items[1].Items[SlotNo].AsString; 
                                                                                TransferJob_Data.SourceSlotID = "";
                                                                                TransferJob_Data.DestinationSlotID = "";

                                                                                CJInfo.TransferJobInfo.Add(TransferJob_Data);
                                                                            }
                                                                        }
                                                                        #endregion
                                                                    }
                                                                    break;
                                                            }
                                                            CJList.Add(CJInfo);

                                                            #region Joanne 20200330
                                                            //CJ_Dic.Add(CJInfo.CJID, CJInfo);
                                                            #endregion

                                                            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}{2}", "CJList Add CJ", "CJList Count = ", CJList.Count));
                                                            IO_EFEM.EFEMStatusControl(StatusControl.Run);
                                                            #endregion
                                                        }
                                                        break;
                                                    case "ProcessingCtrlSpec":
                                                        {
                                                            #region ProcessingCtrlSpec
                                                            //Joanne 20201005 Add 
                                                            CJInfo.PJID = new string[SECS_Message.RootItem.Items[2].Items[Index].Items[1].ItemNumber];

                                                            for (int PJIDIdx = 0; PJIDIdx < SECS_Message.RootItem.Items[2].Items[Index].Items[1].ItemNumber; PJIDIdx++)
                                                            {
                                                                CJInfo.PJID[PJIDIdx] = SECS_Message.RootItem.Items[2].Items[Index].Items[1].Items[PJIDIdx].Items[0].AsString;
                                                            }
                                                            //Joanne 20201005 Add End
                                                            #endregion
                                                        }
                                                        break;
                                                    case "ProcessOrderMgmt":
                                                        {
                                                            #region ProcessOrderMgmt
                                                            #endregion
                                                        }
                                                        break;
                                                    case "StartMethod":
                                                        {
                                                            #region StartMethod
                                                            #endregion
                                                        }
                                                        break;
                                                }
                                            }

                                            Reply_Message.RootItem.Items[0].AsString = CJInfo.CJID;
                                            Reply_Message.RootItem.Items[2].Items[0].AsU1 = (uint)0;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);

                                            if (JobBG.IsBusy == false)
                                            {
                                                JobBG.RunWorkerAsync();
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
                case (int)StreamNo.S16:
                    {
                        #region S16
                        switch (SECS_Message.Function)
                        {
                            case 11:
                                {
                                    #region S16F11
                                    #endregion
                                }
                                break;
                            case 15:
                                {
                                    #region S16F15
                                    if (HT.EFEM.Mode == EFEMMode.Remote)
                                    {
                                        if (HT.EFEM.Status == EFEMStatus.Run_Now)
                                        {
                                            KSecsMessage Reply_Message = SecsWrapper1.LoadMessage(NormalStatic.S16F16_Messgae);

                                            int PJ_Count = SECS_Message.RootItem.Items[1].ItemNumber;

                                            PJInfo = new PJStruct();
                                            PJInfo.PJID = new string[PJ_Count];

                                            for (int PJ_Index = 0; PJ_Index < PJ_Count; PJ_Index++)
                                            {
                                                PJInfo.PJID[PJ_Index] = SECS_Message.RootItem.Items[1].Items[PJ_Index].Items[0].AsString;

                                                #region Joanne 20200330 Add
                                                //for (int FoupIdx = 0; FoupIdx < SECS_Message.RootItem.Items[1].Items[PJ_Index].Items[2].ItemNumber; FoupIdx++)
                                                //{
                                                //    int idx = Array.IndexOf(PortIDList, SECS_Message.RootItem.Items[1].Items[PJ_Index].Items[2].Items[FoupIdx].Items[0].AsString);

                                                //    if (PortLoadUnloadStatus[idx] == LoadUnloadStatus.Unload)
                                                //    {
                                                //        Reply_Message.RootItem.Items[0].ItemNumber = 0;
                                                //        Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                //        Reply_Message.RootItem.Items[1].Items[1].Items[0].AsU1 = (uint)8;
                                                //        Reply_Message.RootItem.Items[1].Items[1].Items[1].AsString = "Port is Unload";
                                                //        SECS_Transaction.Secondary = Reply_Message;
                                                //        SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                //        return;
                                                //    }
                                                //}
                                                #endregion

                                                string Recipe_Name = SECS_Message.RootItem.Items[1].Items[PJ_Index].Items[3].Items[1].AsString;

                                                switch (Recipe_Name)
                                                {
                                                    #region Recipe Setting
                                                    case "Load Mode":
                                                        {
                                                            PJInfo.Recipe = PJ_Type.Load;
                                                        }
                                                        break;
                                                    case "Unload Mode":
                                                        {
                                                            PJInfo.Recipe = PJ_Type.Unload;
                                                        }
                                                        break;
                                                    case "Swap Mode":
                                                        {
                                                            PJInfo.Recipe = PJ_Type.LoadUnload;
                                                        }
                                                        break;
                                                    case "Sorter Mode":
                                                        {
                                                            PJInfo.Recipe = PJ_Type.Sortering;
                                                        }
                                                        break;
                                                    default:
                                                        {
                                                            Reply_Message.RootItem.Items[0].AsString = PJInfo.PJID[PJ_Index];
                                                            Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[0].AsU1 = (uint)2;
                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[1].AsString = "Recipe is not exist";
                                                            SECS_Transaction.Secondary = Reply_Message;
                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                            return;
                                                        }
                                                    #endregion
                                                }

                                                int Param_Count = SECS_Message.RootItem.Items[1].Items[PJ_Index].Items[3].Items[2].ItemNumber;

                                                for (int ParamNo = 0; ParamNo < Param_Count; ParamNo++)
                                                {
                                                    string ParamName = SECS_Message.RootItem.Items[1].Items[PJ_Index].Items[3].Items[2].Items[ParamNo].Items[0].AsString;
                                                    string ParamValue = SECS_Message.RootItem.Items[1].Items[PJ_Index].Items[3].Items[2].Items[ParamNo].Items[1].AsString;

                                                    switch (ParamName)
                                                    {
                                                        case "ReadWaferID":
                                                            {
                                                                #region Read Wafer ID
                                                                switch (ParamValue)
                                                                {
                                                                    case "0":
                                                                        {
                                                                            //HT.Recipe.IsOCR_Up = false;
                                                                            //HT.Recipe.IsOCR_Down = false;
                                                                            PJInfo.IsOCRUp = false;
                                                                            PJInfo.IsOCRDown = false;
                                                                        }
                                                                        break;
                                                                    case "1":
                                                                        {
                                                                            //HT.Recipe.IsOCR_Up = true;
                                                                            //HT.Recipe.IsOCR_Down = false;
                                                                            PJInfo.IsOCRUp = true;
                                                                            PJInfo.IsOCRDown = false;
                                                                        }
                                                                        break;
                                                                    case "2":
                                                                        {
                                                                            //HT.Recipe.IsOCR_Down = true;
                                                                            //HT.Recipe.IsOCR_Up = false;
                                                                            PJInfo.IsOCRUp = false;
                                                                            PJInfo.IsOCRDown = true;
                                                                        }
                                                                        break;
                                                                    case "3":
                                                                        {
                                                                            //HT.Recipe.IsOCR_Down = true;
                                                                            //HT.Recipe.IsOCR_Up = true;
                                                                            PJInfo.IsOCRUp = true;
                                                                            PJInfo.IsOCRDown = true;
                                                                        }
                                                                        break;
                                                                    default:
                                                                        {
                                                                            Reply_Message.RootItem.Items[0].AsString = PJInfo.PJID[PJ_Index];
                                                                            Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[0].AsU1 = (uint)3;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[1].AsString = "Parameter Value " + ParamValue + " is not exist (ReadWaferID)";
                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                            return;
                                                                        }
                                                                        break;
                                                                }
                                                                #endregion
                                                            }
                                                            break;
                                                        case "ReadCarrierID":
                                                            {
                                                                #region Read Carrier ID
                                                                switch (ParamValue)
                                                                {
                                                                    case "0":
                                                                        {
                                                                            //HT.Recipe.IsOCR_Stage = false;
                                                                            PJInfo.IsOCR_Stage = false;
                                                                        }
                                                                        break;
                                                                    case "1":
                                                                        {
                                                                            //HT.Recipe.IsOCR_Stage = true;
                                                                            PJInfo.IsOCR_Stage = true;
                                                                        }
                                                                        break;
                                                                    default:
                                                                        {
                                                                            Reply_Message.RootItem.Items[0].AsString = PJInfo.PJID[PJ_Index];
                                                                            Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[0].AsU1 = (uint)4;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[1].AsString = "Parameter Value " + ParamValue + " is not exist (ReadCarrierID)";
                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                            return;
                                                                        }
                                                                        break;
                                                                }
                                                                #endregion
                                                            }
                                                            break;
                                                        case "Flip":
                                                            {
                                                                #region Flip
                                                                switch (ParamValue)
                                                                {
                                                                    case "0":
                                                                        {
                                                                            //HT.Recipe.IsFlip = false;
                                                                            PJInfo.IsFlip = false;
                                                                        }
                                                                        break;
                                                                    case "1":
                                                                        {
                                                                            //HT.Recipe.IsFlip = true;
                                                                            PJInfo.IsFlip = true;
                                                                        }
                                                                        break;
                                                                    default:
                                                                        {
                                                                            Reply_Message.RootItem.Items[0].AsString = PJInfo.PJID[PJ_Index];
                                                                            Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[0].AsU1 = (uint)5;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[1].AsString = "Parameter Value " + ParamValue + " is not exist (Flip)";
                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                            return;
                                                                        }
                                                                        break;
                                                                }
                                                                #endregion
                                                            }
                                                            break;
                                                        case "FindNotch":
                                                            {
                                                                #region Find Notch
                                                                switch (ParamValue)
                                                                {
                                                                    case "0":
                                                                        {
                                                                            //HT.Recipe.IsAligner = false;
                                                                            PJInfo.IsAligner = false;
                                                                        }
                                                                        break;
                                                                    case "1":
                                                                        {
                                                                            //HT.Recipe.IsAligner = true;
                                                                            PJInfo.IsAligner = true;
                                                                        }
                                                                        break;
                                                                    default:
                                                                        {
                                                                            Reply_Message.RootItem.Items[0].AsString = PJInfo.PJID[PJ_Index];
                                                                            Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[0].AsU1 = (uint)6;
                                                                            Reply_Message.RootItem.Items[1].Items[1].Items[0].Items[1].AsString = "Parameter Value " + ParamValue + " is not exist (FindNotch)";
                                                                            SECS_Transaction.Secondary = Reply_Message;
                                                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                                            return;
                                                                        }
                                                                        break;
                                                                }
                                                                #endregion
                                                            }
                                                            break;
                                                        case "UpNotchAngle":
                                                            {
                                                                #region Up Angle
                                                                switch (ParamValue)
                                                                {
                                                                    case "0":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 0.0F;
                                                                            //PJInfo.AlignerDegree = 0.0F;
                                                                            PJInfo.UpOCRDegree = 0.0F;
                                                                        }
                                                                        break;
                                                                    case "90":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 90.0F;
                                                                            //PJInfo.AlignerDegree = 90.0F;
                                                                            PJInfo.UpOCRDegree = 90.0F;
                                                                        }
                                                                        break;
                                                                    case "180":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 180.0F;
                                                                            PJInfo.AlignerDegree = 180.0F;
                                                                            PJInfo.UpOCRDegree = 180.0F;
                                                                        }
                                                                        break;
                                                                    case "270":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 270.0F;
                                                                            //PJInfo.AlignerDegree = 270.0F;
                                                                            PJInfo.UpOCRDegree = 270.0F;
                                                                        }
                                                                        break;
                                                                    default:
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = (float)int.Parse(ParamValue);
                                                                            //PJInfo.AlignerDegree = (float)int.Parse(ParamValue);
                                                                            PJInfo.UpOCRDegree = (float)int.Parse(ParamValue);
                                                                        }
                                                                        break;
                                                                }
                                                                #endregion
                                                            }
                                                            break;
                                                        case "DownNotchAngle":
                                                            {
                                                                #region Down Angle
                                                                switch (ParamValue)
                                                                {
                                                                    case "0":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 0.0F;
                                                                            //PJInfo.AlignerDegree = 0.0F;
                                                                            PJInfo.DownOCRDegree = 0.0F;
                                                                        }
                                                                        break;
                                                                    case "90":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 90.0F;
                                                                            //PJInfo.AlignerDegree = 90.0F;
                                                                            PJInfo.DownOCRDegree = 90.0F;
                                                                        }
                                                                        break;
                                                                    case "180":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 180.0F;
                                                                            //PJInfo.AlignerDegree = 180.0F;
                                                                            PJInfo.DownOCRDegree = 180.0F;
                                                                        }
                                                                        break;
                                                                    case "270":
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = 270.0F;
                                                                            //PJInfo.AlignerDegree = 270.0F;
                                                                            PJInfo.DownOCRDegree = 270.0F;
                                                                        }
                                                                        break;
                                                                    default:
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = (float)int.Parse(ParamValue);
                                                                            //PJInfo.AlignerDegree = (float)int.Parse(ParamValue);
                                                                            PJInfo.DownOCRDegree = (float)int.Parse(ParamValue);
                                                                        }
                                                                        break;
                                                                }
                                                                #endregion
                                                            }
                                                            break;
                                                        case "OCRAngle":
                                                            {
                                                                #region OCR Angle
                                                                switch (ParamValue)
                                                                {
                                                                    case "0":
                                                                        {
                                                                            //HT.Recipe.OCR_Degree = 0.0F;
                                                                            //PJInfo.OCRDegree = 0.0F;
                                                                        }
                                                                        break;
                                                                    case "90":
                                                                        {
                                                                            //HT.Recipe.OCR_Degree = 90.0F;
                                                                            //PJInfo.OCRDegree = 90.0F;
                                                                        }
                                                                        break;
                                                                    case "180":
                                                                        {
                                                                            //HT.Recipe.OCR_Degree = 180.0F;
                                                                            //PJInfo.OCRDegree = 180.0F;
                                                                        }
                                                                        break;
                                                                    case "270":
                                                                        {
                                                                            //HT.Recipe.OCR_Degree = 270.0F;
                                                                            //PJInfo.OCRDegree = 270.0F;
                                                                        }
                                                                        break;
                                                                    default:
                                                                        {
                                                                            //HT.Recipe.Aligner_Degree = (float)int.Parse(ParamValue);
                                                                            //PJInfo.OCRDegree = (float)int.Parse(ParamValue);
                                                                        }
                                                                        break;
                                                                }
                                                                #endregion
                                                            }
                                                            break;
                                                    }
                                                }
                                            }

                                            if (PJInfo.UpOCRDegree > 360.0F || PJInfo.UpOCRDegree < 0.0F || PJInfo.DownOCRDegree > 360.0F || PJInfo.DownOCRDegree < 0.0F)
                                            {
                                                Reply_Message.RootItem.Items[0].ItemNumber = 0;
                                                Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                Reply_Message.RootItem.Items[1].Items[1].Items[0].AsU1 = (uint)8;
                                                Reply_Message.RootItem.Items[1].Items[1].Items[1].AsString = "Degree is wrong";
                                                SECS_Transaction.Secondary = Reply_Message;
                                                SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                return;
                                            }

                                            if (PJInfo.IsAligner == false)
                                            {
                                                if (PJInfo.IsOCRUp || PJInfo.IsOCRDown)
                                                {
                                                    Reply_Message.RootItem.Items[0].ItemNumber = 0;
                                                    Reply_Message.RootItem.Items[1].Items[0].AsBoolean = false;
                                                    Reply_Message.RootItem.Items[1].Items[1].Items[0].AsU1 = (uint)7;
                                                    Reply_Message.RootItem.Items[1].Items[1].Items[1].AsString = "Can not read OCR if you do not find notch";
                                                    SECS_Transaction.Secondary = Reply_Message;
                                                    SecsWrapper1.SendReplyByTransaction(SECS_Transaction);
                                                    return;
                                                }
                                            }

                                            PJInfo.AlignerDegree = 90.0F;

                                            PJList.Add(PJInfo);

                                            #region Joanne 20200330 Add
                                            //for (int PJIDIdx = 0; PJIDIdx < PJInfo.PJID.Length; PJIDIdx++)
                                            //{
                                            //    PJ_Dic.Add(PJInfo.PJID[PJIDIdx], PJInfo);
                                            //}
                                            #endregion

                                            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1} {2}", "PJList Add PJ", "PJList Count =", PJList.Count.ToString()));

                                            for (int i = 0; i < PJInfo.PJID.Length; i++)
                                            {
                                                Reply_Message.RootItem.Items[0].Items[i].AsString = PJInfo.PJID[i];
                                            }

                                            Reply_Message.RootItem.Items[1].Items[0].AsBoolean = true;
                                            SECS_Transaction.Secondary = Reply_Message;
                                            SecsWrapper1.SendReplyByTransaction(SECS_Transaction);

                                            CurrnetRecipe = PJInfo.Recipe;

                                            string PJID_String = "";
                                            for (int i = 0; i < PJInfo.PJID.Length; i++)
                                            {

                                                if (i == PJInfo.PJID.Length - 1)
                                                {
                                                    PJID_String += PJInfo.PJID[i];
                                                }
                                                else
                                                {
                                                    PJID_String += string.Format("{0},", PJInfo.PJID[i]);
                                                }
                                            }

                                            HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ProcessJob_ID, (int)VID_Col.VID_Value, PJID_String);
                                            S6F11((int)CEID_Item.PJPooled);
                                        }


                                    }
                                    #endregion
                                }
                                break;
                        }
                        #endregion
                    }
                    break;
            }
        }

        private void SecsWrapper1_OnSecondaryReceived(KSecsTransaction SECS_Transaction, KSecsMessage SECS_Message, string SECS_SmlTag, bool SECS_IsDefined)
        {
        }
        #endregion

        #region Stream Function
        private void S5F1(string _AlarmID, string _AlarmText)
        {
            #region S5F1
            KSecsMessage SECS_Message = SecsWrapper1.LoadMessage(NormalStatic.S5F1_Messgae);
            SECS_Message.RootItem.Items[0].AsByte = 80;
            SECS_Message.RootItem.Items[1].AsString = _AlarmID;
            SECS_Message.RootItem.Items[2].AsString = _AlarmText;

            SecsWrapper1.SendPrimary(SECS_Message);
            #endregion
        }

        private void S6F11(int _CEIDIndex)
        {
            #region S6F11
            KSecsMessage SECS_Message = SecsWrapper1.LoadMessage("S6F11_Event Report Send");

            HCT_EFEM.ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.VID, ".xls"), ref VID_Excel);    // 更新Excel

            CEID = int.Parse(CEIDData_Excel[_CEIDIndex]);

            RPTID_List = VID_Excel[(int)IDExcelTable.CEID][0][_CEIDIndex, 4].Split(SplitSeparate, StringSplitOptions.None);


            SECS_Message.RootItem.Items[0].AsU2 = (uint)0;       // Data ID
            SECS_Message.RootItem.Items[1].AsU2 = (uint)CEID;    // CEID
            SECS_Message.RootItem.Items[2].ItemNumber = RPTID_List.Length;   // RPTID Count

            KSecsItem RPTID_Items = SECS_Message.RootItem.Items[2].Items[0].Clone();

            for (int RPTID_Index = 0; RPTID_Index < RPTID_List.Length; RPTID_Index++)
            {
                KSecsItem RPTID_Item = RPTID_Items.Clone();

                RPTID_Item.Items[0].AsU2 = (uint)(int.Parse(RPTID_List[RPTID_Index]));

                int RPTID_No = Array.IndexOf(RPTIDData_Excel, RPTID_List[RPTID_Index]);

                if (RPTID_No < 0)
                {
                    return;
                }

                VID_List = VID_Excel[(int)IDExcelTable.RPTID][0][RPTID_No, 3].Split(SplitSeparate, StringSplitOptions.None);

                for (int VID_Index = 0; VID_Index < VID_List.Length; VID_Index++)
                {
                    int VID_No = Array.IndexOf(VIDData_Excel, VID_List[VID_Index]);

                    if (VID_No > 0)
                    {
                        string VID_Value = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 5];
                        DataType = VID_Excel[(int)IDExcelTable.VID][0][VID_No, 3];

                        if (VID_Value != null && DataType != null)
                        {
                            switch (DataType)
                            {
                                case ASCII:
                                    {
                                        RPTID_Item.Items[1].Items[VID_Index].AsString = VID_Value;
                                    }
                                    break;
                                case UINT1:
                                    {
                                        RPTID_Item.Items[1].Items[VID_Index].AsU1 = (uint)(int.Parse(VID_Value));
                                    }
                                    break;
                                case UINT2:
                                    {
                                        RPTID_Item.Items[1].Items[VID_Index].AsU2 = (uint)(int.Parse(VID_Value));
                                    }
                                    break;
                                case UINT4:
                                    {
                                        RPTID_Item.Items[1].Items[VID_Index].AsU4 = (uint)(int.Parse(VID_Value));
                                    }
                                    break;
                                case LIST:
                                    {
                                        switch (VID_No)
                                        {
                                            case (int)VID_Item.WaferInfo:
                                                {
                                                    if (JobEndData.Count == 0)
                                                    {
                                                        RPTID_Item.Items[1].Items[VID_Index].ItemNumber = 0;
                                                    }
                                                    else
                                                    {
                                                        for (int DataIndex = 0; DataIndex < JobEndData.Count; DataIndex++)
                                                        {
                                                            string[] Info = JobEndData[DataIndex].Split(SplitSeparate, StringSplitOptions.None);

                                                            for (int DetailData = 0; DetailData < Info.Length; DetailData++)
                                                            {
                                                                RPTID_Item.Items[1].Items[VID_Index].Items[DataIndex].Items[DetailData].AsString = Info[DetailData];
                                                            }
                                                        }
                                                    }
                                                }
                                                break;
                                            case (int)VID_Item.ProcessJob_ID:
                                                {
                                                    //if (Recipe.PJID_List.Length > 0)
                                                    //{
                                                    //    string[] PJ_Name = VID_Value.Split(SplitSeparate, StringSplitOptions.None);

                                                    //    for (int PJ_No = 0; PJ_No < Recipe.PJID_List.Length; PJ_No++)
                                                    //    {
                                                    //        RPTID_Item.Items[1].Items[VID_Index].Items[PJ_No].AsString = PJ_Name[PJ_No];
                                                    //    }
                                                    //}
                                                    string[] Values = VID_Value.Split(SplitSeparate, StringSplitOptions.None);

                                                    for (int Value_No = 0; Value_No < Values.Length; Value_No++)
                                                    {
                                                        RPTID_Item.Items[1].Items[VID_Index].Items[Value_No].AsString = Values[Value_No];
                                                    }
                                                }
                                                break;
                                            default:
                                                {
                                                    string[] Values = VID_Value.Split(SplitSeparate, StringSplitOptions.None);

                                                    for (int Value_No = 0; Value_No < Values.Length; Value_No++)
                                                    {
                                                        RPTID_Item.Items[1].Items[VID_Index].Items[Value_No].AsU1 = (uint)int.Parse(Values[Value_No]);
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }

                            SECS_Message.RootItem.Items[2].Items[RPTID_Index] = RPTID_Item;
                        }
                    }
                }
            }

            SecsWrapper1.SendPrimary(SECS_Message);
            #endregion
        }
        #endregion

        #region Get/Set
        public bool Ui_SECSMode
        {
            set
            {
                if (InvokeRequired)
                {
                    this.Invoke(new MethodInvoker(delegate() { Ui_SECSMode = value; }));
                    return;
                }

                labSECSMode.BackColor = value ? Color.LightGreen : Color.Red;
                labSECSMode.Text = value ? "OnLine" : "OffLine";
                connect = value;
            }
            get { return connect; }
        }
        #endregion

        #region Method
        private bool CheckIsOMS(int _PortNo)
        {
            if (_PortNo > HCT_EFEM.CassetteCount)
            {
                if (HT.MagazineData[_PortNo - HCT_EFEM.CassetteCount - 1].PortType == MagazinePortType.OMS_In ||
                    HT.MagazineData[_PortNo - HCT_EFEM.CassetteCount - 1].PortType == MagazinePortType.OMS_Out)
                {
                    return true;
                }
            }

            return false;
        }

        private string CheckTransferResult(string _WaferStatus, string _CarrierStatus)
        {
            if (_WaferStatus == "Finish" && _CarrierStatus == "Finish")
            {
                return NormalStatic.TransferResultOK;
            }

            return NormalStatic.TransferResultFail;
        }

        private void Initial_LinkID(IDExcelTable _IDTable)
        {
            switch (_IDTable)
            {
                case IDExcelTable.CEID:
                    {
                        for (int CEID_Idx = 0; CEID_Idx < CEIDData_Excel.Length; CEID_Idx++)
                        {
                            HCT_EFEM.WirteExcel((int)IDExcelTable.CEID, CEID_Idx, (int)CEID_Col.Link_RPTIDs, "");
                        }
                    }
                    break;
                case IDExcelTable.RPTID:
                    {
                        for (int RPTID_Idx = 0; RPTID_Idx < RPTIDData_Excel.Length; RPTID_Idx++)
                        {
                            HCT_EFEM.WirteExcel((int)IDExcelTable.RPTID, RPTID_Idx, (int)RPTID_Col.Link_VIDs, "");
                        }
                    }
                    break;
            }
        }

        private void Refresh_IDList()
        {
            HCT_EFEM.ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.VID, ".xls"), ref VID_Excel);

            CEIDData_Excel = new string[VID_Excel[(int)IDExcelTable.CEID][0].Length / 5];
            RPTIDData_Excel = new string[VID_Excel[(int)IDExcelTable.RPTID][0].Length / 4];
            VIDData_Excel = new string[VID_Excel[(int)IDExcelTable.VID][0].Length / 6];

            for (int CEID_Index = 0; CEID_Index < CEIDData_Excel.Length; CEID_Index++)
            {
                CEIDData_Excel[CEID_Index] = VID_Excel[(int)IDExcelTable.CEID][0][CEID_Index, 2];
            }

            for (int RPTID_Index = 0; RPTID_Index < RPTIDData_Excel.Length; RPTID_Index++)
            {
                RPTIDData_Excel[RPTID_Index] = VID_Excel[(int)IDExcelTable.RPTID][0][RPTID_Index, 2];
            }

            for (int VID_Index = 0; VID_Index < VIDData_Excel.Length; VID_Index++)
            {
                VIDData_Excel[VID_Index] = VID_Excel[(int)IDExcelTable.VID][0][VID_Index, 2];
            }
        }

        private void Add_PortTransferStatus()
        {
            for (int Idx = 0; Idx < PortTransferStatus.Length; Idx++)
            {
                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CST1_PortTransfer + Idx, (int)VID_Col.VID_Value, PortTransferStatus[Idx]);
            }
        }

        private void Add_WaferType()
        {
            for (int Idx = 0; Idx < WaferType.Length; Idx++)
            {
                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.CST1_PortType + Idx, (int)VID_Col.VID_Value, WaferType[Idx]);
            }
        }

        private bool CreatePJ(PJStruct _PJData)
        {
            FunName = "CreatePJ";

            try
            {
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, FunName);
                //IsCJNeedDeQueue = false;
                //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsCJNeedDeQueue Flag = False");

                string[] CurrentPJ = new string[_PJData.PJID.Length];
                CurrentPJ = _PJData.PJID;

                HT.Recipe.AutoMode = _PJData.Recipe;
                HT.Recipe.IsAligner = _PJData.IsAligner;
                HT.Recipe.IsOCR_Down = _PJData.IsOCRDown;
                HT.Recipe.IsOCR_Up = _PJData.IsOCRUp;
                HT.Recipe.IsOCR_Stage = _PJData.IsOCR_Stage;
                HT.Recipe.IsFlip = _PJData.IsFlip;
                HT.Recipe.Aligner_Degree = _PJData.AlignerDegree;

                if (HT.Recipe.IsOCR_Down || HT.Recipe.IsOCR_Up)
                {
                    if (HT.Recipe.IsOCR_Down && HT.Recipe.IsOCR_Up)
                    {
                        HT.Recipe.OCR_Degree = (float)90;
                    }
                    else if (HT.Recipe.IsOCR_Down && HT.Recipe.IsOCR_Up == false)
                    {
                        HT.Recipe.OCR_Degree = _PJData.DownOCRDegree;
                    }
                    else
                    {
                        HT.Recipe.OCR_Degree = _PJData.UpOCRDegree;
                    }
                }
                else 
                {
                    HT.Recipe.OCR_Degree = (float)0;
                }

                int result = 0;

                CarrierActionChange(SQLWaferInforStep.RecipeSetAlignerDegree, "0", ref result);

                RecipeChange();

                string PJID_String = "";

                for (int i = 0; i < CurrentPJ.Length; i++)
                {
                    if (i == CurrentPJ.Length - 1)
                    {
                        PJID_String += CurrentPJ[i];
                    }
                    else
                    {
                        PJID_String += string.Format("{0},", CurrentPJ[i]);
                    }
                }

                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ProcessJob_ID, (int)VID_Col.VID_Value, PJID_String);

                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}{2}", "Create PJ Success", "PJID = ",PJID_String));

                //IsCJNeedDeQueue = true;
                //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsCJNeedDeQueue Flag = True");

                return true;
            }
            catch (Exception Ex)
            {
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0} {1},{2}", FunName, "Fail", Ex.ToString()));
                return false;
            }
        }

        private bool CreateCJ(CJStruct _CJData)
        {
            FunName = "CreateCJ";

            SQLite.Delete(SQLTable.PJ_Pool, "1=1");
            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", FunName, "Delete DB Data"));
            InsertCom = "";

            try
            {
                //Joanne 20201005 Add Start
                int PJIdx = SearchPJ(_CJData.PJID[0]);

                if (PJIdx >= 0)
                {
                    if (!CreatePJ(PJList[PJIdx]))
                    {
                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0} {1}", "CreatePJ", "Fail"));
                        return false;
                    }
                }

                for (int Idx = 0; Idx < _CJData.PJID.Length; Idx++)
                {
                    int i = SearchPJ(_CJData.PJID[Idx]);
                    PJSelected.Add(PJList[i]);
                }
                //Joanne 20201005 Add End
                
                HCT_EFEM.WirteExcel((int)IDExcelTable.VID, (int)VID_Item.ControlJob_ID, (int)VID_Col.VID_Value, _CJData.CJID);

                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}{2}", FunName, "Job Count =", _CJData.TransferJobInfo.Count.ToString()));

                for (int JobNo = 0; JobNo < _CJData.TransferJobInfo.Count; JobNo++)
                {
                    switch (HT.Recipe.AutoMode)
                    {
                        case PJ_Type.Load:
                        case PJ_Type.Unload:
                        case PJ_Type.Sortering:
                            {
                                #region Load/Unload/Sorting Insert Job Into DB
                                InsertCom += string.Format("Insert Into {0} ({1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11}) Values ('{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}');",
                                                    SQLTable.PJ_Pool,
                                                    WaferInforTableItem.CJID,
                                                    WaferInforTableItem.SocPortID,
                                                    WaferInforTableItem.SocPort,
                                                    WaferInforTableItem.SocSlot,
                                                    WaferInforTableItem.SocSlotID_Up,
                                                    WaferInforTableItem.DesPortID,
                                                    WaferInforTableItem.DesPort,
                                                    WaferInforTableItem.DesSlot,
                                                    WaferInforTableItem.DesSlotID,
                                                    WaferInforTableItem.IsOMS,
                                                    WaferInforTableItem.StagePos,
                                                    _CJData.CJID,
                                                    _CJData.TransferJobInfo[JobNo].SourcePortID,
                                                    _CJData.TransferJobInfo[JobNo].SourcePort,
                                                    _CJData.TransferJobInfo[JobNo].SourceSlot,
                                                    _CJData.TransferJobInfo[JobNo].SourceSlotID,
                                                    _CJData.TransferJobInfo[JobNo].DestinationPortID,
                                                    _CJData.TransferJobInfo[JobNo].DestinationPort,
                                                    _CJData.TransferJobInfo[JobNo].DestinationSlot,
                                                    _CJData.TransferJobInfo[JobNo].DestinationSlotID,
                                                    _CJData.TransferJobInfo[JobNo].IsOMS,
                                                    _CJData.TransferJobInfo[JobNo].StageNo
                                                );
                                #endregion
                            }
                            break;
                        case PJ_Type.LoadUnload:
                            {
                                #region Swap Insert Job Into DB
                                InsertCom += string.Format("Insert Into {0} ({1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15}) Values ('{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}','{27}','{28}','{29}','{30}');",
                                                                                                                    SQLTable.PJ_Pool,
                                                                                                                    WaferInforTableItem.CJID,
                                                                                                                    WaferInforTableItem.SocPortID,
                                                                                                                    WaferInforTableItem.SocPort,
                                                                                                                    WaferInforTableItem.SocSlot,
                                                                                                                    WaferInforTableItem.SocSlotID_Up,
                                                                                                                    WaferInforTableItem.DesPortID,
                                                                                                                    WaferInforTableItem.DesPort,
                                                                                                                    WaferInforTableItem.DesSlot,
                                                                                                                    WaferInforTableItem.DesSlotID,
                                                                                                                    WaferInforTableItem.IsOMS,
                                                                                                                    WaferInforTableItem.StagePos,
                                                                                                                    WaferInforTableItem.SwapPortID,
                                                                                                                    WaferInforTableItem.SwapPort,
                                                                                                                    WaferInforTableItem.SwapSlot,
                                                                                                                    WaferInforTableItem.SwapSlotID_Up,
                                                                                                                    _CJData.CJID,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SourcePortID,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SourcePort,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SourceSlot,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SourceSlotID,
                                                                                                                    _CJData.TransferJobInfo[JobNo].DestinationPortID,
                                                                                                                    _CJData.TransferJobInfo[JobNo].DestinationPort,
                                                                                                                    _CJData.TransferJobInfo[JobNo].DestinationSlot,
                                                                                                                    _CJData.TransferJobInfo[JobNo].DestinationSlotID,
                                                                                                                    _CJData.TransferJobInfo[JobNo].IsOMS,
                                                                                                                    _CJData.TransferJobInfo[JobNo].StageNo,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SwapPortID,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SwapPort,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SwapSlot,
                                                                                                                    _CJData.TransferJobInfo[JobNo].SwapSlotID
                                                                                                                );
                                #endregion
                            }
                            break;
                    }
                }

                //Joanne 20210922
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", FunName, InsertCom));

                SQLite.Multi_InsertWaferInfo(InsertCom);
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", FunName, "Insert Job Into DB"));

                IsJobComplete = false;
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsJobComplete Flag = False");

                CJSelected.Add(_CJData);    //Joanne 20201005 Add
                
                return true;
            }
            catch (Exception Ex)
            {
                UI.Alarm(NormalStatic.SECS, ErrorList.SECS_Exception_Error_1031);
                UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0} {1},{2}", FunName, "Fail",Ex.ToString()));
                return false;
            }
        }

        private void ContinueFinish(bool _ContinueFinish)
        {
            if (_ContinueFinish)
            {
                FunName = "ContinueFinish";

                try
                {
                    if (PJList.Count != 0)
                    {
                        string PJ_Use = "";
                        for (int PJIdx = 0; PJIdx < PJList[0].PJID.Length; PJIdx++)
                        {
                            PJ_Use += string.Format("{0}{1}", PJList[0].PJID[PJIdx], NormalStatic.Comma);
                        }

                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", FunName, "Remove PJ", "PJID = ", PJ_Use));
                        PJList.RemoveAt(0);
                    }

                    if (CJList.Count != 0)
                    {
                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1},{2},{3}", FunName, "Remove CJ", "CJID = ", CJList[0].CJID));
                        CJList.RemoveAt(0);
                    }

                    IsPJNeedDeQueue = true;
                    IsJobComplete = true;
                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsJobComplete Flag = True");
                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", FunName, "Finish"));
                }
                catch(Exception Ex)
                {
                    UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0},{1}", FunName, Ex.ToString()));
                }
            }
        }

        public void EFEMInitial()
        {
            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("{0}","Clear PJList and CJList"));
            PJList.Clear();
            CJList.Clear();

            //Joanne 20201005 Add Start
            PJSelected.Clear();
            CJSelected.Clear();
            //Joanne 20201005 Add End


            //IsPJNeedDeQueue = true;   //Joanne 20201005 Disable
            IsCJNeedDeQueue = true; //Joanne 20201005 Add
            IsJobComplete = true;
            UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, "IsJobComplete Flag = True");
        }

        //Joanne 20201005 Add Start
        public int SearchPJ(string PJID)
        {
            for (int PJIdx = 0; PJIdx < PJList.Count; PJIdx++)
            {
                for (int PJIDIdx = 0; PJIDIdx < PJList[PJIdx].PJID.Length; PJIDIdx++)
                {
                    if (PJList[PJIdx].PJID[PJIDIdx] == PJID)
                        return PJIdx;
                }
            }

            return -1;
        }
        //Joanne 20201005 Add End
        #endregion
    }
}
