using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Windows.Forms;
using NPOI.HSSF.UserModel;
using System.Runtime.InteropServices;
using System.IO;

namespace HirataMainControl
{
    public partial class HCT_EFEM : UserControl
    {
        #region TS_Form

        private TS_HCTRobot TS_Robot;
        private TS_HCTCassettePort TS_CassettePort;
        private TS_HCTMagazinerPort TS_MagazinePort;
        private TS_HCTAligner TS_Aligner;
        private TS_HCTStage TS_Stage;
        private TS_HCTOCR TS_OCR;
        private TS_HCTD900 TS_D900;

        #endregion

        #region IO_Obj

        //private IO_Adam6000[] Adam;
        private IO_OCR[] OCR;

        #endregion

        #region Event_Delegate

        public delegate void EFEMEvent(EFEM_DI index, bool Status);//Wayne 20190915
        public event EFEMEvent EFEM_StatusChange;

        /// <summary>
        /// 從PLC取得版本資訊(Walson 20201211)
        /// </summary>
        /// <param name="plc_version"></param>
        public delegate void UpdateEvent(string plc_version);
        public event UpdateEvent Update_PLC_Version;

        //public delegate void Evt_PLC_SetValue(All_Device ref_ADev, PLC_Device ref_dev, int Devno, int val);
        //public event Evt_PLC_SetValue PLC_SetValue;
        //public delegate int Evt_PLC_GetValue(PLC_Device ref_dev, int Devno);
        //public event Evt_PLC_GetValue PLC_GetValue;

        #endregion

        #region BG_Queue

        private Thread CommandBQ ;
        private BackgroundWorker UiUpdateBG = new BackgroundWorker();
        private BlockQueue<CmdStruct> CommandQueue = new BlockQueue<CmdStruct>();

        public BlockQueue<Boolean>[] Robot_RecQueue = new BlockQueue<Boolean>[2];
        public BlockQueue<Boolean> Casstter_RecQueue = new BlockQueue<Boolean>();
        public BlockQueue<Boolean> Magazine_RecQueue = new BlockQueue<Boolean>();
        public BlockQueue<Boolean> Aligner_RecQueue = new BlockQueue<Boolean>();
        public BlockQueue<Boolean>[] Stage_RecQueue = new BlockQueue<Boolean>[2];
        public BlockQueue<Boolean>[] OCR_RecQueue = new BlockQueue<Boolean>[4];
        public BlockQueue<Boolean>[] D900_RecQueue = new BlockQueue<Boolean>[2];

        #endregion

        #region HasTable

        public static HashTable EFEM_HasTable = null;// = new HashTable();

        #endregion

        #region User_Obj

        private HCT_Aligner[] Aligner;
        private HCT_RB[] Robot;
        private HCT_CassettePort[] CP;
        private HCT_Stage[] Stage;
        private HCT_MagazinePort[] MP;
        private CarrierBuffer[] Buffer;
        private HCT_D900[] D900;

        #endregion

        #region ExcelList

        public static List<string[,]>[] ExcelAdmam;
        public static List<string[,]>[] ExcelLogMessage;
        public static List<string[,]>[] ExcelPLC;

        #endregion

        static object Write_Excel = new object();

        public static int RobotCount,
                            AlignerCount,
                            AlignmentCount,
                            MagazineCount,
                            CassetteCount,
                            BufferCount,
                            OCRCount,
                            StageCount,
                            AdamCount,
                            D900Count,
                            ScannerCount;


        //Wayne 20190927 add
        //public static EFEM_MainStatus_Str EFEM_MainStatus = new EFEM_MainStatus_Str();

        CmdStruct EFEM_Data = new CmdStruct();

        #region Initial

        public HCT_EFEM()
        {
            InitializeComponent();

            Robot = new HCT_RB[] { Robot1, Robot2 };
            RobotCount = Robot.Length; 
            HT.RobotData = new RobotInfo[RobotCount];

            CP = new HCT_CassettePort[] { CP1, CP2, CP3, CP4, CP5, CP6, CP7, CP8, CP9, CP10 };
            CassetteCount = CP.Length;
            HT.CassetteData = new CassetteInfo[CassetteCount];

            MP = new HCT_MagazinePort[] { MP1, MP2, MP3, MP4, MP5, MP6, MP7, MP8 };
            MagazineCount = MP.Length;
            HT.MagazineData = new MagazineInfo[MagazineCount];

            Stage = new HCT_Stage[] { Stage1, Stage2 };
            StageCount = Stage.Length;
            HT.StageData = new StageInfo[StageCount];//Wyne 20190919

            Aligner = new HCT_Aligner[] { Aligner1 };
            AlignerCount = Aligner.Length;
            HT.AlignerData = new AlignerInfo[AlignerCount];//Wyne 20190919

            OCR = new IO_OCR[] { OCR1, OCR2, OCR3, OCR4 };
            OCRCount = OCR.Length;

            D900 = new HCT_D900[] { D9001, D9002};
            D900Count = D900.Length;

            Buffer = new CarrierBuffer[] { Buffer1 };
            BufferCount = Buffer.Length;

            EFEM_HasTable = new HashTable();

            try
            {
                ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.Adam, ".xls"), ref ExcelAdmam);
                ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, "LogMessage", ".xls"), ref ExcelLogMessage);
                ReadExcel(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, "PLCAlarm", ".xls"), ref ExcelPLC);
                UI.InitialSystem(NormalStatic.EFEM, NormalStatic.True, ErrorList.MaxCnt);
            }
            catch
            {
                UI.InitialSystem(NormalStatic.EFEM, NormalStatic.False, ErrorList.AP_ExcelError_0384);
            }

        }

        public void Initial()
        {
            int CommandBtn_YLocation = 0;

            #region Robot

            if (RobotCount > 0)
            {
                TS_Robot = new TS_HCTRobot();
                TS_Robot.Initial();
                TS_Robot.btnSend.MouseUp += new System.Windows.Forms.MouseEventHandler(SendRobotCommand_Click);
                Button btnRobot = new Button();
                btnRobot.Location = new Point(0, CommandBtn_YLocation);
                btnRobot.Text = NormalStatic.Robot;
                btnRobot.Height = 25;
                btnRobot.Width = 100;
                btnRobot.Click += new EventHandler(btnRobot_Click);
                pnlButton.Controls.Add(btnRobot);

                for (int i = 0; i < RobotCount; i++)
                {
                    Robot[i].Initial(i);
                    Robot_RecQueue[i] = new BlockQueue<bool>();
                    Robot[i].ActionComplete += new HCT_RB.RobotEvent(RobotEventContol);
                   // Robot[i].MappingDataComplete += new HCT_RB.MappingDataEvent(MappingDataEventContol);   
                    HT.RobotData[i] = new RobotInfo();
                    HT.RobotData[i].RobotInit(i,Robot[i].IniArmCnt);
                }

                CommandBtn_YLocation += 35;
            }

            #endregion

            #region Cassette_Port

            if (CassetteCount > 0)
            {
                TS_CassettePort = new TS_HCTCassettePort();
                TS_CassettePort.Initial();
                TS_CassettePort.btnSend.MouseUp += new System.Windows.Forms.MouseEventHandler(SendCassettePortCommand_Click);
                Button btnCasstterPort = new Button();
                btnCasstterPort.Text = NormalStatic.CstPort;
                btnCasstterPort.Location = new Point(0, CommandBtn_YLocation);
                btnCasstterPort.Height = 25;
                btnCasstterPort.Width = 100;
                btnCasstterPort.Click += new EventHandler(btnCassettePort_Click);
                pnlButton.Controls.Add(btnCasstterPort);

                for (int i = 0; i < CassetteCount; i++)
                {
                    HT.CassetteData[i] = new CassetteInfo();
                    HT.CassetteData[i].CassetteInit(i, 25);
                    CP[i].Initial(i);
                
                }

                CommandBtn_YLocation += 35;
            }

            #endregion

            #region Magazion_Port

            if (MagazineCount > 0)
            {
                TS_MagazinePort = new TS_HCTMagazinerPort();
                TS_MagazinePort.Initial();
                TS_MagazinePort.btnSend.MouseUp += new System.Windows.Forms.MouseEventHandler(SendMagazinePortCommand_Click);
                Button btnMagazinePort = new Button();
                btnMagazinePort.Text = NormalStatic.MagazinePort;
                btnMagazinePort.Location = new Point(0, CommandBtn_YLocation);
                btnMagazinePort.Height = 25;
                btnMagazinePort.Width = 100;
                btnMagazinePort.Click += new EventHandler(btnMagazinePort_Click);
                pnlButton.Controls.Add(btnMagazinePort);

                for (int i = 0; i < MagazineCount; i++)
                {
                    HT.MagazineData[i] = new MagazineInfo();
                    HT.MagazineData[i].MagazineInit(i, 12);
                    MP[i].Initial(i);   
                }
                CommandBtn_YLocation += 35;
            }

            #endregion

            #region Aligner

            if (AlignerCount > 0)
            {
                TS_Aligner = new TS_HCTAligner();
                TS_Aligner.Initial();
                TS_Aligner.btnSend.MouseUp += new System.Windows.Forms.MouseEventHandler(SendAlignerCommand_Click);
                Button btnAligner = new Button();
                btnAligner.Text = NormalStatic.Aligner;
                btnAligner.Location = new Point(0, CommandBtn_YLocation);
                btnAligner.Height = 25;
                btnAligner.Width = 100;
                btnAligner.Click += new EventHandler(btnAligner_Click);
                pnlButton.Controls.Add(btnAligner);

                for (int i = 0; i < AlignerCount; i++)
                {
                    Aligner[i].Initial(ref i);
                    Aligner[i].ActionComplete += new HCT_Aligner.AlignerEvent(AlignerEventContol);

                    //Wayne 20190919
                    HT.AlignerData[i] = new AlignerInfo();
                    HT.AlignerData[i].AlignerInit(i);
                }
                CommandBtn_YLocation += 35;

            }
            #endregion

            #region Stage

            if (StageCount > 0)
            {
                TS_Stage = new TS_HCTStage();
                TS_Stage.Initial();
                TS_Stage.btnSend.MouseUp += new System.Windows.Forms.MouseEventHandler(SendStageCommand_Click);
                Button btnStage = new Button();
                btnStage.Location = new Point(0, CommandBtn_YLocation);
                btnStage.Text = NormalStatic.Stage;
                btnStage.Height = 25;
                btnStage.Width = 100;
                btnStage.Click += new EventHandler(btnStage_Click);//Wayne 20190819
                pnlButton.Controls.Add(btnStage);

                for (int i = 0; i < StageCount; i++)
                {
                    Stage_RecQueue[i] = new BlockQueue<bool>();
                    Stage[i].Initial(i);
                    Stage[i].ActionComplete += new HCT_Stage.StageEvent(StageEventContol);
                    //Wayne 20190919
                    HT.StageData[i] = new StageInfo();
                    HT.StageData[i].StageInit(i);
                }
                CommandBtn_YLocation += 35;
            }

            #endregion

            #region OCR


            if (OCRCount > 0)
            {
                TS_OCR = new TS_HCTOCR();
                TS_OCR.Initial();
                TS_OCR.btnSend.MouseUp += new System.Windows.Forms.MouseEventHandler(SendOCRCommand_Click);
                Button btnOCR = new Button();
                btnOCR.Location = new Point(0, CommandBtn_YLocation);
                btnOCR.Text = NormalStatic.OCRReader;
                btnOCR.Height = 25;
                btnOCR.Width = 100;
                btnOCR.Click += new EventHandler(btnOCR_Click);
                pnlButton.Controls.Add(btnOCR);

                for (int i = 2; i < OCRCount; i++) //Walson
                {
                    OCR_RecQueue[i] = new BlockQueue<bool>();
                    OCR[i].Initial(i);
                    OCR[i].ActionComplete += new IO_OCR.OCREvnet(OCRReaderEventContol);
                }
                CommandBtn_YLocation += 35;
            }
            #endregion

            #region D900

            if(D900Count > 0) 
            {
                TS_D900 = new TS_HCTD900();
                TS_D900.Initial();
                TS_D900.btnSend.MouseUp += new System.Windows.Forms.MouseEventHandler(SendD900Command_Click);
                Button btnD900 = new Button();
                btnD900.Location = new Point(0, CommandBtn_YLocation);
                btnD900.Text = NormalStatic.D900;
                btnD900.Height = 25;
                btnD900.Width = 100;
                btnD900.Click += new EventHandler(btnD900_Click);
                pnlButton.Controls.Add(btnD900);

                for (int i = 0; i < D900Count; i++) 
                {
                    D900_RecQueue[i] = new BlockQueue<bool>();
                    D900[i].Initial(i);
                    D900[i].ActionComplete += new HCT_D900.D900Event(D900EventContol);
                }
                CommandBtn_YLocation += 35;
            }

            #endregion

            #region Buffer

            Buffer[0].Initial(0);

            #endregion

            #region Adam

            IO_Monitor.Initial();
            IO_Monitor.EvnetDIChange += new IO_EFEM.DiChangeEvent(EfemDiChange);

            #endregion

            #region BG

            //CommandBQ.DoWork += new DoWorkEventHandler(this.EFEM_Command_DoWork);
            //CommandBQ.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.EFEM_Command_Completed);
            //CommandBQ.RunWorkerAsync(); 
           // EFEM_Command_DoWork();

            UiUpdateBG = new BackgroundWorker();
            UiUpdateBG.DoWork += new DoWorkEventHandler(Dowork_UiUpdate);
            UiUpdateBG.WorkerReportsProgress = true;
            UiUpdateBG.ProgressChanged += new ProgressChangedEventHandler(PC_UiUpdateBG);
			
            UiUpdateBG.RunWorkerAsync();
            CommandBQ = new Thread(EFEM_Command_DoWork);
            CommandBQ.Start();
            CommandBQ.IsBackground = true;
            #endregion

            PLC.Plc_CmdSend(All_Device.PLCInterface, PLC_Device.B, (int)PLC_B.Is_Remote, 0);// Walson 20210323

            //PowerOnDeviceInitial();
        }

        #endregion

        ErrorList Error;
        string ErrorMsg;

        #region BG
        CmdStruct QueuedData;

        private void EFEM_Command_DoWork()
        {
            string[] parameter = new string[1];

            bool WorkFlog = false;
            
        
            while (true)
            {
                QueuedData = (CmdStruct)CommandQueue.DeQueue();

                WorkFlog = false;
                Error = ErrorList.MaxCnt;
                ErrorMsg = "";

                if (QueuedData.command == SocketCommand.MaxCnt)
                    break;

                if (QueuedData.Parameter != null)
                {
                    parameter = QueuedData.Parameter.Split(new string[] { NormalStatic.Comma }, StringSplitOptions.RemoveEmptyEntries);
                }

                switch (QueuedData.obj)
                {
                    case NormalStatic.Robot:
                        {
                            #region Robot

                            switch (QueuedData.command)
                            {
                                case SocketCommand.ResetError:
                                    {
                                        WorkFlog = RobotResetError(QueuedData.port);
                                    }
                                    break;

                                case SocketCommand.Stop:
                                    {
                                        WorkFlog = RobotStop(QueuedData.port);
                                    }
                                    break;

                                case SocketCommand.ReStart:
                                    {
                                        WorkFlog = RobotRestart(QueuedData.port);
                                    }
                                    break;

                             
                                case SocketCommand.Home:
                                    {
                                        WorkFlog = RobotHome(QueuedData.port);
                                    }
                                    break;

                                case SocketCommand.Initial:
                                    {
                                        WorkFlog = RobotInitial(QueuedData.port);
                                    }
                                    break;

                                case SocketCommand.InitialHome:
                                    {
                                        WorkFlog = RobotInitialHome(QueuedData.port);
                                    }
                                    break;

                                case SocketCommand.SetRobotSpeed:
                                    {
                                        WorkFlog = RobotSetSpeed(QueuedData.port, int.Parse(parameter[0]));
                                    }
                                    break;

                                case SocketCommand.EdgeGripOff:
                                case SocketCommand.BernoulliOff:
                                case SocketCommand.VacuumOff:
                                case SocketCommand.BernoulliOn:
                                case SocketCommand.EdgeGripOn:
                                case SocketCommand.VacuumOn:
                                    {
                                        WorkFlog = RobotSetArm(QueuedData.port, bool.Parse(parameter[0]), QueuedData.command);
                                    }
                                    break;

                                case SocketCommand.ArmSafetyPosition:
                                case SocketCommand.CheckWaferPresence:
                                case SocketCommand.ReadPosition:
                                case SocketCommand.CheckArmOnSafetyPos:
                                case SocketCommand.GetStatus:
                                    {
                                        WorkFlog = RobotGetCommand(QueuedData.command, QueuedData.port);
                                    }
                                    break;

                                case SocketCommand.GetRobotMappingResult:
                                case SocketCommand.GetRobotMappingResult2:
                                case SocketCommand.GetRobotMappingErrorResult:
                                case SocketCommand.GetRobotMappingErrorResult2:
                                    {
                                        WorkFlog = RobotGetMappingCommand(QueuedData.command, QueuedData.port, QueuedData.Parameter);
                                    }
                                    break;
                                case SocketCommand.RobotMapping:
                                    {
                                        WorkFlog = RobotMapping(QueuedData.port, parameter[0]);
                                    }
                                    break;

                                case SocketCommand.GetStandby:
                                case SocketCommand.WaferGet:
                                case SocketCommand.PutStandby:
                                case SocketCommand.WaferPut:
                                case SocketCommand.TopGetStandby:
                                case SocketCommand.TopWaferGet:
                                case SocketCommand.TopWaferPut:
                                case SocketCommand.TopPutStandby:
                                    {
                                        WorkFlog = RobotWaferGPT(QueuedData.port, bool.Parse(parameter[0]), parameter[1], int.Parse(parameter[2]), QueuedData.command);
                                    }
                                    break;

                                case SocketCommand.Move_OCRReadPosition:
                                    {
                                        WorkFlog = RobotWaferOCR(QueuedData.port, bool.Parse(parameter[0]), parameter[1], int.Parse(parameter[2]), QueuedData.command);
                                    }
                                    break;

                                default:
                                    {
                                        Error = ErrorList.RB_CaseDefault_0314;
                                    }
                                    break;                     
                            }

                            if (QueuedData.Core == true)
                                Robot_RecQueue[QueuedData.port].EnQueue(WorkFlog);
                            #endregion
                        }
                        break;

                    case NormalStatic.CstPort:
                        {
                            #region CP

                            switch (QueuedData.command)
                            {

                                case SocketCommand.ResetError:
                                    {
                                        WorkFlog = CP_ResetError();
                                    }
                                    break;

                                case SocketCommand.Home:
                                case SocketCommand.Load:
                                case SocketCommand.InDoorOpen:
                                case SocketCommand.Unload:
                                    {
                                        WorkFlog = CP_InDoorMoveCommand();
                                    }
                                    break;

                                case SocketCommand.OutDoorOpen:
                                case SocketCommand.OutDoorClose:
                                    {
                                        WorkFlog = CP_OutDoorMoveCommand();
                                    }
                                    break;

                                case SocketCommand.Reloading: // 20201109 Walson 用SECS指令來觸發Magazine Load動作
                                    {
                                        WorkFlog = CP_OutDoorMoveCommand();
                                    }
                                    break;

                                default:
                                    {
                                        Error = ErrorList.RB_CaseDefault_0314;
                                    }
                                    break;
                            }

                            if (QueuedData.Core == true)
                                Casstter_RecQueue.EnQueue(WorkFlog);

                            #endregion
                        }
                        break;

                    case NormalStatic.MagazinePort:
                        {
                            #region MP

                            switch (QueuedData.command)
                            {
                                case SocketCommand.ResetError:
                                    {
                                        WorkFlog = MP_ResetError();
                                    }
                                    break;

                                case SocketCommand.Home:
                                case SocketCommand.Load:
                                case SocketCommand.InDoorOpen:
                                case SocketCommand.Unload:
                                    {
                                        WorkFlog = MP_InDoorMoveCommand();
                                    }
                                    break;

                                case SocketCommand.Reloading: // 20201109 Walson 用SECS指令來觸發Magazine Load動作
                                    {
                                        WorkFlog = MP_ReloadingCommand();
                                    }
                                    break;

                                case SocketCommand.OutDoorOpen:
                                case SocketCommand.OutDoorClose:
                                    {
                                        WorkFlog = MP_OutDoorMoveCommand();
                                    }
                                    break;

                                default:
                                    {
                                        Error = ErrorList.RB_CaseDefault_0314;
                                    }
                                    break;
                            }

                            if (QueuedData.Core == true)
                                Magazine_RecQueue.EnQueue(WorkFlog);

                            #endregion
                        }
                        break;

                    case NormalStatic.Aligner:
                        {
                            #region Aligner

                            switch (QueuedData.command)
                            {
                                case SocketCommand.Initial:
                                    {
                                        WorkFlog = AlignerInitial();
                                    }
                                    break;

                                case SocketCommand.ResetError:
                                    {
                                        WorkFlog = AlignerNotLockMethod();
                                    }
                                    break;

                     
                                case SocketCommand.Home:
                                case SocketCommand.InitialHome:
                                case SocketCommand.LiftPinUp:
                                case SocketCommand.LiftPinDown:
                                case SocketCommand.CycleHomeCheckDegree:
                                case SocketCommand.CycleAlignmentOCR:
                                case SocketCommand.CycleAlignmentFinish:
                                case SocketCommand.Alignment:
                                case SocketCommand.FindNotch:
                                case SocketCommand.ToAngle:
                                    {
                                        WorkFlog = AlignerMoveMethod();
                                    }
                                    break;
                                
                                case SocketCommand.GetStatus:
                                case SocketCommand.GetIDReaderDegree:
                                case SocketCommand.GetAlignerDegree:
                                case SocketCommand.GetAlignerWaferType:
                                    {
                                        WorkFlog = AlignerGetMethod();
                                    }
                                    break;

                                case SocketCommand.AlignerVacuum:
                                case SocketCommand.SetIDReaderDegree:
                                case SocketCommand.SetAlignerWaferType:
                                case SocketCommand.SetAlignerDegree:

                                    {
                                        WorkFlog = AlignerSetMethod();
                                    }
                                    break;
                            }

                            if (QueuedData.Core == true)
                                Aligner_RecQueue.EnQueue(WorkFlog);

                            #endregion
                        }
                        break;

                    case NormalStatic.Stage:
                        {
                            #region Stage

                            switch (QueuedData.command)
                            {

                                case SocketCommand.ResetError:
                                    {
                                        WorkFlog=StageResetError();
                                    }
                                    break;

                                case SocketCommand.Mix:
                                    {
                                        WorkFlog = StageMix();
                                    }
                                    break;

                                case SocketCommand.Separation:
                                    {
                                        WorkFlog = StageSeparater();
                                    }
                                    break;

                                case SocketCommand.Clamp:
                                case SocketCommand.Home:
                                    {
                                        WorkFlog = StageHome();
                                    }
                                    break;

                                case SocketCommand.Get_Carrier_Wafer:
                                    {
                                        WorkFlog = StageGetCarrierWafer();
                                    }
                                    break;

                                case SocketCommand.Put_Carrier_Wafer:
                                    {
                                        WorkFlog = StagePutCarrierWafer();
                                    }
                                    break;

                                case SocketCommand.Get_Wafer_Wafer:
                                    {
                                        WorkFlog = StageGetWaferWafer();
                                    }
                                    break;

                                case SocketCommand.Put_Wafer_Wafer:
                                    {
                                        WorkFlog = StagePutWaferWafer();
                                    }
                                    break;
                            }

                            if (QueuedData.Core == true)
                                Stage_RecQueue[QueuedData.port].EnQueue(WorkFlog);

                            #endregion
                        }
                        break;

                    case NormalStatic.OCRReader:
                        {
                            #region OCRReader

                            switch (QueuedData.command)
                            {
                                case SocketCommand.Read:
                                case SocketCommand.Connect:
                                    {
                                        WorkFlog = OCRNormalCommand();
                                    }
                                    break;

                            }
                            if (QueuedData.Core == true)
                                OCR_RecQueue[QueuedData.port].EnQueue(WorkFlog);

                            #endregion
                        }
                        break;

                    case NormalStatic.D900:
                        {
                            #region OCRReader

                            switch (QueuedData.command)
                            {
                                case SocketCommand.Read:
                                    {
                                        WorkFlog = D900Command();
                                    }
                                    break;

                            }
                            if (QueuedData.Core == true)
                                D900_RecQueue[QueuedData.port].EnQueue(WorkFlog);

                            #endregion
                        }
                        break;
                }

                if (Error != ErrorList.MaxCnt)
                    UI.Alarm(string.Format("{0}{1}", QueuedData.obj, QueuedData.port + 1), Error, ErrorMsg);


            }
        }

        public void Command_EnQueue(CmdStruct queue)
        {
            if (InvokeRequired)
                queue.Core = true;
            else
                queue.Core = false;

            CommandQueue.EnQueue(queue);
        }

        #endregion

        #region PLC Status UI

        private void Dowork_UiUpdate(object obj, DoWorkEventArgs e) 
        {
            while (true) 
            {
                if (PLC.PLCRead == false) 
                {
                    continue;
                }
			   		
			    Thread.Sleep(20);

                if (HT.EFEM.Close_Count <= 1)
                    break;

                UiUpdateBG.ReportProgress(0);

            }
        }

        private void PC_UiUpdateBG(object obj, ProgressChangedEventArgs e)
        { 
            string Status = "";
            //frmMain.CalTimeStart();
            bool[] bolFlag = new bool[16];

            int YH, YL,MH,ML,DH, DL;


            #region CP

            for (int DeviceNo = 0; DeviceNo < CP.Length; DeviceNo++)
            {
                Status = Convert.ToString(PLC.W[(int)PLC_W.CstStatusStart + DeviceNo], 2).PadLeft(16, '0');

                #region UI

                bolFlag[(int)PortDi.Ready] = Status[(int)PortDi.Ready] == '1' ? true : false;
                bolFlag[(int)PortDi.PLC_Busy] = Status[(int)PortDi.PLC_Busy] == '1' ? true : false;
                bolFlag[(int)PortDi.Alarm] = Status[(int)PortDi.Alarm] == '1' ? true : false;
                bolFlag[(int)PortDi.Presence] = Status[(int)PortDi.Presence] == '1' ? true : false; 
                bolFlag[(int)PortDi.OutOpen] = Status[(int)PortDi.OutOpen] == '1' ? true : false;
                bolFlag[(int)PortDi.InOpen] = Status[(int)PortDi.InOpen] == '1' ? true : false; 
                bolFlag[(int)PortDi.OutClose] = Status[(int)PortDi.OutClose] == '1' ? true : false;  
                bolFlag[(int)PortDi.InClose] = Status[(int)PortDi.InClose] == '1' ? true : false; 
                bolFlag[(int)PortDi.Gratina] = Status[(int)PortDi.Gratina] == '0' ? true : false;
                bolFlag[(int)PortDi.Protrude] = Status[(int)PortDi.Protrude] == '0' ? true : false;

                if (CP[DeviceNo].Ui_Ready != bolFlag[(int)PortDi.Ready])
                {
                    CP[DeviceNo].Ui_Ready = bolFlag[(int)PortDi.Ready];

                    // Joanne 20200507 Add
                    //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("CP{0} Ready = {1}", DeviceNo + 1, bolFlag[(int)PortDi.Ready]));
                    UI.Log(NormalStatic.CstPort, string.Format("{0}{1}", "CP", DeviceNo + 1), SystemList.DiReceive, string.Format("{0} = {1}", "Ready", bolFlag[(int)PortDi.Ready]));
                }
                if (CP[DeviceNo].PLC_Busy != bolFlag[(int)PortDi.PLC_Busy])
                {
                    CP[DeviceNo].PLC_Busy = bolFlag[(int)PortDi.PLC_Busy];

                    // Joanne 20200507 Add
                    //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("CP{0} Busy = {1}", DeviceNo + 1, bolFlag[(int)PortDi.PLC_Busy]));
                    UI.Log(NormalStatic.CstPort, string.Format("{0}{1}", "CP", DeviceNo + 1), SystemList.DiReceive, string.Format("{0} = {1}", "Busy", bolFlag[(int)PortDi.PLC_Busy]));
                }
                if (CP[DeviceNo].Ui_Alarm != bolFlag[(int)PortDi.Alarm])
                {
                    CP[DeviceNo].Ui_Alarm = bolFlag[(int)PortDi.Alarm];
                }
                if (CP[DeviceNo].Ui_Presence != bolFlag[(int)PortDi.Presence])
                {
                    CP[DeviceNo].Ui_Presence = bolFlag[(int)PortDi.Presence];
                    UI.Log(NormalStatic.CstPort, string.Format("{0}{1}", NormalStatic.CstPort, DeviceNo + 1), SystemList.DiReceive, bolFlag[(int)PortDi.Presence].ToString());
                }
                if (CP[DeviceNo].Ui_Gratina != bolFlag[(int)PortDi.Gratina])
                {
                    CP[DeviceNo].Ui_Gratina = bolFlag[(int)PortDi.Gratina];
                }
                if (CP[DeviceNo].Ui_Protrude != bolFlag[(int)PortDi.Protrude])
                {
                    CP[DeviceNo].Ui_Protrude = bolFlag[(int)PortDi.Protrude];
                }

                if (CP[DeviceNo].Ui_Invasion != PLC.B[(int)PLC_B.CSTInvasionStart + DeviceNo])
                {
                    CP[DeviceNo].Ui_Invasion = PLC.B[(int)PLC_B.CSTInvasionStart + DeviceNo];
                }


	            #endregion

                #region Door

                if (bolFlag[(int)PortDi.OutOpen] && bolFlag[(int)PortDi.OutClose] == false && CP[DeviceNo].Ui_OutDoor != IOLPDoor.Open)
                { 
                    CP[DeviceNo].Ui_OutDoor = IOLPDoor.Open;
                    UI.Log(NormalStatic.CstPort, string.Format("{0}{1}", NormalStatic.CstPort, DeviceNo + 1), SystemList.DiReceive, PortDi.OutOpen.ToString());
                }
                else if (bolFlag[(int)PortDi.OutClose] && bolFlag[(int)PortDi.OutOpen] == false && CP[DeviceNo].Ui_OutDoor != IOLPDoor.Close)
                {
                    CP[DeviceNo].Ui_OutDoor = IOLPDoor.Close;
                    UI.Log(NormalStatic.CstPort, string.Format("{0}{1}", NormalStatic.CstPort, DeviceNo + 1), SystemList.DiReceive, PortDi.OutClose.ToString());
                }
                else if (bolFlag[(int)PortDi.OutClose] == false && bolFlag[(int)PortDi.OutOpen] == false && CP[DeviceNo].Ui_OutDoor != IOLPDoor.Unknown)
                {
                    CP[DeviceNo].Ui_OutDoor = IOLPDoor.Unknown;
                    UI.Log(NormalStatic.CstPort, string.Format("{0}{1}", NormalStatic.CstPort, DeviceNo + 1), SystemList.DiReceive, IOLPDoor.Unknown.ToString());
                }

                if (bolFlag[(int)PortDi.InOpen] && bolFlag[(int)PortDi.InClose] == false && CP[DeviceNo].Ui_InDoor != IOLPDoor.Open)
                    CP[DeviceNo].Ui_InDoor = IOLPDoor.Open;
                else if (bolFlag[(int)PortDi.InClose] && bolFlag[(int)PortDi.InOpen] == false && CP[DeviceNo].Ui_InDoor != IOLPDoor.Close)
                    CP[DeviceNo].Ui_InDoor = IOLPDoor.Close;
                else if (bolFlag[(int)PortDi.InOpen] == false && bolFlag[(int)PortDi.InClose] == false && CP[DeviceNo].Ui_InDoor != IOLPDoor.Unknown)
                    CP[DeviceNo].Ui_InDoor = IOLPDoor.Unknown;
 
                #endregion

                #region RFID

                //if (HT.EFEM.Status == EFEMStatus.Ready_Now && CP[DeviceNo].Ui_Presence == true)
                //{
                //    string RFIDstr = "";
                //    for (int RFIDStart = 0; RFIDStart < 20; RFIDStart++)
                //    {
                //        if (PLC.W[(int)PLC_W.CstRFIDStart + RFIDStart] == 0)
                //        {
                //            break;
                //        }
                //        string RFIDWord = PLC.W[(int)PLC_W.CstRFIDStart + RFIDStart].ToString("X").PadLeft(4, '0');
                //        int W_HighBtye = Convert.ToInt32(string.Format("{0}{1}", RFIDWord[0], RFIDWord[1]), 16);
                //        int W_LowBtye = Convert.ToInt32(string.Format("{0}{1}", RFIDWord[2], RFIDWord[3]), 16);
                //        RFIDstr += (char)W_HighBtye;
                //        RFIDstr += (char)W_LowBtye;
                //        CP[DeviceNo].Ui_Barcode = RFIDstr;
                //    }
                //}
                //else if (HT.EFEM.Status == EFEMStatus.Ready_Now && CP[DeviceNo].Ui_Presence == false)
                //{
                //    CP[DeviceNo].Ui_Barcode = "";
                //} 

                #endregion

                //Joanne 20200624 Add
                if (CP[DeviceNo].Ui_Process != PLC.B[(int)PLC_B.CSTProcess + DeviceNo])
                {
                    CP[DeviceNo].Ui_Process = PLC.B[(int)PLC_B.CSTProcess + DeviceNo];
                }
            }

            #endregion

            #region MP

            for (int DeviceNo = 0; DeviceNo < MP.Length; DeviceNo++)
            {
                Status = Convert.ToString(PLC.W[(int)PLC_W.MagStatusStrat + DeviceNo], 2).PadLeft(16, '0');

                #region UI

                bolFlag[(int)PortDi.Ready] = Status[(int)PortDi.Ready] == '1' ? true : false;
                bolFlag[(int)PortDi.PLC_Busy] = Status[(int)PortDi.PLC_Busy] == '1' ? true : false;
                bolFlag[(int)PortDi.Alarm] = Status[(int)PortDi.Alarm] == '1' ? true : false;
                bolFlag[(int)PortDi.Presence] = Status[(int)PortDi.Presence] == '1' ? true : false;
                bolFlag[(int)PortDi.OutOpen] = Status[(int)PortDi.OutOpen] == '1' ? true : false;
                bolFlag[(int)PortDi.InOpen] = Status[(int)PortDi.InOpen] == '1' ? true : false;
                bolFlag[(int)PortDi.OutClose] = Status[(int)PortDi.OutClose] == '1' ? true : false;
                bolFlag[(int)PortDi.InClose] = Status[(int)PortDi.InClose] == '1' ? true : false;
                bolFlag[(int)PortDi.Gratina] = Status[(int)PortDi.Gratina] == '0' ? true : false;
                bolFlag[(int)PortDi.Protrude] = Status[(int)PortDi.Protrude] == '0' ? true : false;

                if (MP[DeviceNo].Ui_Ready != bolFlag[(int)PortDi.Ready])
                {
                    MP[DeviceNo].Ui_Ready = bolFlag[(int)PortDi.Ready];

                    // Joanne 20200507 Add
                    //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("MP{0} Ready = {1}", DeviceNo + 1, bolFlag[(int)PortDi.Ready]));
                    UI.Log(NormalStatic.MagazinePort, string.Format("{0}{1}", "MP", DeviceNo + 1), SystemList.DiReceive, string.Format("{0} = {1}", "Ready", bolFlag[(int)PortDi.Ready]));
                }
                if (MP[DeviceNo].PLC_Busy != bolFlag[(int)PortDi.PLC_Busy])
                {
                    MP[DeviceNo].PLC_Busy = bolFlag[(int)PortDi.PLC_Busy];

                    // Joanne 20200507 Add
                    //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("MP{0} Busy = {1}", DeviceNo + 1, bolFlag[(int)PortDi.PLC_Busy]));
                    UI.Log(NormalStatic.MagazinePort, string.Format("{0}{1}", "MP", DeviceNo + 1), SystemList.DiReceive, string.Format("{0} = {1}", "Busy", bolFlag[(int)PortDi.PLC_Busy]));
                }
                if (MP[DeviceNo].Ui_Alarm != bolFlag[(int)PortDi.Alarm])
                {
                    MP[DeviceNo].Ui_Alarm = bolFlag[(int)PortDi.Alarm];
                }
                if (MP[DeviceNo].Ui_Presence != bolFlag[(int)PortDi.Presence])
                {
                    MP[DeviceNo].Ui_Presence = bolFlag[(int)PortDi.Presence];
                    UI.Log(NormalStatic.MagazinePort, string.Format("{0}{1}", NormalStatic.MagazinePort, DeviceNo + 1), SystemList.DiReceive, bolFlag[(int)PortDi.Presence].ToString());
                }

                if (MP[DeviceNo].Ui_Gratina != bolFlag[(int)PortDi.Gratina])
                {
                    MP[DeviceNo].Ui_Gratina = bolFlag[(int)PortDi.Gratina];
                }
                if (MP[DeviceNo].Ui_Protrude != bolFlag[(int)PortDi.Protrude])
                {
                    MP[DeviceNo].Ui_Protrude = bolFlag[(int)PortDi.Protrude];
                }
                if (MP[DeviceNo].Ui_Invasion != PLC.B[(int)PLC_B.MagInvasionStart + DeviceNo])
                {
                    MP[DeviceNo].Ui_Invasion = PLC.B[(int)PLC_B.MagInvasionStart + DeviceNo];
                }

                #endregion

                #region Door

                if (bolFlag[(int)PortDi.OutOpen] && bolFlag[(int)PortDi.OutClose] == false && MP[DeviceNo].Ui_OutDoor != IOLPDoor.Open)
                {
                    MP[DeviceNo].Ui_OutDoor = IOLPDoor.Open;
                    UI.Log(NormalStatic.MagazinePort, string.Format("{0}{1}", NormalStatic.MagazinePort, DeviceNo + 1), SystemList.DiReceive, PortDi.OutOpen.ToString());
                }
                else if (bolFlag[(int)PortDi.OutClose] && bolFlag[(int)PortDi.OutOpen] == false && MP[DeviceNo].Ui_OutDoor != IOLPDoor.Close)
                {
                    MP[DeviceNo].Ui_OutDoor = IOLPDoor.Close;
                    UI.Log(NormalStatic.MagazinePort, string.Format("{0}{1}", NormalStatic.MagazinePort, DeviceNo + 1), SystemList.DiReceive, PortDi.OutClose.ToString());
                }
                else if (bolFlag[(int)PortDi.OutClose] == false && bolFlag[(int)PortDi.OutOpen] == false && MP[DeviceNo].Ui_OutDoor != IOLPDoor.Unknown)
                {
                    MP[DeviceNo].Ui_OutDoor = IOLPDoor.Unknown;
                    UI.Log(NormalStatic.MagazinePort, string.Format("{0}{1}", NormalStatic.MagazinePort, DeviceNo + 1), SystemList.DiReceive, IOLPDoor.Unknown.ToString());

                }
                if (bolFlag[(int)PortDi.InOpen] && bolFlag[(int)PortDi.InClose] == false && MP[DeviceNo].Ui_InDoor != IOLPDoor.Open)
                    MP[DeviceNo].Ui_InDoor = IOLPDoor.Open;
                else if (bolFlag[(int)PortDi.InClose] && bolFlag[(int)PortDi.InOpen] == false && MP[DeviceNo].Ui_InDoor != IOLPDoor.Close)
                    MP[DeviceNo].Ui_InDoor = IOLPDoor.Close;
                else if (bolFlag[(int)PortDi.InOpen] == false && bolFlag[(int)PortDi.InClose] == false && MP[DeviceNo].Ui_InDoor != IOLPDoor.Unknown)
                    MP[DeviceNo].Ui_InDoor = IOLPDoor.Unknown;

                #endregion

                #region RFID

                if (MP[DeviceNo].Ui_Presence == true)
                {
                    string RFIDstr = "";
                    int W_HighBtye = 0;
                    for (int RFIDStart = 0; RFIDStart < 20; RFIDStart++)
                    {
                        if (PLC.W[(int)PLC_W.MagRFIDStart + (DeviceNo*20) + RFIDStart] == 0)
                        {
                            break;
                        }
                        string RFIDWord = PLC.W[(int)PLC_W.MagRFIDStart + (DeviceNo * 20) + RFIDStart].ToString("X").PadLeft(4, '0');

                        if (string.Format("{0}{1}", RFIDWord[0], RFIDWord[1]) != "00")
                        {
                             W_HighBtye = Convert.ToInt32(string.Format("{0}{1}", RFIDWord[0], RFIDWord[1]), 16);
                        }

                        int W_LowBtye = Convert.ToInt32(string.Format("{0}{1}", RFIDWord[2], RFIDWord[3]), 16);

                        RFIDstr += (char)W_LowBtye;

                        if (string.Format("{0}{1}", RFIDWord[0], RFIDWord[1]) != "00")
                        {
                            RFIDstr += (char)W_HighBtye;
                        }
                       
                    }
                    if (MP[DeviceNo].Ui_Barcode != RFIDstr)
                    {
                        MP[DeviceNo].Ui_Barcode = RFIDstr;
                        HT.MagazineData[DeviceNo].ID = MP[DeviceNo].Ui_Barcode;
                    }
                }
                else
                {
                    if (MP[DeviceNo].Ui_Barcode != "")
                    {
                        MP[DeviceNo].Ui_Barcode = "";
                        HT.MagazineData[DeviceNo].ID = MP[DeviceNo].Ui_Barcode;
                    }
                } 

                #endregion

                //Joanne 20200624 Add
                if (MP[DeviceNo].Ui_Process != PLC.B[(int)PLC_B.MagProcess + DeviceNo])
                {
                    MP[DeviceNo].Ui_Process = PLC.B[(int)PLC_B.MagProcess + DeviceNo];
                }
            }

            #endregion

            #region Other
            //侵入
            #region Invasion 

            if (Stage[0].Ui_WaferSideInvade != PLC.B[(int)PLC_B.Stage1WaferInvasion])
            {
                Stage[0].Ui_WaferSideInvade = PLC.B[(int)PLC_B.Stage1WaferInvasion];
            }
            if(Stage[0].Ui_CarrierSideInvade != PLC.B[(int)PLC_B.Stage1CarrierInvasion])
            {
                Stage[0].Ui_CarrierSideInvade = PLC.B[(int)PLC_B.Stage1CarrierInvasion];
            }
            if( Stage[1].Ui_WaferSideInvade != PLC.B[(int)PLC_B.Stage2WaferInvasion])
            {
                Stage[1].Ui_WaferSideInvade = PLC.B[(int)PLC_B.Stage2WaferInvasion];
            }
            if (Stage[1].Ui_CarrierSideInvade != PLC.B[(int)PLC_B.Stage2CarrierInvasion])
            {
                Stage[1].Ui_CarrierSideInvade = PLC.B[(int)PLC_B.Stage2CarrierInvasion];
            }
            #endregion

            #region Aligner

            Status = Convert.ToString(PLC.W[(int)PLC_W.AlignerStatus], 2).PadLeft(16, '0');

            #region UI

            bolFlag[(int)AlignerDi.PinUp] = Status[(int)AlignerDi.PinUp] == '1' ? true : false;
            bolFlag[(int)AlignerDi.PinDown] = Status[(int)AlignerDi.PinDown] == '1' ? true : false;
            bolFlag[(int)AlignerDi.Protrude] = Status[(int)AlignerDi.Protrude] == '1' ? true : false; 
            bolFlag[(int)AlignerDi.Presence] = Status[(int)AlignerDi.Presence] == '0' ? true : false;

            if (Aligner[0].Ui_WaferProtrude != bolFlag[(int)AlignerDi.Protrude])
            {
                Aligner[0].Ui_WaferProtrude = bolFlag[(int)AlignerDi.Protrude];
            }

            if (Aligner[0].Ui_Presence != (bolFlag[(int)AlignerDi.Presence] == true ? WaferStatus.With : WaferStatus.WithOut))
            {
                Aligner[0].Ui_Presence = (bolFlag[(int)AlignerDi.Presence] == true ? WaferStatus.With : WaferStatus.WithOut);
                UI.Log(NormalStatic.Aligner, string.Format("{0}{1}", "Aligner", 1), SystemList.DiReceive, string.Format("{0} = {1}", "Present", bolFlag[(int)AlignerDi.Presence]));

            }
            #endregion

            #region LiftPiu

            if (bolFlag[(int)AlignerDi.PinUp] && bolFlag[(int)AlignerDi.PinDown] == false && Aligner[0].Ui_LiftPin != LiftPinEnum.Up)
                Aligner[0].Ui_LiftPin = LiftPinEnum.Up;
            else if (bolFlag[(int)AlignerDi.PinDown] && bolFlag[(int)AlignerDi.PinUp] == false && Aligner[0].Ui_LiftPin != LiftPinEnum.Down)
                Aligner[0].Ui_LiftPin = LiftPinEnum.Down;
            else if (bolFlag[(int)AlignerDi.PinDown] == false && bolFlag[(int)AlignerDi.PinUp] == false && Aligner[0].Ui_LiftPin != LiftPinEnum.Unknown)
                Aligner[0].Ui_LiftPin = LiftPinEnum.Unknown;
 
            #endregion

            #endregion

            #region Stage

            for (int DeviceNo = 0; DeviceNo < Stage.Length; DeviceNo++)
            {
                Status = Convert.ToString(PLC.W[DeviceNo + (int)PLC_W.Stage1Status], 2).PadLeft(16, '0');

                bolFlag[(int)StageDi.Ready] = Status[(int)StageDi.Ready] == '1' ? true : false;
                bolFlag[(int)StageDi.PLC_StageBusy] = Status[(int)StageDi.PLC_StageBusy] == '1' ? true : false;
                bolFlag[(int)StageDi.Alarm] = Status[(int)StageDi.Alarm] == '1' ? true : false;
                bolFlag[(int)StageDi.WaferPresence] = Status[(int)StageDi.WaferPresence] == '1' ? true : false;
                bolFlag[(int)StageDi.CarrierWaferPresence] = Status[(int)StageDi.CarrierWaferPresence] == '1' ? true : false;
                bolFlag[(int)StageDi.CarrierPresence] = Status[(int)StageDi.CarrierPresence] == '1' ? true : false;
                bolFlag[(int)StageDi.RobotWaferPresence] = Status[(int)StageDi.RobotWaferPresence] == '1' ? true : false;
                bolFlag[(int)StageDi.CarrierrProtrude] = Status[(int)StageDi.CarrierrProtrude] == '1' ? true : false;
                bolFlag[(int)StageDi.WaferProtrude] = Status[(int)StageDi.WaferProtrude] == '1' ? true : false;
                bolFlag[(int)StageDi.CarrierAvailable] = Status[(int)StageDi.CarrierAvailable] == '1' ? true : false;
                bolFlag[(int)StageDi.WaferAvailable] = Status[(int)StageDi.WaferAvailable] == '1' ? true : false;


                if (Stage[DeviceNo].Ui_Ready != bolFlag[(int)StageDi.Ready])
                {
                    Stage[DeviceNo].Ui_Ready = bolFlag[(int)StageDi.Ready];

                    // Joanne 20200507 Add
                    //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Stage{0} Ready = {1}", DeviceNo + 1, bolFlag[(int)StageDi.Ready]));
                    UI.Log(NormalStatic.Stage, string.Format("{0}{1}", "Stage", DeviceNo + 1), SystemList.DiReceive, string.Format("{0} = {1}", "Ready", bolFlag[(int)StageDi.Ready]));
                }
                //Wayne Pass 20210624 , Test Busy status change to bit
                //if (Stage[DeviceNo].Ui_StageBusy != bolFlag[(int)StageDi.PLC_StageBusy])
                //{
                //    Stage[DeviceNo].Ui_StageBusy = bolFlag[(int)StageDi.PLC_StageBusy];

                //    // Joanne 20200507 Add
                //    //UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Stage{0} Busy = {1}", DeviceNo + 1, bolFlag[(int)StageDi.PLC_StageBusy]));
                //    UI.Log(NormalStatic.Stage, string.Format("{0}{1}", "Stage", DeviceNo + 1), SystemList.DiReceive, string.Format("{0} = {1}", "Busy", bolFlag[(int)StageDi.PLC_StageBusy]));
                //}
                if (Stage[DeviceNo].Ui_StageBusy != PLC.B[(int)PLC_B.Stage_Busy + DeviceNo])
                {
                    Stage[DeviceNo].Ui_StageBusy = PLC.B[(int)PLC_B.Stage_Busy + DeviceNo];
                    UI.Log(NormalStatic.Stage, string.Format("{0}{1}", "Stage", DeviceNo + 1), SystemList.DiReceive, string.Format("{0} = {1}", "Busy", PLC.B[(int)PLC_B.Stage_Busy + DeviceNo]));
                }

                if (Stage[DeviceNo].Ui_Alarm != bolFlag[(int)StageDi.Alarm])
                {
                    Stage[DeviceNo].Ui_Alarm = bolFlag[(int)StageDi.Alarm];
                }

                if (bolFlag[(int)StageDi.WaferPresence] && Stage[DeviceNo].Ui_WaferPresence != WaferStatus.With)
                {
                    UI.Log(NormalStatic.Stage, string.Format("{0}{1}", NormalStatic.Stage, DeviceNo + 1), SystemList.DeviceReceive, string.Format("Wafer {0}", WaferStatus.With));
                    Stage[DeviceNo].Ui_WaferPresence = WaferStatus.With;          
                }
                else if (bolFlag[(int)StageDi.WaferPresence] == false && Stage[DeviceNo].Ui_WaferPresence != WaferStatus.WithOut)
                {
                    UI.Log(NormalStatic.Stage, string.Format("{0}{1}", NormalStatic.Stage, DeviceNo + 1), SystemList.DeviceReceive, string.Format("Wafer {0}", WaferStatus.WithOut));
                    Stage[DeviceNo].Ui_WaferPresence = WaferStatus.WithOut;
                }

                if (bolFlag[(int)StageDi.CarrierWaferPresence] && Stage[DeviceNo].Ui_CarrierWaferPresence != WaferStatus.With)
                {
                    UI.Log(NormalStatic.Stage, string.Format("{0}{1}", NormalStatic.Stage, DeviceNo + 1), SystemList.DeviceReceive, string.Format("CarrierWafer {0}", WaferStatus.With));
                    Stage[DeviceNo].Ui_CarrierWaferPresence = WaferStatus.With;
                }
                else if (bolFlag[(int)StageDi.CarrierWaferPresence] == false && Stage[DeviceNo].Ui_CarrierWaferPresence != WaferStatus.WithOut)
                {
                    UI.Log(NormalStatic.Stage, string.Format("{0}{1}", NormalStatic.Stage, DeviceNo + 1), SystemList.DeviceReceive, string.Format("CarrierWafer {0}", WaferStatus.WithOut));
                    Stage[DeviceNo].Ui_CarrierWaferPresence = WaferStatus.WithOut;
                }

                if (bolFlag[(int)StageDi.CarrierPresence] && Stage[DeviceNo].Ui_CarrierPresence != WaferStatus.With)
                    Stage[DeviceNo].Ui_CarrierPresence = WaferStatus.With;
                else if (bolFlag[(int)StageDi.CarrierPresence] == false && Stage[DeviceNo].Ui_CarrierPresence != WaferStatus.WithOut)
                    Stage[DeviceNo].Ui_CarrierPresence = WaferStatus.WithOut;

                if (bolFlag[(int)StageDi.RobotWaferPresence] && Stage[DeviceNo].Ui_RobotWaferPresence != WaferStatus.With)
                    Stage[DeviceNo].Ui_RobotWaferPresence = WaferStatus.With;
                else if (bolFlag[(int)StageDi.RobotWaferPresence] == false && Stage[DeviceNo].Ui_RobotWaferPresence != WaferStatus.WithOut)
                    Stage[DeviceNo].Ui_RobotWaferPresence = WaferStatus.WithOut;

                if (bolFlag[(int)StageDi.CarrierrProtrude] != Stage[DeviceNo].Ui_CarrieSideProtrude)
                    Stage[DeviceNo].Ui_CarrieSideProtrude = bolFlag[(int)StageDi.CarrierrProtrude];

                if (bolFlag[(int)StageDi.WaferProtrude] != Stage[DeviceNo].Ui_WaferSideProtrude)
                    Stage[DeviceNo].Ui_WaferSideProtrude = bolFlag[(int)StageDi.WaferProtrude];

                if (bolFlag[(int)StageDi.CarrierAvailable] != Stage[DeviceNo].Ui_CarrieAvailable)
                    Stage[DeviceNo].Ui_CarrieAvailable = bolFlag[(int)StageDi.CarrierAvailable];

                if (bolFlag[(int)StageDi.WaferAvailable] != Stage[DeviceNo].Ui_WaferAvailable)
                    Stage[DeviceNo].Ui_WaferAvailable = bolFlag[(int)StageDi.WaferAvailable];
            }

            #endregion

            #region Buffer

            Status = Convert.ToString(PLC.W[(int)PLC_W.BufferStart], 2).PadLeft(16, '0');

            for (int i = 0; i < 5; i++)
                Buffer[0].SetSlotData(int.Parse(Status[15 - i].ToString()), i + 1);

            #endregion

            #region EFEM

            #region IO

            Status = Convert.ToString(PLC.W[(int)PLC_W.MainStatus], 2).PadLeft(16, '0');
            for (int i = 0; i < (int)EFEM_DI.MaxCnt; i++)
            {
                HT.EFEM.PLC_EFEM_Status[i]= (Status[15 - i] == '1') ? true : false;

                IO_Monitor.Update_DI((EFEM_DI)i, (Status[15 - i] == '1') ? true : false);
            }

            #endregion

            #region FFU

            Status = Convert.ToString(PLC.W[(int)PLC_W.FFUAlarm], 2).PadLeft(16, '0');

            for (int i = 0; i < (int)EFEM_FFU.MaxCnt; i++)
            {
                bool temp = (Status[15 - i] == '1') ? true : false;

                if (HT.EFEM.FFUAlarm[i] != temp)
                {
                    HT.EFEM.FFUAlarm[i] = temp;
                    if (HT.EFEM.FFUAlarm[i])
                    {
                        UI.Alarm(string.Format("{0}{1}", EFEM_FFU.FFU, i + 1), ErrorList.EF_FFU_1104);
                    }
                }
            } 

            #endregion

            #region PSW

            string psw_Str = Convert.ToString(Math.Round((decimal)PLC.W[(int)PLC_W.PSW] / 10, 1, MidpointRounding.AwayFromZero));
            if (psw_Str != HT.EFEM.EFEM_PSW_Pa)
            {
                HT.EFEM.EFEM_PSW_Pa = psw_Str;
            }

            #endregion

            #endregion

            #region 在UI顯示PLC程式版本(年-月-日)

            YH = PLC.W[(int)PLC_W.Version + 12] / 256;
            YL = PLC.W[(int)PLC_W.Version + 12] % 256;
            MH = PLC.W[(int)PLC_W.Version + 13] / 256;
            ML = PLC.W[(int)PLC_W.Version + 13] % 256;
            DH = PLC.W[(int)PLC_W.Version + 14] / 256;
            DL = PLC.W[(int)PLC_W.Version + 14] % 256;

            Status = string.Format("430-{0}{1}-{2}{3}-{4}{5}",
                Convert.ToChar(YH), Convert.ToChar(YL),
                Convert.ToChar(MH), Convert.ToChar(ML),
                Convert.ToChar(DH), Convert.ToChar(DL)
                );
            
            if (HT.PlcVersion != Status && Update_PLC_Version.Target != null) 
            {
                Update_PLC_Version(Status);
            }

            #endregion

            #endregion

            //frmMain.CalTimeEnd();
        }

        private void Update_CP_IniData(UpdateItem item, int port)
        {
            switch (item)
            {
                case UpdateItem.Presence:
                    {
                        //if(HT.CassetteData[port].Initial_Presence != CP[port].Ui_Presence )
                        //{
                        //    UI.Alarm(CP_Device(port),ErrorList.AP_IniError_0383);
                        //    HT.CassetteData[port].Initial_Presence = CP[port].Ui_Presence ;
                        //}

                        //HT.CassetteData[port].SetPresence(port,CP[port].Ui_Presence);
                    }
                    break;

                case UpdateItem.Data:
                    {
                
                    }
                    break;
            }
        }

        private void Update_MP_IniData(UpdateItem item, int port)
        {
            switch (item)
            {
                case UpdateItem.Presence:
                    {
                        //if (HT.MagazineData[port].Initial_Presence != MP[port].Ui_Presence)
                        //{
                        //    UI.Alarm(MP_Device(port), ErrorList.AP_IniError_0383);
                        //    HT.MagazineData[port].Initial_Presence = MP[port].Ui_Presence;
                        //}

                        //HT.MagazineData[port].SetPresence(port, MP[port].Ui_Presence);
                    }
                    break;

                case UpdateItem.Barcode:
                    {
                        //if (HT.MagazineData[port].Initial_ID != MP[port].Ui_Barcode)
                        //{
                        //    UI.Alarm(MP_Device(port), ErrorList.AP_IniError_0383);
                        //    HT.MagazineData[port].Initial_ID = MP[port].Ui_Barcode;
                        //}

                        //HT.MagazineData[port].SetID(port, MP[port].Ui_Barcode);
                    }
                    break;

                case UpdateItem.Data:
                    {

                    }
                    break;
            }
        }

        #endregion

        #region EFEM_Close

        public void Close()
        {
            //for (int i = 0; i < AdamCount; i++)
            //    Adam[i].Close();

            for (int i = 0; i < RobotCount; i++)
                Robot[i].Close();

            for (int i = 0; i < CassetteCount; i++)
                CP[i].Close();

            for (int i = 0; i < MagazineCount; i++)
                MP[i].Close();

            for (int i = 0; i < AlignerCount; i++)
                Aligner[i].Close();

            for (int i = 0; i < OCRCount; i++)
                OCR[i].Close();

            for (int i = 0; i < StageCount; i++)
                Stage[i].Close();

            //UI.CloseBG(NormalStatic.PLC);

            EFEM_Data.command = SocketCommand.MaxCnt;

            Command_EnQueue(EFEM_Data);

        }

        #endregion

        #region Method

        public bool Ready
        {
            get
            {
                bool ready = true;

                for (int i = 0; i < AlignerCount; i++)
                {
                    ready &= Aligner[i].Ui_Connect;
                }

                for (int i = 0; i < RobotCount; i++)
                {
                    ready &= Robot[i].Ui_Connect;
                    ready &= Robot[i].Ui_Remote;
                }

                for (int i = 0; i < AdamCount; i++)
                {
                    //ready &= Adam[i].Ui_Connect;
                }

                for (int i = 0; i < StageCount; i++)
                {
                    //ready &= Stage[i].Ui_Connect;
                }
                ready &= PLC.ST_Conn;

                return ready;
            }
        }

        public bool CheckEFEMStatus()
        {
            if (!Ready)
            {
                UI.Alarm(NormalStatic.EFEM, ErrorList.AP_SocketError_0382);
                return false;
            }

            for (int i = 0; i < HCT_EFEM.RobotCount; i++)
            {
                if (RobotBusy(0))
                {
                    UI.Alarm(Robot[i].DeviceName, ErrorList.DeviceIsBusy_0301);
                    return false;
                }

            }

            for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
            {
                if (CP_Busy(i))
                {
                    UI.Alarm(CP[i].DeviceName, ErrorList.DeviceIsBusy_0301);
                    return false;
                }
            }

            for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
            {
                if (MP_Busy(i))
                {
                    UI.Alarm(MP[i].DeviceName, ErrorList.DeviceIsBusy_0301);
                    return false;
                }
            }

            for (int i = 0; i < HCT_EFEM.StageCount; i++)
            {
                if (StageBusy(i))
                {
                    UI.Alarm(Stage[i].DeviceName, ErrorList.DeviceIsBusy_0301);
                    return false;
                }

                if(StageWaferAvailable(i) == false)
                {
                    UI.Alarm(Stage[i].DeviceName, ErrorList.SG_WaferAvailableOff_0550);
                    return false;
                }

                if (StageCarrierAvailable(i) == false)
                {
                    UI.Alarm(Stage[i].DeviceName, ErrorList.SG_CarrierAvailableOff_0551);
                    return false;
                }
            }

            if (AlignerBusy(0))
            {
                UI.Alarm(Aligner[0].DeviceName, ErrorList.DeviceIsBusy_0301);
                return false;
            }

         
            return true;
        }

        #endregion

        #region Robot

        #region Public

        public string RobotDevice(int Index) { return Robot[Index].DeviceName; }
        public bool RobotBusy(int Index) { return Robot[Index].Ui_Busy; }
        public WaferStatus Robot_ArmPresence(int Index, bool arm) { return arm ? Robot[Index].Ui_UpperWaferPresent : Robot[Index].Ui_LowerWaferPresent; }
        public string Robot_GetStatus(int Index) { return Robot[Index].Ui_Status; }
        public ArmStatus Robot_ArmExtend(int Index, bool arm) { return arm ? Robot[Index].Ui_ArmStatusX : Robot[Index].Ui_ArmStatusY; }
        public ArmStatus Robot_ArmTurn(int Index) { return Robot[Index].Ui_ArmStatusR; }    
        public RobotPosition Robot_NowPosition(int Index) { return Robot[Index].Ui_RobotPos; }

        public void Robot_SetInfo(int Index, int arm )  // Walson20201124修改
        {

            string info = "";

            if (Index == 0) // Wafer Robot
            {
                if (HT.Recipe.AutoMode == PJ_Type.Load || HT.Recipe.AutoMode == PJ_Type.Sortering) // Load Flow UI顯示: CP/MP
                    info = string.Format("{0},{1}/{2},{3}", HT.RobotData[Index].WaferData[arm].SocPort, HT.RobotData[Index].WaferData[arm].SocSlot, HT.RobotData[Index].WaferData[arm].DesPort, HT.RobotData[Index].WaferData[arm].DesSlot);
                else if (HT.Recipe.AutoMode == PJ_Type.Unload)  // Unload Flow UI顯示: MP/CP
                    info = string.Format("{2},{3}/{0},{1}", HT.RobotData[Index].WaferData[arm].SocPort, HT.RobotData[Index].WaferData[arm].SocSlot, HT.RobotData[Index].WaferData[arm].DesPort, HT.RobotData[Index].WaferData[arm].DesSlot);
            }

            else // Carrier Robot
            {
                if (HT.RobotData[Index].CarrierData[arm].SocPort.Contains(NormalStatic.MagazinePort))
                {
                    //取放片為OMS
                    if (HT.Recipe.AutoMode == PJ_Type.Load) // Load Flow UI顯示: OMS-In/MP
                        info = string.Format("(OMS){0},{1}/{2},{3}", HT.RobotData[Index].CarrierData[arm].SocPort, HT.RobotData[Index].CarrierData[arm].SocSlot, HT.RobotData[Index].CarrierData[arm].DesPort, HT.RobotData[Index].CarrierData[arm].DesSlot);
                    else if (HT.Recipe.AutoMode == PJ_Type.Unload)  // Unload Flow UI顯示: MP/OMS-Out
                        info = string.Format("(OMS){2},{3}/{0},{1}", HT.RobotData[Index].CarrierData[arm].SocPort, HT.RobotData[Index].CarrierData[arm].SocSlot, HT.RobotData[Index].CarrierData[arm].DesPort, HT.RobotData[Index].CarrierData[arm].DesSlot);
                }
                else
                {
                    //取放片目標並非OMS時
                    if (HT.Recipe.AutoMode == PJ_Type.Load) // Load Flow UI顯示: CP/MP
                        info = string.Format("{0},{1}/{2},{3}", HT.RobotData[Index].WaferData[arm].SocPort, HT.RobotData[Index].WaferData[arm].SocSlot, HT.RobotData[Index].CarrierData[arm].DesPort, HT.RobotData[Index].CarrierData[arm].DesSlot);
                    else if (HT.Recipe.AutoMode == PJ_Type.Unload)  // Unload Flow UI顯示: MP/CP
                        info = string.Format("{2},{3}/{0},{1}", HT.RobotData[Index].WaferData[arm].SocPort, HT.RobotData[Index].WaferData[arm].SocSlot, HT.RobotData[Index].CarrierData[arm].DesPort, HT.RobotData[Index].CarrierData[arm].DesSlot);
                }
            }

            if (info == ",0/,0")
                info = "";

            if (arm == 0)
                Robot[Index].Ui_LowerWaferInfo = info;
            else
                Robot[Index].Ui_UpperWaferInfo = info;
        }



        public void Robot_RetryCount(int index,int value) 
        {
            Robot[index].Retry_Count = value;
        }

        #endregion

        #region Event

        private void RobotEventContol(string Reply, bool Result, string PortName)
        {
            string[] token = Reply.Split(',');
            SocketCommand RobotAction = (SocketCommand)Enum.Parse(typeof(SocketCommand), token[0]);
            string dest = token[2];
            string slot = token[3];
            int arm = int.Parse(token[1]);
            int port;
            int Index = Convert.ToInt16(PortName.Substring(NormalStatic.Robot.Length, 1)) - 1;
            bool GetFinish = false;
            bool PutFinish = false;
            UI.Log(NormalStatic.Robot, string.Format("{0}{1}", NormalStatic.Robot, Index + 1), SystemList.CommandComplete, string.Format("{0}:({1})({2})({3})({4})", RobotAction, Result, arm, dest, slot));

            #region 取放片完成後檢查是否有凸片


            if (dest.Contains(NormalStatic.CstPort)) 
            {

	            if(RobotAction == SocketCommand.WaferGet
	             || RobotAction == SocketCommand.WaferPut)
	                Thread.Sleep(200);

                int idx = int.Parse(dest.Substring(NormalStatic.CstPort.Length)) - 1;
                if (CP[idx].Ui_Protrude)
                    UI.Alarm(PortName, ErrorList.LP_ProtrudeIsTrue_053B);
            }
            if (dest.Contains(NormalStatic.MagazinePort))
            {

	            if(RobotAction == SocketCommand.WaferGet
	             || RobotAction == SocketCommand.WaferPut)
	                Thread.Sleep(200);

                int idx = int.Parse(dest.Substring(NormalStatic.MagazinePort.Length)) - 1;
                if (MP[idx].Ui_Protrude)
                    UI.Alarm(PortName, ErrorList.LP_ProtrudeIsTrue_053B);
            }

            #endregion


            if (Result)
            {
                switch (RobotAction)
                {
                    case SocketCommand.Initial:
                        {
                            Robot[Index].Ui_Connect = true;
                            UI.InitialSystem(Robot[Index].DeviceName, NormalStatic.True, ErrorList.MaxCnt);
                        }
                        break;
                      
                    case SocketCommand.Home:
                    case SocketCommand.InitialHome:
                        {
                            switch (Index)
                            {
                                case 0:
                                    {
                                        for (int i = 0; i < CassetteCount; i++)
                                            CP[i].Ui_Busy = false;

                                        for (int i = 0; i < AlignerCount; i++)
                                            Aligner[i].Ui_Busy = false;

                                        for (int i = 0; i < StageCount; i++)
                                            Stage[i].Ui_Busy = false;
                                    }
                                    break;

                                case 1:
                                    {
                                        for (int i = 0; i < MagazineCount; i++)
                                            MP[i].Ui_Busy = false;
                                    }
                                    break;

                            }

                            if(RobotAction == SocketCommand.Home)
                            {
                                if(Robot[Index].NowNeedHomeChangeData == true)
                                {
                                    UI.Log(NormalStatic.Robot, string.Format("{0}{1}", NormalStatic.Robot, Index + 1), SystemList.CommandParameter,string.Format("{0},{1}",Robot[Index].NowNeedHomeChangeData,Robot[Index].NowGPTCommandType));
                                    switch(Robot[Index].NowGPTCommandType)
                                    {
                                        case RobotGPT.Get:
                                        case RobotGPT.TopGet:
                                            {
                                                GetFinish = true;
                                                PutFinish = false;
                                            }
                                            break;

                                        case RobotGPT.Put:
                                        case RobotGPT.TopPut:
                                            {
                                                GetFinish = false;
                                                PutFinish = true;
                                            }
                                            break;
                                    }

                                    Robot[Index].NowNeedHomeChangeData = false;
                                }
                            }
                        }
                        break;

                    case SocketCommand.WaferGet:
                    case SocketCommand.TopWaferGet:
                        {
                            GetFinish = true;
                            PutFinish = false;
                        }
                        break;

                    case SocketCommand.WaferPut:
                    case SocketCommand.TopWaferPut:
                        {
                            #region End_Status

                            GetFinish = false;
                            PutFinish = true;

                            #endregion
                        }
                        break;

                    case SocketCommand.GetStandby:
                    case SocketCommand.PutStandby:
                    case SocketCommand.TopGetStandby:
                    case SocketCommand.TopPutStandby:
                        {
                            if (dest.IndexOf(NormalStatic.CstPort) == 0)
                            {
                                port = Convert.ToInt16(dest.Substring(NormalStatic.CstPort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;
                                CP[port].Ui_Busy = false;
                            }
                            else if (dest.IndexOf(NormalStatic.MagazinePort) == 0)
                            {
                                port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;
                                MP[port].Ui_Busy = false;
                            }
                            else if (dest.IndexOf(NormalStatic.Aligner) == 0)
                            {
                                port = Convert.ToInt16(dest.Substring(NormalStatic.Aligner.Length, 1)) - 1;
                                Aligner[port].Ui_Busy = false;
                            }
                            else if (dest.IndexOf(NormalStatic.Stage) == 0)
                            {
                                port = Convert.ToInt16(dest.Substring(NormalStatic.Stage.Length, 1)) - 1;
                                //Stage[port].Ui_Busy = false;
                            }
                        }
                        break;

                    case SocketCommand.RobotMapping:
                        {
                            dest = token[2];
                            int SlotCount;
                            string SlotPresent;
                            string SlotError;
                            switch (Index)
                            {
                                case 1:
                                    {
                                        if (HT.JobEnd_MappingFlag == true) // C-> M Finish ,Do Mapping
                                        {
                                            port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;
                                            SlotCount = MP[port].GetSlotData.Length + 1;
                                            SlotPresent = token[3].PadLeft(SlotCount, '0');
                                            SlotError = token[4].PadLeft(SlotCount, '0');
                                            UI.Log(NormalStatic.Robot, string.Format("{0}{1}", NormalStatic.Robot, Index + 1), SystemList.CommandParameter, string.Format("C -> M Mapping , (25-1)Present:({0})-Error:({1}))", SlotPresent, SlotError));
                                            bool CheckAlarm = false;
                                            int[] SlotInfo = MP[port].GetSlotData;

                                            for (int i = 0; i < SlotCount - 1; i++)
                                            {
                                                if (SlotError[SlotCount - i - 2] == '1')
                                                {
                                                    CheckAlarm = true;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (SlotPresent[SlotCount - i - 2].ToString() != SlotInfo[i].ToString())
                                                    {
                                                        CheckAlarm = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            MP[port].Ui_Busy = false;
                                            HT.JobEnd_MappingFlag = false;

                                            if (CheckAlarm)
                                            {
                                                HT.JobEnd_MappingAlarm = true;
                                                UI.Alarm("Robot2", ErrorList.Load_JobFinish_Mapping_Alarm_1030);
                                            }
                                        }
                                        else if (HT.continueFlag == true)   //Wayne 20210922
                                        {
                                            port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;
                                            SlotCount = MP[port].GetSlotData.Length + 1;
                                            SlotPresent = token[3].PadLeft(SlotCount, '0');
                                            SlotError = token[4].PadLeft(SlotCount, '0');
                                            UI.Log(NormalStatic.Robot, string.Format("{0}{1}", NormalStatic.Robot, Index + 1), SystemList.CommandParameter, string.Format("Continue Mapping , (25-1)Present:({0})-Error:({1}))", SlotPresent, SlotError));
                                            MP[port].Ui_Busy = false;
                                            MP[port].NeedMapping = false;
                                        }
                                        else
                                        {
                                            port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;
                                            SlotCount = MP[port].GetSlotData.Length + 1;
                                            SlotPresent = token[3].PadLeft(SlotCount, '0');
                                            SlotError = token[4].PadLeft(SlotCount, '0');
                                            UI.Log(NormalStatic.Robot, string.Format("{0}{1}", NormalStatic.Robot, Index + 1), SystemList.CommandParameter, string.Format("(25-1)Present:({0})-Error:({1}))", SlotPresent, SlotError));

                                            for (int i = 0; i < SlotCount - 1; i++)
                                            {
                                                int data = 0;

                                                // 20201122 Walson
                                                HT.MagazineData[port].CarrierData[i].Clear();
                                                HT.MagazineData[port].WaferData[i].Clear();


                                                if (SlotError[SlotCount - i - 2] == '1')
                                                {
                                                    data = 2;
                                                    HT.MagazineData[port].Carrier[i].Status = WaferStatus.Cross;
                                                    HT.MagazineData[port].SetCarrier(port, i);
                                                    HT.MagazineData[port].Wafer[i].clear();
                                                    HT.MagazineData[port].SetWafer(port, i);

                                                    //Joanne 20201011 Add Start
                                                    HT.MagazineData[port].CarrierData[i].Status = WaferStatus.Cross;
                                                    HT.MagazineData[port].SetCarrierData(port, i);
                                                    HT.MagazineData[port].WaferData[i].Clear();
                                                    HT.MagazineData[port].SetWaferData(port, i);
                                                    //Joanne 20201011 Add End
                                                }
                                                else
                                                {
                                                    if (SlotPresent[SlotCount - i - 2] == '1')
                                                    {
                                                        data = 1;
                                                        HT.MagazineData[port].Carrier[i].Status = WaferStatus.With;
                                                        HT.MagazineData[port].CarrierData[i].Status = WaferStatus.With; //Joanne 20201011 Add
                                                    }
                                                    else
                                                    {
                                                        data = 0;
                                                        HT.MagazineData[port].Carrier[i].clear();
                                                        HT.MagazineData[port].CarrierData[i].Clear();    //Joanne 20201011 Add
                                                    }

                                                    HT.MagazineData[port].SetCarrier(port, i);
                                                    HT.MagazineData[port].Wafer[i].clear();
                                                    HT.MagazineData[port].SetWafer(port, i);

                                                    //Walson 20201118 修改
                                                    //HT.MagazineData[port].CarrierData[i].SocPort = string.Format("{0}{1}", NormalStatic.MagazinePort, port + 1);
                                                    //HT.MagazineData[port].CarrierData[i].SocSlot = i + 1;

                                                    HT.MagazineData[port].SetCarrierData(port, i);
                                                    HT.MagazineData[port].WaferData[i].Clear();
                                                    HT.MagazineData[port].SetWaferData(port, i);
                                                    //Joanne 20201011 Add End
                                                }

                                                MP[port].SetSlotData(data, i);
                                            }

                                            MP[port].Ui_Busy = false;
                                            MP[port].NeedMapping = false;

                                            UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.SlotMapResult_WaitingForHost, (port + 1 + HCT_EFEM.CassetteCount).ToString());
                                        }
                                    }
                                    break;

                                case 0:
                                    {
                                        if (HT.continueFlag == true)   //Wayne 20210922
                                        {
                                            port = Convert.ToInt16(dest.Substring(NormalStatic.CstPort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;
                                            SlotCount = CP[port].GetSlotData.Length;
                                            SlotPresent = token[3].PadLeft(SlotCount, '0');
                                            SlotError = token[4].PadLeft(SlotCount, '0');
                                            UI.Log(NormalStatic.Robot, string.Format("{0}{1}", NormalStatic.Robot, Index + 1), SystemList.CommandParameter, string.Format("Continue Mapping , (25-1)Present:({0})-Error:({1}))", SlotPresent, SlotError));
                                            CP[port].Ui_Busy = false;
                                            CP[port].NeedMapping = false;
                                        }
                                        else
                                        {
                                            port = Convert.ToInt16(dest.Substring(NormalStatic.CstPort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;
                                            SlotCount = CP[port].GetSlotData.Length;
                                            SlotPresent = token[3].PadLeft(SlotCount, '0');
                                            SlotError = token[4].PadLeft(SlotCount, '0');
                                            UI.Log(NormalStatic.Robot, string.Format("{0}{1}", NormalStatic.Robot, Index + 1), SystemList.CommandParameter, string.Format("(25-1)Present:({0})-Error:({1}))", SlotPresent, SlotError));

                                            for (int i = 0; i < SlotCount; i++)
                                            {
                                                int data = 0;

                                                HT.CassetteData[port].WaferData[i].Clear(); //20201122 Walson

                                                if (SlotError[SlotCount - i - 1] == '1')
                                                {
                                                    data = 2;
                                                    HT.CassetteData[port].Wafer[i].Status = WaferStatus.Cross;
                                                    HT.CassetteData[port].WaferData[i].Status = WaferStatus.Cross;  //Joanne 20201011 Add
                                                }
                                                else
                                                {
                                                    if (SlotPresent[SlotCount - i - 1] == '1')
                                                    {
                                                        data = 1;
                                                        HT.CassetteData[port].Wafer[i].Status = WaferStatus.With;
                                                        HT.CassetteData[port].WaferData[i].Status = WaferStatus.With;   //Joanne 20201011 Add
                                                    }
                                                    else
                                                    {
                                                        data = 0;
                                                        HT.CassetteData[port].Wafer[i].clear();
                                                        HT.CassetteData[port].WaferData[i].Clear();
                                                    }
                                                }

                                                HT.CassetteData[port].SetWafer(port, i);
                                                HT.CassetteData[port].SetWaferData(port, i);    //Joanne 20201011 Add
                                                CP[port].SetSlotData(data, i);
                                            }

                                            CP[port].Ui_Busy = false;
                                            CP[port].NeedMapping = false;

                                            UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.SlotMapResult_WaitingForHost, (port + 1).ToString());
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                }

                #region Get
                if (GetFinish)
                {
                    if (dest.IndexOf(NormalStatic.CstPort) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.CstPort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;
                        HT.Converte(ref HT.CassetteData[port].Wafer[int.Parse(slot) - 1], ref HT.RobotData[Index].Wafer[arm]);
                        CP[port].SetSlotData((int)WaferStatus.WithOut, int.Parse(slot) - 1);

                        //Joanne 20201011 Add Start
                        HT.DataConverte(ref HT.CassetteData[port].WaferData[int.Parse(slot) - 1], ref HT.RobotData[Index].WaferData[arm]);
                        HT.CassetteData[port].SetWaferData(port, int.Parse(slot) - 1);
                        //Joanne 20201011 Add End

                        HT.CassetteData[port].SetWafer(port, int.Parse(slot) - 1);
                        CP[port].Ui_Busy = false;
                    }
                    else if (dest.IndexOf(NormalStatic.MagazinePort) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;
                        HT.Converte(ref HT.MagazineData[port].Carrier[int.Parse(slot) - 2], ref HT.RobotData[Index].Wafer[arm]);
                        HT.MagazineData[port].SetCarrier(port, int.Parse(slot) - 2);
                        MP[port].SetSlotData((int)WaferStatus.WithOut, int.Parse(slot) - 2);

                        //Joanne 20201011 Add Start
                        HT.DataConverte(ref HT.MagazineData[port].CarrierData[int.Parse(slot) - 2], ref HT.RobotData[Index].CarrierData[arm]);
                        HT.DataConverte(ref HT.MagazineData[port].WaferData[int.Parse(slot) - 2], ref HT.RobotData[Index].WaferData[arm]);
                        HT.MagazineData[port].SetCarrierData(port, int.Parse(slot) - 2);
                        HT.MagazineData[port].SetWaferData(port, int.Parse(slot) - 2);
                        MP[port].SetSlotInfo((int)WaferStatus.WithOut, port, int.Parse(slot) - 2);
                        //Joanne 20201011 Add End

                        MP[port].Ui_Busy = false;
                    }
                    else if (dest.IndexOf(NormalStatic.Aligner) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.Aligner.Length, 1)) - 1;

                        Aligner[port].Ui_WaferInfo = "";

                        HT.Converte(ref HT.AlignerData[0].Wafer,ref  HT.RobotData[Index].Wafer[arm]);
                        HT.AlignerData[port].SetWafer();

                        //Joanne 20201011 Add Start
                        HT.DataConverte(ref HT.AlignerData[0].WaferData, ref HT.RobotData[Index].WaferData[arm]);
                        HT.AlignerData[port].SetWaferData();
                        //Joanne 20201011 Add End

                        Aligner[port].Ui_Busy = false;
                    }
                    else if (dest.IndexOf(NormalStatic.Stage) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.Stage.Length, 1)) - 1;

                        switch (Index)
                        {
                            case 0:
                                {
                                    HT.Converte(ref HT.StageData[port].Wafer, ref HT.RobotData[Index].Wafer[arm]);
                                    HT.StageData[port].SetWafer();

                                    //Joanne 20201011 Add Start
                                    HT.DataConverte(ref HT.StageData[port].WaferData, ref HT.RobotData[Index].WaferData[arm]);
                                    HT.StageData[port].SetWaferData();
                                    //Joanne 20201011 Add End

                                    Stage[port].Ui_WaferInfo = "";
                                }
                                break;

                            case 1:
                                {
                                    HT.Converte(ref HT.StageData[port].Carrier, ref  HT.RobotData[Index].Wafer[arm]);
                                    HT.StageData[port].SetCarrier();

                                    //Walson 20201117 修改 Start
                                    HT.DataConverte(ref HT.StageData[port].CarrierData, ref HT.RobotData[Index].CarrierData[arm]);
                                    HT.StageData[port].SetCarrierData();

                                    HT.DataConverte(ref HT.StageData[port].CarrierWaferData, ref HT.RobotData[Index].WaferData[arm]);
                                    HT.StageData[port].SetCarrierWaferData();
                                    //Walson 20201117 修改 End

                                    Stage[port].Ui_CarrierInfo = "";

                                    if (HT.StageData[port].CarrierWafer.Status == WaferStatus.With)
                                    {
                                        int MP_Port = Convert.ToInt16(HT.RobotData[Index].Wafer[arm].SocPort.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;
                                        int MP_Slot = HT.RobotData[Index].Wafer[arm].SocSlot - 1;

                                        HT.Converte(ref HT.StageData[port].CarrierWafer, ref HT.MagazineData[MP_Port].Wafer[MP_Slot]);
                                    }
                                }
                                break;
                        }
                    }

                    HT.RobotData[Index].SetWafer(arm);

                    //Walson 20201011 修改 Start
                    if (Index == 1)
                    {
                        HT.RobotData[Index].SetCarrierData(arm);
                    }             
                    HT.RobotData[Index].SetWaferData(arm);

                    Robot_SetInfo(Index, arm);

                    //Walson 20201011 修改 End
                }
                #endregion

                #region Put
                if (PutFinish)
                {
                    if (dest.IndexOf(NormalStatic.CstPort) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.CstPort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;

                        CP[port].SetSlotData((int)WaferStatus.With, int.Parse(slot) - 1);
                        HT.Converte( ref HT.RobotData[Index].Wafer[arm], ref HT.CassetteData[port].Wafer[int.Parse(slot) - 1]);
                        HT.CassetteData[port].SetWafer(port, int.Parse(slot) - 1);

                        //Joanne 20201011 Add Start
                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Put CST：(1) Wafer Slot {0} Status = {1}", slot, HT.CassetteData[port].WaferData[int.Parse(slot) - 1].Status));
                        HT.DataConverte(ref HT.RobotData[Index].WaferData[arm], ref HT.CassetteData[port].WaferData[int.Parse(slot) - 1]);
                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Put CST：(2) Wafer Slot {0} Status = {1}", slot, HT.CassetteData[port].WaferData[int.Parse(slot) - 1].Status));
                        HT.CassetteData[port].WaferData[int.Parse(slot) - 1].IsTransferComplete = true;
                        HT.CassetteData[port].SetWaferData(port, int.Parse(slot) - 1);
                        CP[port].SetSlotInfo((int)WaferStatus.With, port, int.Parse(slot) - 1);
                        //Joanne 20201011 Add End

                        CP[port].Ui_Busy = false;
                    }
                    else if (dest.IndexOf(NormalStatic.MagazinePort) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                        MP[port].SetSlotData((int)WaferStatus.With, int.Parse(slot) - 2);

                        HT.Converte(ref  HT.RobotData[Index].Wafer[arm] , ref  HT.MagazineData[port].Carrier[int.Parse(slot) - 2]);
                        HT.MagazineData[port].SetCarrier(port, int.Parse(slot) - 2);

                        //Joanne 20201011 Add Start
                        HT.DataConverte(ref HT.RobotData[Index].CarrierData[arm], ref HT.MagazineData[port].CarrierData[int.Parse(slot) - 2]);

                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Put MGZ：(1) Wafer Slot {0} Status = {1}", slot, HT.MagazineData[port].WaferData[int.Parse(slot) - 2].Status));
                        HT.DataConverte(ref HT.RobotData[Index].WaferData[arm], ref HT.MagazineData[port].WaferData[int.Parse(slot) - 2]);
                        UI.Log(NormalStatic.SECS, HT.EFEM.Mode.ToString(), SystemList.CommandParameter, string.Format("Put MGZ：(2) Wafer Slot {0} Status = {1}", slot, HT.MagazineData[port].WaferData[int.Parse(slot) - 2].Status));

                        HT.MagazineData[port].CarrierData[int.Parse(slot) - 2].IsTransferComplete = true;
                        HT.MagazineData[port].SetCarrierData(port, int.Parse(slot) - 2);
                        HT.MagazineData[port].SetWaferData(port, int.Parse(slot) - 2); // Walson 20201117
                        MP[port].SetSlotInfo((int)WaferStatus.With, port, int.Parse(slot) - 2);
                        //Joanne 20201011 Add End

                        MP[port].Ui_Busy = false;
                    }
                    else if (dest.IndexOf(NormalStatic.Aligner) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.Aligner.Length, 1)) - 1;

                        HT.Converte(ref HT.RobotData[Index].Wafer[arm], ref HT.AlignerData[0].Wafer);
                        HT.AlignerData[port].SetWafer();

                        //Joanne 20201011 Add Start
                        HT.DataConverte(ref HT.RobotData[Index].WaferData[arm], ref HT.AlignerData[0].WaferData);
                        HT.AlignerData[port].SetWaferData();
                        //Joanne 20201011 Add End

                        if (arm == 1)
                        {
                            Aligner[0].Ui_WaferInfo = Robot[Index].Ui_UpperWaferInfo;
                        }
                        else
                        {
                            Aligner[0].Ui_WaferInfo = Robot[Index].Ui_LowerWaferInfo;
                        }

                        Aligner[port].Ui_Busy = false;
                    }
                    else if (dest.IndexOf(NormalStatic.Stage) == 0)
                    {
                        port = Convert.ToInt16(dest.Substring(NormalStatic.Stage.Length, 1)) - 1;

                        switch (Index)
                        {
                            case 0:
                                {
                                    HT.Converte(ref HT.RobotData[Index].Wafer[arm],ref   HT.StageData[port].Wafer);
                                    HT.StageData[port].SetWafer();

                                    //Joanne 20201011 Add Start
                                    HT.DataConverte(ref HT.RobotData[Index].WaferData[arm], ref HT.StageData[port].WaferData);
                                    HT.StageData[port].SetWaferData();
                                    //Joanne 20201011 Add End

                                    if (arm == 1)
                                    {
                                        Stage[port].Ui_WaferInfo = Robot[Index].Ui_UpperWaferInfo;
                                    }
                                    else
                                    {
                                        Stage[port].Ui_WaferInfo = Robot[Index].Ui_LowerWaferInfo;
                                    }
                                }
                                break;

                            case 1:
                                {
                                    int MP_Port = 0;

                                    if (NormalStatic.MagazinePort.Length < HT.RobotData[Index].Wafer[arm].SocPort.Length)
                                    {
                                        MP_Port = Convert.ToInt16(HT.RobotData[Index].Wafer[arm].SocPort.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;
                                    }
                                    else
                                    {
                                        UI.Error(NormalStatic.Robot, ErrorList.ProcessError, string.Format("{0}{1}", HT.RobotData[Index].Wafer[arm].SocPort, "data is wrong"));
                                        return;
                                    }

                                    //int MP_Port = Convert.ToInt16(HT.RobotData[Index].Wafer[arm].SocPort.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;
                                    int MP_Slot = HT.RobotData[Index].Wafer[arm].SocSlot - 1;

                            
                                    if (StageCarrierWaferPresence(port) == WaferStatus.With || HT.MagazineData[MP_Port].Wafer[MP_Slot].Status == WaferStatus.With)
                                    {
                                        if (HT.MagazineData[MP_Port].Wafer[MP_Slot].Status == WaferStatus.With)
                                            HT.Converte(ref HT.MagazineData[MP_Port].Wafer[MP_Slot], ref HT.StageData[port].CarrierWafer);
                                        else
                                            HT.StageData[port].CarrierWafer = HT.RobotData[Index].Wafer[arm];

                                        HT.DataConverte(ref HT.RobotData[Index].WaferData[arm], ref HT.StageData[port].CarrierWaferData);
                                        HT.StageData[port].CarrierWaferData.Status = WaferStatus.With;
                                        HT.StageData[port].SetCarrierWaferData();
                                    }

                                    
                                    HT.Converte(ref HT.RobotData[Index].Wafer[arm], ref  HT.StageData[port].Carrier);
                                    
                                    HT.StageData[port].SetCarrierWafer();
                                    HT.StageData[port].SetCarrier();

                                    //Walson 20201117 修改 Start

                                    HT.DataConverte(ref HT.RobotData[Index].CarrierData[arm], ref HT.StageData[port].CarrierData);
                                    HT.StageData[port].SetCarrierData();

                                    //20210419 Joanne 修改
                                    //HT.DataConverte(ref HT.RobotData[Index].WaferData[arm], ref HT.StageData[port].CarrierWaferData);
                                    //HT.StageData[port].SetCarrierWaferData();

                                    if (arm == 1)
                                    {
                                        Stage[port].Ui_CarrierInfo = Robot[Index].Ui_UpperWaferInfo;
                                    }
                                    else
                                    {
                                        Stage[port].Ui_CarrierInfo = Robot[Index].Ui_LowerWaferInfo;
                                    }
                                    //Walson 20201117 修改 End
                                }
                                break;
                        }
                    }

                    if (arm == 1)
                    {
                        Robot[Index].Ui_UpperWaferInfo = "";
                    }
                    else
                    {
                        Robot[Index].Ui_LowerWaferInfo = "";
                    }


                    HT.RobotData[Index].SetWafer(arm);

                    //Joanne 20201011 Add Start
                    HT.RobotData[Index].SetWaferData(arm);

                    if (Index == 1)
                        HT.RobotData[Index].SetCarrierData(arm);
                    //Joanne 20201011 Add End
                }

                #endregion

                UI.Log(NormalStatic.System, Robot[Index].DeviceName, SystemList.CommandComplete, RobotAction.ToString());
            }
            else
            {
                switch (RobotAction)
                {
                    case SocketCommand.Initial:
                        {
                            Robot[Index].Ui_Connect = false;
                            UI.InitialSystem(Robot[Index].DeviceName, NormalStatic.False, ErrorList.AP_InitialFail_0393);
                        }
                        break;

                    case SocketCommand.Home:
                    case SocketCommand.InitialHome:
                    case SocketCommand.WaferGet:
                    case SocketCommand.TopWaferGet:
                    case SocketCommand.WaferPut:
                    case SocketCommand.TopWaferPut:
                    case SocketCommand.GetStandby:
                    case SocketCommand.PutStandby:
                    case SocketCommand.TopGetStandby:
                    case SocketCommand.TopPutStandby:
                    case SocketCommand.Move_OCRReadPosition:
                        break;
                }
                UI.Alarm(Robot[Index].DeviceName, Robot[Index].NowErrorList, Robot[Index].NowErrorMsg);
            }

            Robot[Index].ClearMainJob();
        }

        #endregion

        #region Check

        private bool Robot1_DeviceCheckArm()
        {
            if (Robot[0].Ui_Connect == false)
            {
                Error = ErrorList.AP_SerialError_0381;
                return true;
            }

            if ((Robot[0].Ui_RobotPos >= RobotPosition.P1 && Robot[0].Ui_RobotPos <= RobotPosition.P10_Map && QueuedData.obj == NormalStatic.CstPort && ((int)(Robot[0].Ui_RobotPos - RobotPosition.P1) / 2) == QueuedData.port)
             || (Robot[0].Ui_RobotPos == RobotPosition.Aligner1 && QueuedData.obj == NormalStatic.Aligner)
             || (Robot[0].Ui_RobotPos >= RobotPosition.Stage1 && Robot[0].Ui_RobotPos <= RobotPosition.Stage2 && QueuedData.obj == NormalStatic.Stage && ((int)(Robot[0].Ui_RobotPos - RobotPosition.Stage1)) == QueuedData.port)
             || (Robot[0].Ui_RobotPos == RobotPosition.Home)
             || (Robot[0].Ui_RobotPos == RobotPosition.Unknown))
            {
                if (Robot[0].Ui_ArmStatusX != ArmStatus.Arm_Home || Robot[0].Ui_ArmStatusY != ArmStatus.Arm_Home)
                {
                    Error = ErrorList.RB_ArmExtend_0316;
                    return true;
                }
            }
            return false;
        }

        private bool Robot2_DeviceCheckArm()
        {

            if (Robot[1].Ui_Connect == false)
            {
                Error = ErrorList.AP_SerialError_0381;
                return true;
            }

            if ((Robot[1].Ui_RobotPos >= RobotPosition.P1 && Robot[1].Ui_RobotPos <= RobotPosition.P8_Map && QueuedData.obj == NormalStatic.MagazinePort && ((int)(Robot[1].Ui_RobotPos - RobotPosition.P1) / 2) == QueuedData.port)
                || (Robot[1].Ui_RobotPos >= RobotPosition.Stage1 && Robot[1].Ui_RobotPos <= RobotPosition.Stage2 && QueuedData.obj == NormalStatic.Stage && ((int)(Robot[1].Ui_RobotPos - RobotPosition.Stage1)) == QueuedData.port)
                || Robot[1].Ui_RobotPos == RobotPosition.Home
                || Robot[1].Ui_RobotPos == RobotPosition.Unknown)
            {
                if (Robot[1].Ui_ArmStatusX != ArmStatus.Arm_Home || Robot[1].Ui_ArmStatusY != ArmStatus.Arm_Home)
                {
                    Error = ErrorList.RB_ArmExtend_0316;
                    return true;
                }
            }

            return false;
        }

        private bool RobotCheckBusy(int port)
        {
            if (Robot[port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
            }
            return Robot[port].Ui_Busy;
        }

        public bool CheckRobotArmSafety(int port, SocketCommand command)
        {
            for (int ArmCnt = 0; ArmCnt < Robot[port].IniArmCnt; ArmCnt++)
            {
                switch (ArmCnt)
                {
                    case 0:
                        {
                            if (Robot[port].Ui_ArmStatusX != ArmStatus.Arm_Home)
                            {
                                Error = ErrorList.RB_ArmExtend_0316;
                                return false;
                            }

                            if (command != SocketCommand.TopGetStandby && command != SocketCommand.TopPutStandby && command != SocketCommand.TopWaferGet && command != SocketCommand.TopWaferPut)
                            {
                                if (Robot[port].Ui_ArmStatusR != ArmStatus.Arm_Home)
                                {
                                    Error = ErrorList.RB_LowerTurn_0317;
                                    return false;
                                }
                            }

                        }
                        break;

                    case 1:
                        {
                            if (Robot[port].Ui_ArmStatusY != ArmStatus.Arm_Home)
                            {
                                Error = ErrorList.RB_ArmExtend_0316;
                                return false;
                            }

                        }
                        break;
                }
            }
            return true;
        }

        private bool CheckRobotArmNoWafer(ref int index, ref bool arm)
        {
            if (arm == false)
            {
                if (Robot[index].Ui_LowerWaferPresent == WaferStatus.With)
                {
                    Error = ErrorList.RB_With_0121;
                    return false;
                }

                //if (Robot[index].Ui_LowerWaferPresent != WaferStatus.WithOut)
                //{
                //    Error = ErrorList.RB_ArmUnknown_0122;
                //    return false;
                //}

                if (Robot[index].Ui_LowerWaferPresent != HT.RobotData[index].Wafer[0].Status)
                {
                    Error = ErrorList.AP_PresenceIniNotMatch_0549; 
                    return false;
                }
            }
            else
            {
                if (Robot[index].Ui_UpperWaferPresent == WaferStatus.With)
                {
                    Error = ErrorList.RB_With_0121;
                    return false;
                }

                //if (Robot[index].Ui_UpperWaferPresent != WaferStatus.WithOut)
                //{
                //    Error = ErrorList.RB_ArmUnknown_0122;
                //    return false;
                //}

                if (Robot[index].Ui_UpperWaferPresent != HT.RobotData[index].Wafer[1].Status)
                {
                    Error = ErrorList.AP_PresenceIniNotMatch_0549; 
                    return false;
                }
            }
            return true;
        }

        private bool CheckRobotArmHasWafer(ref int index, ref bool arm)
        {
            if (arm == false)
            {
                if (Robot[index].Ui_LowerWaferPresent == WaferStatus.WithOut)
                {
                    Error = ErrorList.RB_Without_0120;
                    return false;
                }

                //if (Robot[index].Ui_LowerWaferPresent != WaferStatus.WithOut)
                //{
                //    Error = ErrorList.RB_ArmUnknown_0122;
                //    return false;
                //}

                if (Robot[index].Ui_LowerWaferPresent != HT.RobotData[index].Wafer[0].Status )
                {
                    Error = ErrorList.AP_PresenceIniNotMatch_0549; 
                    return false;
                }
            }
            else
            {
                if (Robot[index].Ui_UpperWaferPresent == WaferStatus.WithOut)
                {
                    Error = ErrorList.RB_Without_0120;
                    return false;
                }

                //if (Robot[index].Ui_UpperWaferPresent != WaferStatus.WithOut)
                //{
                //    Error = ErrorList.RB_ArmUnknown_0122;
                //    return false;
                //}

                if (Robot[index].Ui_UpperWaferPresent != HT.RobotData[index].Wafer[1].Status)
                {
                    Error = ErrorList.AP_PresenceIniNotMatch_0549; 
                    return false;
                }
            }

           
            return true;
        }

        private bool CheckRobotGPT_CP(int port ,string dest, int slot, bool arm, SocketCommand command)
        {

            if (CP[port].Ui_Protrude == true)
            {
                Error = ErrorList.LP_ProtrudeIsTrue_053B;
                return false;
            }

            if (CP[port].Ui_Busy == true)
            {
                Error = ErrorList.RB_ObjectBusy_0302;
                return false;
            }

            if (CP[port].Ui_InDoor != IOLPDoor.Open)
            {
                Error = ErrorList.RB_LPDoorNotOpen_0303;
                return false;
            }

            if (CP[port].Ui_OutDoor != IOLPDoor.Close)
            {
                Error = ErrorList.LP_OutDoorIsOpen_0538;
                return false;
            }

            if (command == SocketCommand.TopWaferPut || command == SocketCommand.TopPutStandby
             || command == SocketCommand.TopWaferGet || command == SocketCommand.TopGetStandby)
            {
                if (arm == true)
                    Error = ErrorList.RB_UpperNotTurn_0304;
                else
                    Error = ErrorList.RB_NotDoTopAction_0305;

                return false;
            }

            if (slot - 1 >= CP[port].GetSlotData.Length || slot == 0)
            {
                Error = ErrorList.RB_DeviceSlotCountError_0308;
                return false;
            }

            switch (command)
            {
                case SocketCommand.WaferGet:
                    {
                        switch (CP[port].GetSlotData[slot - 1])
                        {
                            case (int)WaferStatus.WithOut:
                                {
                                    Error = ErrorList.RB_DeviceWithout_0307;
                                    return false;
                                }
                                break;

                            case (int)WaferStatus.Cross:
                            case (int)WaferStatus.Thickness:
                            case (int)WaferStatus.Thiness:
                            case (int)WaferStatus.Position:
                            case (int)WaferStatus.Unknown:
                                {
                                    Error = ErrorList.RB_WaferDataError_0313;
                                    return false;
                                }
                                break;
                        }
                    }
                    break;

                case SocketCommand.WaferPut:
                    {
                        switch (CP[port].GetSlotData[slot - 1])
                        {
                            case (int)WaferStatus.With:
                                {
                                    Error = ErrorList.RB_DeviceWith_0306;
                                    return false;
                                }
                                break;

                            case (int)WaferStatus.Cross:
                            case (int)WaferStatus.Thickness:
                            case (int)WaferStatus.Thiness:
                            case (int)WaferStatus.Position:
                            case (int)WaferStatus.Unknown:
                                {
                                    Error = ErrorList.RB_WaferDataError_0313;
                                    return false;
                                }
                                break;
                        }
                    }
                    break;
            }

            if (Robot_Static.CassetteOffset * slot > 159)
            {
                Error = ErrorList.RB_DeviceSlotCountError_0308;
                return false;
            }

            CP[port].Ui_Busy = true;
            return true;
        }

        private bool CheckRobotGPT_MP(int port,string dest, int slot, bool arm, SocketCommand command)
        {
            if (MP[port].Ui_Protrude == true)
            {
                Error = ErrorList.LP_ProtrudeIsTrue_053B;
                return false;
            }

            if (MP[port].Ui_Busy == true)
            {
                Error = ErrorList.RB_ObjectBusy_0302;
                return false;
            }

            if (MP[port].Ui_InDoor != IOLPDoor.Open)
            {
                Error = ErrorList.RB_LPDoorNotOpen_0303;
                return false;
            }

            if (MP[port].Ui_OutDoor != IOLPDoor.Close)
            {
                Error = ErrorList.LP_OutDoorIsOpen_0538;
                return false;
            }

            if (command == SocketCommand.TopWaferPut || command == SocketCommand.TopPutStandby
             || command == SocketCommand.TopWaferGet || command == SocketCommand.TopGetStandby)
            {
                if (arm == true)
                    Error = ErrorList.RB_UpperNotTurn_0304;
                else
                    Error = ErrorList.RB_NotDoTopAction_0305;
                return false;
            }

            if (slot - 1 >= MP[port].GetSlotData.Length || slot == 0)
            {
                Error = ErrorList.RB_DeviceSlotCountError_0308;
                return false;
            }

            switch (command)
            {
                case SocketCommand.WaferGet:
                    {
                        switch (MP[port].GetSlotData[slot - 1])
                        {
                            case (int)WaferStatus.WithOut:
                                {
                                    Error = ErrorList.RB_DeviceWithout_0307;
                                    return false;
                                }
                                break;

                            case (int)WaferStatus.Cross:
                            case (int)WaferStatus.Thickness:
                            case (int)WaferStatus.Thiness:
                            case (int)WaferStatus.Position:
                            case (int)WaferStatus.Unknown:
                                {
                                    Error = ErrorList.RB_WaferDataError_0313;
                                    return false;
                                }
                                break;
                        }
                    }
                    break;

                case SocketCommand.WaferPut:
                    {
                        switch (MP[port].GetSlotData[slot - 1])
                        {
                            case (int)WaferStatus.With:
                                {
                                    Error = ErrorList.RB_DeviceWith_0306;
                                    return false;
                                }
                                break;

                            case (int)WaferStatus.Cross:
                            case (int)WaferStatus.Thickness:
                            case (int)WaferStatus.Thiness:
                            case (int)WaferStatus.Position:
                            case (int)WaferStatus.Unknown:
                                {
                                    Error = ErrorList.RB_WaferDataError_0313;
                                    return false;
                                }
                                break;
                        }
                    }
                    break;
            }

            if (Robot_Static.MagazionOffset * slot > 240)
            {
                Error = ErrorList.RB_DeviceSlotCountError_0308;
                return false;
            }

            MP[port].Ui_Busy = true;
            return true;
        }

        private bool CheckRobotGPT_Aligner(ref string dest, ref bool arm, ref SocketCommand command)
        {
            int port = Convert.ToInt16(dest.Substring(NormalStatic.Aligner.Length, 1)) - 1;

            if (AlignerCheckBusy())
            {
                return false;
            }

            if (arm == true)
            {
                if (command == SocketCommand.TopWaferPut || command == SocketCommand.TopPutStandby
                 || command == SocketCommand.TopWaferGet || command == SocketCommand.TopGetStandby)
                {
                    Error = ErrorList.RB_UpperNotTurn_0304;
                    return false;
                }
            }

            switch (command)
            {
                case SocketCommand.WaferGet:
                case SocketCommand.TopWaferGet:
                    {
                        if (Aligner[port].Ui_Presence != WaferStatus.With)
                        {
                            Error = ErrorList.RB_DeviceWithout_0307;
                            return false;
                        }
                    }
                    break;

                case SocketCommand.WaferPut:
                case SocketCommand.TopWaferPut:
                    {
                        if (Aligner[port].Ui_Presence != WaferStatus.WithOut)
                        {
                            Error = ErrorList.RB_DeviceWith_0306;
                            return false;
                        }
                    }
                    break;
            }

            if (Aligner[port].Ui_Presence != HT.AlignerData[0].Wafer.Status)
            {
                Error = ErrorList.AP_PresenceIniNotMatch_0549; 
                return false;
            }

            if (Aligner[port].Ui_LiftPin != LiftPinEnum.Up)
            {
                Error = ErrorList.AL_LiftPinNotUp_053C;
                return false;
            }

            if (Aligner[port].Ui_WaferProtrude == true) 
            {
                Error = ErrorList.AP_DeviceWaferSensorError_0540;
                return false;
            }

            Aligner[port].Ui_Busy = true;
            return true;
        }

        private bool CheckRobotGPT_Stage(int port,int Index, string dest, bool arm, SocketCommand command, int slot)
        {

            if (Stage[port].Ui_Busy)
            {
                Error = ErrorList.RB_ObjectBusy_0302;
                return false;
            }

            if (arm == true)
            {
                if (command == SocketCommand.TopWaferPut || command == SocketCommand.TopPutStandby
                 || command == SocketCommand.TopWaferGet || command == SocketCommand.TopGetStandby)
                {
                    Error = ErrorList.RB_UpperNotTurn_0304;
                    return false;
                }
            }

            switch (command)
            {
                case SocketCommand.WaferGet:  
                case SocketCommand.TopWaferGet:
                    {
                        if (Index == 0 ? Stage[port].Ui_WaferPresence == WaferStatus.WithOut : Stage[port].Ui_CarrierPresence == WaferStatus.WithOut)
                        {
                            Error = ErrorList.RB_DeviceWithout_0307;
                            return false;
                        }
                    }
                    break;

                case SocketCommand.WaferPut:
                case SocketCommand.TopWaferPut:
                    {
                        if (Index == 0 ? Stage[port].Ui_WaferPresence == WaferStatus.With : Stage[port].Ui_CarrierPresence == WaferStatus.With)
                        {
                            Error = ErrorList.RB_DeviceWith_0306;
                            return false;
                        }
                    }
                    break;
            }

            if (Index == 0 ? (Stage[port].Ui_WaferPresence != HT.StageData[port].Wafer.Status) : (Stage[port].Ui_CarrierPresence != HT.StageData[port].Carrier.Status))
            {
                Error = ErrorList.AP_PresenceIniNotMatch_0549; 
                return false;
            }

            if (Index == 0 ? Stage[port].Ui_WaferSideProtrude == true : Stage[port].Ui_CarrieSideProtrude == true)
            {
                Error = ErrorList.AP_DeviceWaferSensorError_0540;
                return false;
            }

            if (Index == 0 ? Stage[port].Ui_WaferAvailable == false : Stage[port].Ui_CarrieAvailable == false)
            {
                Error = ErrorList.SG_WaferAvailableOff_0550;
                return false;
            }

            //Stage[port].Ui_Busy = true;
            return true;
        }

        #endregion

        #region Command

        private void Robot_ReConnect(int Index)
        {
            Robot[Index].COM_Connect();
        }

        private void Robot_Disconnect(int Index)
        {
            Robot[Index].COM_Disconnect();
        }

        private bool RobotInitial(int Index)
        {
            Robot_ReConnect(Index);

            if (Robot[Index].Ui_Connect == true)
            {
                Robot[Index].ProcessSingleCommand(SocketCommand.Initial);
            }
            return true;
        }

        private bool RobotInitialHome(int Index)
        {
            Robot[Index].ProcessSingleCommand(SocketCommand.InitialHome);
            return true;
        }

        private bool RobotHome(int Index)
        {
            if (RobotCheckBusy(Index))
                return false;

            switch (Index)
            {
                case 0:
                    {
                        for (int i = 0; i < CassetteCount; i++)
                        {
                            if (CP_GetInDoorOpen(i) != IOLPDoor.Close)
                                CP[i].Ui_Busy = true;
                        }
                        for (int i = 0; i < AlignerCount; i++)
                        {
                            Aligner[i].Ui_Busy = true;
                        }

                        for (int i = 0; i < StageCount; i++)
                        {
                            Stage[i].Ui_Busy = true;
                        }
                    }
                    break;

                case 1:
                    {
                        for (int i = 0; i < MagazineCount; i++)
                        {
                            if (MP_GetInDoorOpen(i) != IOLPDoor.Close)
                                MP[i].Ui_Busy = true;
                        }
                    }
                    break;
            }

            Robot[Index].ProcessSingleCommand(SocketCommand.Home);
            return true;
        }

        private bool RobotResetError(int Index)
        {
            Robot[Index].ProcessSingleCommand(SocketCommand.ResetError);
            return true;
        }

        private bool RobotStop(int Index)
        {
            if (Robot[Index].Ui_Stop == true)
            {
                Error = ErrorList.RB_StopOn_0103;
                return false;
            }

            Robot[Index].ProcessSingleCommand(SocketCommand.Stop);
            return true;
        }

        private bool RobotRestart(int Index)
        {
            if (Robot[Index].Ui_Stop == false)
            {
                Error = ErrorList.RB_NowNotStop_0116;
                return false;
            }

            if (Robot[Index].IniStopRestart == false)
            {
                if (RobotCheckBusy(Index))
                    return false;
            }

            Robot[Index].ProcessSingleCommand(SocketCommand.ReStart);
            return true;
        }

        private bool RobotSetSpeed(int Index, int speed)
        {
            if (RobotCheckBusy(Index))
                return false;

            Robot[Index].SetNowSpeed(speed);

            Robot[Index].ProcessSingleCommand(SocketCommand.SetRobotSpeed);
            return true;
        }

        private bool RobotSetArm(int Index, bool arm, SocketCommand command)
        {
            if (RobotCheckBusy(Index))
                return false;

            if (Index == 0 && arm == false && (command == SocketCommand.EdgeGripOff || command == SocketCommand.BernoulliOff || command == SocketCommand.VacuumOff))
            {
                if (Robot[0].Ui_ArmStatusR != ArmStatus.Arm_Home)
                {
                    Error = ErrorList.RB_LowerTurn_0317;
                    return false;
                }
            }

            Robot[Index].SetNowUseArm(arm == false ? 0 : 1);

            Robot[Index].ProcessSingleCommand(command);


            return true;
        }

        private bool RobotGetCommand(SocketCommand command, int Index)
        {
            if (RobotCheckBusy(Index))
                return false;

            Robot[Index].ProcessSingleCommand(command);
            return true;
        }

        private bool RobotGetMappingCommand(SocketCommand command, int Index, string des)
        {
            if (RobotCheckBusy(Index))
                return false;

            Robot[Index].SetNowUseObj(des);
            Robot[Index].ProcessSingleCommand(command);
            return true;
        }

        private bool RobotMapping(int Index, string dest)
        {
            int StartGPAddress;
            bool arm = false;
            //Robot
            if (Robot[Index].IniMappingSup == false)
            {
                Error = ErrorList.AP_CommandNoSup_0288;
                return false;
            }

            if (RobotCheckBusy(Index))
                return false;

            if (CheckRobotArmSafety(Index, SocketCommand.RobotMapping) == false)
                return false;

            //if (CheckRobotArmNoWafer(ref Index, ref arm) == false)
            //    return false;

            if (Robot[Index].Check_LPAddress(string.Format("{0}{1}", dest, NormalStatic.MAP)) == false)
            {
                Error = ErrorList.RB_DevicePosUnKnown_0309;
                return false;
            }

            if (dest.IndexOf(NormalStatic.CstPort) >= 0)
            {
                int port = Convert.ToInt16(dest.Substring(NormalStatic.CstPort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;

                if (CP[port].Ui_Busy == true)
                {
                    Error = ErrorList.RB_ObjectBusy_0302;
                    return false;
                }

                if (CP[port].Ui_InDoor != IOLPDoor.Open)
                {
                    Error = ErrorList.RB_LPDoorNotOpen_0303;
                    return false;
                }

                if (CP[port].Ui_Protrude)
                {
                    Error = ErrorList.LP_ProtrudeIsTrue_053B;
                    return false;
                }

                CP[port].Ui_Busy = true;
                StartGPAddress = Robot[Index].Get_LPAddress(string.Format("{0}{1}", dest, NormalStatic.MAP), 0);
                Robot[Index].GPT_Start((int)PLC_B.CSTInvasionStart + port,dest, 0, 0, StartGPAddress);
            }
            else if (dest.IndexOf(NormalStatic.MagazinePort) >= 0)
            {
                int port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                if (MP[port].Ui_Busy == true)
                {
                    Error = ErrorList.RB_ObjectBusy_0302;
                    return false;
                }

                if (MP[port].Ui_InDoor != IOLPDoor.Open)
                {
                    Error = ErrorList.RB_LPDoorNotOpen_0303;
                    return false;
                }

                if (MP[port].Ui_Protrude)
                {
                    Error = ErrorList.LP_ProtrudeIsTrue_053B;
                    return false;
                }

                MP[port].Ui_Busy = true;
                StartGPAddress = Robot[Index].Get_LPAddress(string.Format("{0}{1}", dest, NormalStatic.MAP), 0);
                Robot[Index].GPT_Start((int)PLC_B.MagInvasionStart + port, dest, 0, 0, StartGPAddress);
            }
            else
            {
                Error = ErrorList.AP_ParameterFail_0291;
                return false;
            }


            Robot[Index].SetNowUseArm(1);
            Robot[Index].ProcessSingleCommand(SocketCommand.RobotMapping);

            return true;
        }

        private bool RobotWaferGPT(int Index, bool arm, string dest, int slot, SocketCommand command)
        {
            //double OffsetTemp = 0;
            int StartGPAddress;
            //robot
            if (RobotCheckBusy(Index) == true)
                return false;

            if (CheckRobotArmSafety(Index, command) == false)
                return false;

            switch (command)
            {

                case SocketCommand.TopGetStandby:
                case SocketCommand.TopWaferGet:
                case SocketCommand.WaferGet:
                case SocketCommand.GetStandby:
                    {
                        if (CheckRobotArmNoWafer(ref Index, ref arm) == false)
                            return false;
                    }
                    break;

                case SocketCommand.TopWaferPut:
                case SocketCommand.TopPutStandby:
                case SocketCommand.WaferPut:
                case SocketCommand.PutStandby:
                    {
                        if (CheckRobotArmHasWafer(ref Index, ref arm) == false)
                            return false;
                    }
                    break;
            }

            switch (command)
            {

                case SocketCommand.TopGetStandby:
                case SocketCommand.TopWaferGet:
                case SocketCommand.TopPutStandby:
                case SocketCommand.TopWaferPut:
                    {
                        if (Robot[Index].Check_OtherAddress(Robot_Static.TurnPos) == false || Robot[Index].Check_OtherAddress(Robot_Static.TurnBackPos) == false)
                        {
                            Error = ErrorList.RB_DevicePosUnKnown_0309;
                            return false;
                        }
                    }
                    break;
            }

            if (dest.IndexOf(NormalStatic.CstPort) >= 0)
            {
                if (Robot[Index].Check_LPAddress(string.Format("{0}{1}", dest, NormalStatic.POS)) == false)
                {
                    Error = ErrorList.RB_DevicePosUnKnown_0309;
                    return false;
                }
                else
                {
                    StartGPAddress = Robot[Index].Get_LPAddress(string.Format("{0}{1}", dest, NormalStatic.POS), 0);
                }

                int port = Convert.ToInt16(dest.Substring(NormalStatic.CstPort.Length, dest.Length - NormalStatic.CstPort.Length)) - 1;

                if (CheckRobotGPT_CP(port,dest, slot, arm, command) == false)
                    return false;


                Robot[Index].GPT_Start((int)PLC_B.CSTInvasionStart+port,dest, slot, Robot_Static.CassetteOffset, StartGPAddress);
            }
            else if (dest.IndexOf(NormalStatic.MagazinePort) >= 0)
            {
                if (Robot[Index].Check_LPAddress(string.Format("{0}{1}", dest, NormalStatic.POS)) == false)
                {
                    Error = ErrorList.RB_DevicePosUnKnown_0309;
                    return false;
                }
                else
                {
                    StartGPAddress = Robot[Index].Get_LPAddress(string.Format("{0}{1}", dest, NormalStatic.POS), 0);
                }
                int port = Convert.ToInt16(dest.Substring(NormalStatic.MagazinePort.Length, 1)) - 1;

                if (CheckRobotGPT_MP(port,dest, slot, arm, command) == false)
                    return false;

                Robot[Index].GPT_Start((int)PLC_B.MagInvasionStart + port,dest, slot + 1, Robot_Static.MagazionOffset, StartGPAddress);
            }
            else if (dest.IndexOf(NormalStatic.Aligner) >= 0)
            {
                if (Robot[Index].Check_OtherAddress(dest) == false)
                {
                    Error = ErrorList.RB_DevicePosUnKnown_0309;
                    return false;
                }

                if (CheckRobotGPT_Aligner(ref dest, ref arm, ref command) == false)
                    return false;

                StartGPAddress = Robot[Index].Get_OtherAddress(dest);
                Robot[Index].GPT_Start((int)PLC_B.MaxCnt,dest, slot = 1, Robot_Static.AlignerOffset, StartGPAddress);

            }
            else if (dest.IndexOf(NormalStatic.Stage) >= 0)
            {
                if (Robot[Index].Check_OtherAddress(dest) == false)
                {
                    Error = ErrorList.RB_DevicePosUnKnown_0309;
                    return false;
                }

                int port = Convert.ToInt16(dest.Substring(NormalStatic.Stage.Length, 1)) - 1;

                if (CheckRobotGPT_Stage(port,Index, dest, arm, command, slot) == false)
                    return false;

                StartGPAddress = Robot[Index].Get_OtherAddress(dest);
                Robot[Index].GPT_Start((int)PLC_B.Stage1WaferInvasion + (port*2)+ Index,dest, slot, Robot_Static.StageOffset, StartGPAddress);
            }
            else
            {
                Error = ErrorList.AP_ParameterFail_0291;
                return false;
            }

            Robot[Index].SetNowUseArm(arm == false ? 0 : 1);

            Robot[Index].ProcessSingleCommand(command);

            return true;
        }

        private bool RobotWaferOCR(int Index, bool arm, string dest, int slot, SocketCommand command)
        {

            int StartGPAddress;
            //robot
            if (RobotCheckBusy(Index) == true)
                return false;

            if (CheckRobotArmSafety(Index, command) == false)
                return false;
                    
            if (CheckRobotArmHasWafer(ref Index, ref arm) == false)
                return false;
                                         
            if (dest.IndexOf(NormalStatic.Aligner) >= 0)
            {
                if (Robot[Index].Check_OtherAddress(dest) == false)
                {
                    Error = ErrorList.RB_DevicePosUnKnown_0309;
                    return false;
                }

                StartGPAddress = Robot[Index].Get_OtherAddress(dest);
                Robot[Index].GPT_Start((int)PLC_B.MaxCnt, dest, slot = 1, Robot_Static.AlignerOffset, StartGPAddress);

            }
            else
            {
                Error = ErrorList.AP_ParameterFail_0291;
                return false;
            }

            Robot[Index].SetNowUseArm(arm == false ? 0 : 1);

            Robot[Index].ProcessSingleCommand(command);

            return true;
        }

        #endregion

        #region TS_UI

        private void SendRobotCommand_Click(object sender, EventArgs e)
        {
            int Index = Convert.ToInt32(TS_Robot.cboCnt.Text) - 1;

            if (Robot[Index].Ui_Connect == false)
            {
                UI.Alarm(Robot[Index].DeviceName, ErrorList.AP_SerialError_0381);
                return;
            }

            if (Robot[Index].Ui_Remote == false)
            {
                UI.Alarm(Robot[Index].DeviceName, ErrorList.RB_ManualMode_0702);
                return;
            }

            bool arm = TS_Robot.cboArm.Text == Robot_Static.Lower ? false : true;

            EFEM_Data.command = (SocketCommand)Enum.Parse(typeof(SocketCommand), TS_Robot.cboCommand.Text);
            EFEM_Data.port = Index;
            EFEM_Data.obj = NormalStatic.Robot;

            switch (EFEM_Data.command)
            {
                #region Normal

                case SocketCommand.Home:
                    {
                        DialogResult HomeResult = MessageBox.Show("Please check Robot arm is safety",
                                                 "Error",
                                                 MessageBoxButtons.YesNo,
                                                 MessageBoxIcon.Error);

                        if (HomeResult == DialogResult.Yes)
                        {
                            Command_EnQueue(EFEM_Data);
                        }
                    }
                    break;

                case SocketCommand.ArmSafetyPosition:
                    {

                        DialogResult HomeResult = MessageBox.Show("This command will force the Arm level retraction action. Please confirm that the Robot Arm has no interference state. Does the above describe whether to perform this action?",
                                                 "Error",
                                                 MessageBoxButtons.YesNo,
                                                 MessageBoxIcon.Error);

                        if (HomeResult == DialogResult.Yes)
                        {
                            Command_EnQueue(EFEM_Data);
                        }
                    }
                    break;

                case SocketCommand.GetStatus:
                case SocketCommand.ResetError:
                case SocketCommand.Stop:
                case SocketCommand.ReStart:
                case SocketCommand.ReadPosition:
                case SocketCommand.CheckWaferPresence:
                case SocketCommand.CheckArmOnSafetyPos:
                    {
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                case SocketCommand.GetRobotMappingResult:
                case SocketCommand.GetRobotMappingResult2:
                case SocketCommand.GetRobotMappingErrorResult:
                case SocketCommand.GetRobotMappingErrorResult2:
                    {
                        EFEM_Data.Parameter = TS_Robot.cboDest.Text;
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                #endregion

                #region Set

                case SocketCommand.SetRobotSpeed:
                    {
                        EFEM_Data.Parameter = TS_Robot.cboSpeed.Text;
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                case SocketCommand.BernoulliOff:
                case SocketCommand.BernoulliOn:
                case SocketCommand.EdgeGripOff:
                case SocketCommand.EdgeGripOn:
                case SocketCommand.VacuumOff:
                case SocketCommand.VacuumOn:
                    {
                        EFEM_Data.Parameter = arm.ToString();
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                #endregion

                #region Mov

                case SocketCommand.RobotMapping:
                    {
                        EFEM_Data.Parameter = TS_Robot.cboDest.Text;
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                case SocketCommand.PutStandby:
                case SocketCommand.WaferPut:
                case SocketCommand.TopPutStandby:
                case SocketCommand.TopWaferPut:
                case SocketCommand.GetStandby:
                case SocketCommand.WaferGet:
                case SocketCommand.TopGetStandby:
                case SocketCommand.TopWaferGet:
                case SocketCommand.Move_OCRReadPosition:
                    {
                        EFEM_Data.Parameter = string.Format("{0},{1},{2}", arm, TS_Robot.cboDest.Text, TS_Robot.cboSlot.Text);
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                #endregion
            }

            UI.Operate(string.Format("{0}{1}", EFEM_Data.obj, TS_Robot.cboCnt.Text),
                        string.Format("{0}:{1}", TS_Robot.cboCommand.Text, EFEM_Data.Parameter));
        }

        private void btnRobot_Click(object sender, EventArgs e)
        {
            if (!TS_Robot.Visible)
            {
                TS_Robot.Location = new System.Drawing.Point(300, 300);
                TS_Robot.Show();
            }
            else
            {
                if (TS_Robot.WindowState == FormWindowState.Minimized)
                    TS_Robot.WindowState = FormWindowState.Normal;
                else
                    TS_Robot.Hide();
            }
        }

        #endregion

        #endregion

        #region CP

        #region Event


        private void CP_TabEventContol(int port)
        {
            int End = port;
            int Start = port + 1;

            if (Start == CassetteCount)
                Start = 0;
            do
            {
                if (CP[Start].txtBarcode.Enabled == true)
                {
                    CP[Start].txtBarcode.Focus();
                    break;
                }

                if (Start == CassetteCount - 1)
                    Start = 0;
                else
                    Start++;

            } while (Start != End);
        }

        #endregion

        #region Public

        public int[] CP_SlotData(int port) { return CP[port].GetSlotData; }
        public string CP_Device(int port) { return CP[port].DeviceName; }
        public bool CP_Busy(int port) { return CP[port].Ui_Busy; }
        public bool CP_Presence(int port) { return CP[port].Ui_Presence; }
        public bool CP_CheckNeedMapping(int port) { return CP[port].NeedMapping; }
        public bool CP_CheckNullSlot(int port) { return CP[port].CheckNullSlot(); }
        public bool CP_CheckFullSlot(int port, string Dest) { return CP[port].CheckFullSlot(Dest); }
        public IOLPDoor CP_GetInDoorOpen(int port) { return CP[port].Ui_InDoor; }
        public IOLPDoor CP_GetOutDoorOpen(int port) { return CP[port].Ui_OutDoor; }
        public string CP_BarCode(int port) { return CP[port].Ui_Barcode; }
        //public CassetterPortType CP_CheckPortType(int port) { return CP[port].PortType; }
        public void CP_ChagePortType(int port, CassetterPortType type  ) { CP[port].Ui_PortType = type; }

        //Wayne 20210918 SetCSTMapping
        public void Set_CPMapping(int ref_CPIdx,bool ref_Value) 
        {
            CP[ref_CPIdx].NeedMapping = ref_Value;
        }

        //Wayne 20210922 SetMGZMapping
        public void Set_MPMapping(int ref_MPIdx, bool ref_Value)
        {
            MP[ref_MPIdx].NeedMapping = ref_Value;
        }

        #endregion

        #region Interlock

        private bool CP_CheckInDoorInterlock()
        {
            if (CP[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return true;
            }
            
            if (CP[QueuedData.port].Ui_Ready == false) 
            {
                Error = ErrorList.DeviceNotReady;
                return true;
            }

            if (CP[QueuedData.port].Ui_Protrude)
            {
                Error = ErrorList.LP_ProtrudeIsTrue_053B; 
                return true;
            }

            if (CP[QueuedData.port].Ui_Invasion == false)
            {
                Error = ErrorList.RB_DeviceInvasion_0541;
                return true;
            }

            if (Robot1_DeviceCheckArm())
            {
                return true;
            }

            return false;
        }

        private bool CP_CheckOutDoorInterlock()
        {
            if (CP[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return true;
            }

            if (CP[QueuedData.port].Ui_Ready == false)
            {
                Error = ErrorList.DeviceNotReady;
                return true;
            }

            if (CP[QueuedData.port].Ui_Gratina)
            {
                Error = ErrorList.LP_CloseGratingOn_0534;
                return true;
            }

            return false;
        }

        private bool CP_CheckOnlyOutDoorClose()
        {
            if(QueuedData.command == SocketCommand.Load && CP_Presence(QueuedData.port) == false )
            {
                Error = ErrorList.LP_NotFoup_0333;
                return true;
            }

            if (CP[QueuedData.port].Ui_Barcode == "" && QueuedData.command == SocketCommand.Load)
            {
                Error = ErrorList.LP_BarCodeIsNull_0542;
                return true;
            }

            return false;
        }

        #endregion

        #region Command

        private bool CP_ResetError()
        {
            if (PLC.AlarmReseting) 
            {
                //Error = ErrorList.PLCCmdRecvError;
                return true;
            }

            CP[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool CP_InitialHome(int port)
        {

            if ((Robot[0].Ui_RobotPos >= RobotPosition.P1 && Robot1.Ui_RobotPos <= RobotPosition.P10_Map && ((int)(Robot[0].Ui_RobotPos - RobotPosition.P1) / 2) == port)
                 || Robot[0].Ui_RobotPos == RobotPosition.Home
                 || Robot[0].Ui_RobotPos == RobotPosition.Unknown)
            {
                if (Robot[0].Ui_ArmStatusX != ArmStatus.Arm_Home || Robot[0].Ui_ArmStatusY != ArmStatus.Arm_Home)
                {
                    Error = ErrorList.RB_ArmExtend_0316;
                    return true;
                }
            }

            if (CP[QueuedData.port].Ui_Gratina)
            {
                Error = ErrorList.LP_CloseGratingOn_0534;
                return false;
            }

            CP[port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool CP_InDoorMoveCommand()
        {
            if (CP_CheckInDoorInterlock())
                return false;

            if (CP_CheckOnlyOutDoorClose())
                return false;

            CP[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool CP_OutDoorMoveCommand()
        {
            if (CP_CheckOutDoorInterlock())
                return false;

            CP[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        #endregion

        #region TS_UI

        private void SendCassettePortCommand_Click(object sender, EventArgs e)
        {
            int port = Convert.ToInt32(TS_CassettePort.cboCnt.Text) - 1;

            EFEM_Data.command = (SocketCommand)Enum.Parse(typeof(SocketCommand), TS_CassettePort.cboCommand.Text);
            EFEM_Data.port = port;
            EFEM_Data.obj = NormalStatic.CstPort;

            switch ((SocketCommand)Enum.Parse(typeof(SocketCommand), TS_CassettePort.cboCommand.Text))
            {
                case SocketCommand.ResetError:
                case SocketCommand.Home:
                case SocketCommand.Load:
                case SocketCommand.Unload:
                case SocketCommand.OutDoorClose:
                case SocketCommand.OutDoorOpen:
                case SocketCommand.Reloading:
                    {
                        Command_EnQueue(EFEM_Data);
                    }
                    break;
            }
            UI.Operate(string.Format("{0}{1}", NormalStatic.CstPort, TS_CassettePort.cboCnt.Text), TS_CassettePort.cboCommand.Text);
        }

        private void btnCassettePort_Click(object sender, EventArgs e)
        {
            if (!TS_CassettePort.Visible)
            {
                TS_CassettePort.Location = new System.Drawing.Point(400, 400);
                TS_CassettePort.Show();
            }
            else
            {
                if (TS_CassettePort.WindowState == FormWindowState.Minimized)
                    TS_CassettePort.WindowState = FormWindowState.Normal;
                else
                    TS_CassettePort.Hide();
            }
        }

        #endregion

        #endregion

        #region MP

        #region Public

        public int MP_SlotData(int port, int slot) { return MP[port].GetSlotData[slot - 1]; }
        public string MP_Device(int port) { return MP[port].DeviceName; }
        public bool MP_Busy(int port) { return MP[port].Ui_Busy; }
        public bool MP_Presence(int port) { return MP[port].Ui_Presence; }
        public bool MP_CheckNeedMapping(int port) { return MP[port].NeedMapping; }
        public bool MP_CheckNullSlot(int port) { return MP[port].CheckNullSlot(); }
        public bool MP_CheckFullSlot(int port) { return MP[port].CheckFullSlot(); }
        public IOLPDoor MP_GetInDoorOpen(int port) { return MP[port].Ui_InDoor; }
        public IOLPDoor MP_GetOutDoorOpen(int port) { return MP[port].Ui_OutDoor; }
        public string MP_BarCode(int port) { return MP[port].Ui_Barcode; }
        //public MagazinePortType MP_CheckPortType(int port) { return MP[port].PortType; }
        public void MP_ChagePortType(int port, MagazinePortType type) { MP[port].Ui_PortType = type; }

        #endregion

        #region Interlock

        private bool MP_CheckInDoorInterlock()
        {
            
            if (MP[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return true;
            }

            if (MP[QueuedData.port].Ui_Ready == false)
            {
                Error = ErrorList.DeviceNotReady;
                return true;
            }

            if (MP[QueuedData.port].Ui_Protrude)
            {
                Error = ErrorList.LP_ProtrudeIsTrue_053B;
                return true;
            }


            if (MP[QueuedData.port].Ui_Invasion == false)
            {
                Error = ErrorList.RB_DeviceInvasion_0541;
                return true;
            }

            if (Robot2_DeviceCheckArm())
            {
                return true;
            }

            return false;
        }

        private bool MP_CheckOutDoorInterlock()
        {
            if (MP[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return true;
            }

            if (MP[QueuedData.port].Ui_Ready == false)
            {
                Error = ErrorList.DeviceNotReady;
                return true;
            }

            if (MP[QueuedData.port].Ui_Gratina)
            {
                Error = ErrorList.LP_CloseGratingOn_0534;
                return true;
            }

            return false;
        }

        private bool MP_CheckOnlyOutDoorClose()
        {

            if (QueuedData.command == SocketCommand.Load && MP_Presence(QueuedData.port) == false)
            {
                Error = ErrorList.LP_NotFoup_0333;
                return true;
            }

            if (MP[QueuedData.port].Ui_Barcode == "" && QueuedData.command == SocketCommand.Load)
            {
                Error = ErrorList.LP_BarCodeIsNull_0542;
                return true;
            }
            return false;
        }

        #endregion

        #region Command

        private bool MP_ResetError()
        {
            if (PLC.AlarmReseting)
            {
                //Error = ErrorList.PLCCmdRecvError;
                return true;
            }
            
            MP[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool MP_InDoorMoveCommand()
        {
            if (MP_CheckInDoorInterlock())
                return false;

            if (MP_CheckOnlyOutDoorClose())
                return false;

            MP[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool MP_OutDoorMoveCommand()
        {
            if (MP_CheckOutDoorInterlock())
                return false;

            //if (MP_CheckOnlyOutDoorClose())
            //    return false;

            MP[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool MP_ReloadingCommand()
        {
            if (MP[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return false;
            }

            if (MP[QueuedData.port].Ui_Ready == false)
            {
                Error = ErrorList.DeviceNotReady;
                return false;
            }

            if (MP[QueuedData.port].Ui_Presence != true) 
            {
                Error = ErrorList.LP_NotFoup_0333;
                return false;
            }

            MP[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        #endregion

        #region TS_UI

        private void SendMagazinePortCommand_Click(object sender, EventArgs e)
        {
            int port = Convert.ToInt32(TS_MagazinePort.cboCnt.Text) - 1;

            EFEM_Data.command = (SocketCommand)Enum.Parse(typeof(SocketCommand), TS_MagazinePort.cboCommand.Text);
            EFEM_Data.port = port;
            EFEM_Data.obj = NormalStatic.MagazinePort;

            switch ((SocketCommand)Enum.Parse(typeof(SocketCommand), TS_MagazinePort.cboCommand.Text))
            {
                case SocketCommand.ResetError:
                case SocketCommand.Home:
                case SocketCommand.Load:
                case SocketCommand.Unload:
                case SocketCommand.OutDoorClose:
                case SocketCommand.OutDoorOpen:
                case SocketCommand.Reloading:
                    {
                        Command_EnQueue(EFEM_Data);
                    }
                    break;
            }
            UI.Operate(string.Format("{0}{1}", NormalStatic.MagazinePort, TS_MagazinePort.cboCnt.Text), TS_MagazinePort.cboCommand.Text);
        }

        private void btnMagazinePort_Click(object sender, EventArgs e)
        {
            if (!TS_MagazinePort.Visible)
            {
                TS_MagazinePort.Location = new System.Drawing.Point(500, 500);
                TS_MagazinePort.Show();
            }
            else
            {
                if (TS_MagazinePort.WindowState == FormWindowState.Minimized)
                    TS_MagazinePort.WindowState = FormWindowState.Normal;
                else
                    TS_MagazinePort.Hide();
            }
        }

        #endregion

        #endregion

        #region Aligner

        public string AlignerDevice(int port) { return Aligner[port].DeviceName; }
        public bool AlignerBusy(int port) { return Aligner[port].Ui_Busy; }
        public WaferStatus AlignerPresence(int port) { return Aligner[port].Ui_Presence; }
        public AlignerStatus AlignerUnitStatus(int port) { return Aligner[port].Ui_Status; }
        public string AlignerOCRDegree(int port) { return Aligner[port].Ui_NotchAngle; }
        public string AlignerEQDegree(int port) { return Aligner[port].Ui_ToAngle; }
        public LiftPinEnum AlignerLiftPin(int port) { return Aligner[port].Ui_LiftPin; }
        public CommandResult AlignerCommandResult(int port) { return Aligner[port].Result; }

        public void Aligner_SetInfor(string value) //Walson 20201124
        {
            if (value == ",0/,0")
                value = "";

            Aligner[0].Ui_WaferInfo = value; 
        }
                
        #region Event

        private void AlignerEventContol(string PortName, SocketCommand command, bool Result)
        {
            int port = Convert.ToInt16(PortName.Substring(NormalStatic.Aligner.Length, 1)) - 1;

            Aligner[port].Result = Result ? CommandResult.OK : CommandResult.Fail;

            if (Result)
            {
                switch (command)
                {
                    case SocketCommand.Initial:
                        {
                            Aligner[port].Ui_Connect = true;
                            UI.InitialSystem(Aligner[port].DeviceName, NormalStatic.True, ErrorList.MaxCnt);
                        }
                        break;

                    case SocketCommand.Auto:
                        {
                            #region Update_SQL

                            //if (frmMain.EFEM_NowStatus == EFEMStatus.Run_Now)
                            //{
                            //    SQL_AlignerEventUpdate(port); 
                            //}

                            #endregion
                        }
                        break;

                }
                UI.Log(NormalStatic.System, Aligner[port].DeviceName, SystemList.CommandComplete, command.ToString());
            }
            else
            {
                switch (command)
                {
                    case SocketCommand.Initial:
                        {
                            Aligner[port].Ui_Connect = false;
                            UI.InitialSystem(Aligner[port].DeviceName, NormalStatic.False, ErrorList.AP_InitialFail_0393);
                        }
                        break;

                }

                UI.Alarm(Aligner[port].DeviceName, Aligner[port].NowErrorList);
            }
        }

        #endregion

        #region Interlock

        private bool AlignerCheckBusy()
        {
            if (Aligner[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return true;
            }

            if (Aligner[QueuedData.port].Ui_Connect == false)
            {
                Error = ErrorList.AP_SerialError_0381;
                return true;
            }

            return false;
        }

        private bool AlignerCheckPresence( WaferStatus flag)
        {
            if (Aligner[QueuedData.port].Ui_Presence == flag)
                return false;

            if (Aligner[QueuedData.port].Ui_Presence == WaferStatus.With)
                Error = ErrorList.RB_DeviceWith_0306;
            else
                Error = ErrorList.RB_DeviceWithout_0307;

            return true;
        }

        private bool AlignerCheckHome(AlignerStatus status)
        {
            if (Aligner[QueuedData.port].Ui_Status == status)
                return false;
            else
            {
                Error = ErrorList.AL_NotHome_0341;
            }
            return true;
        }

        private bool AlignerCheckVacuum(ref int port, bool flag)
        {
            if (Aligner[port].Ui_Vac == flag)
                return false;
            else
            {
                Error = ErrorList.AL_VauccmFail_0342;
            }

            return true;
        }

        #endregion

        #region Command

        private void Aligner_ReConnect(int port)
        {
            Aligner[port].COM_Connect();
        }

        private void Aligner_Disconnect(int port)
        {
            Aligner[port].COM_Disconnect();
        }

        private bool AlignerInitial()
        {
            Aligner_ReConnect(QueuedData.port);

            if (Aligner[QueuedData.port].Ui_Connect == true)
            {
                Aligner[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            }

            return true;
        }

        private bool AlignerNotLockMethod()
        {
            Aligner[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool AlignerSetMethod()
        {
            if (AlignerCheckBusy())
                return false;

            if (AlignerCheckHome(AlignerStatus.Home))
                return false;

            switch(QueuedData.command)
            {
                case SocketCommand.SetAlignerDegree:
                    Aligner[QueuedData.port].strParam[0] = QueuedData.Parameter;
                    break;
                case SocketCommand.SetIDReaderDegree:
                    Aligner[QueuedData.port].strParam[1] = QueuedData.Parameter;
                    break;
            }
        
            Aligner[QueuedData.port].Cmd_EnQueue(QueuedData.command);

            return true;
        }

        private bool AlignerMoveMethod()
        {
            if (AlignerCheckBusy())
                return false;

            if (QueuedData.command != SocketCommand.Home
            && QueuedData.command != SocketCommand.InitialHome
            && QueuedData.command != SocketCommand.LiftPinUp
            && QueuedData.command != SocketCommand.LiftPinDown
            && QueuedData.command != SocketCommand.CycleHomeCheckDegree
                )
            {
                if (AlignerCheckPresence(WaferStatus.With)) 
                    return false;
            }

            if (Robot1_DeviceCheckArm())
            {
                return false;
            }

            if (QueuedData.command == SocketCommand.CycleHomeCheckDegree)
            {
                string[] SplitTemp = QueuedData.Parameter.Split(',');
                Aligner[QueuedData.port].strParam[0] = SplitTemp[0];
                Aligner[QueuedData.port].strParam[1] = SplitTemp[1];
            }

            Aligner[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool AlignerGetMethod()
        {
            if (AlignerCheckBusy())
                return false;

            Aligner[QueuedData.port].Cmd_EnQueue(QueuedData.command);

            return true;
        }

        #endregion

        #region TS_UI

        private void SendAlignerCommand_Click(object sender, EventArgs e)
        {
            int port = Convert.ToInt32(TS_Aligner.cboCnt.Text) - 1;

            if (Aligner[port].Ui_Connect == false)
            {
                Error = ErrorList.AP_SerialError_0381;
                return;
            }

            EFEM_Data.command = (SocketCommand)Enum.Parse(typeof(SocketCommand), TS_Aligner.cboCommand.Text);
            EFEM_Data.port = port;
            EFEM_Data.obj = NormalStatic.Aligner;

            switch (EFEM_Data.command)
            {
                case SocketCommand.ResetError:
                case SocketCommand.Home:
                case SocketCommand.GetStatus:
                case SocketCommand.GetAlignerDegree:
                case SocketCommand.GetIDReaderDegree:
                case SocketCommand.GetAlignerWaferType:
                case SocketCommand.FindNotch:
                case SocketCommand.ToAngle:
                case SocketCommand.LiftPinDown:
                case SocketCommand.LiftPinUp:
                    {
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                case SocketCommand.Alignment:
                case SocketCommand.SetAlignerDegree:
                case SocketCommand.SetIDReaderDegree:
                    {
                        EFEM_Data.Parameter = ((Math.Round(Convert.ToDouble(TS_Aligner.txtDegree.Text), 1, MidpointRounding.AwayFromZero) * 10).ToString()).PadLeft(4, '0');
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                case SocketCommand.SetAlignerWaferType:
                    {
                        if (HCT_EFEM.EFEM_HasTable.Aligner_GetType.Contains(TS_Aligner.cboType.Text))
                        {
                            EFEM_Data.Parameter = HCT_EFEM.EFEM_HasTable.Aligner_GetType[TS_Aligner.cboType.Text].ToString();
                        }
                        //EFEM_Data.Parameter = TS_Aligner.cboType.Text;
                        Command_EnQueue(EFEM_Data);
                    }
                    break;

                case SocketCommand.AlignerVacuum:
                    {
                        EFEM_Data.Parameter = TS_Aligner.cboOnOff.Text;
                        Command_EnQueue(EFEM_Data);
                    }
                    break;
            }

            UI.Operate(string.Format("{0}{1}", EFEM_Data.obj, TS_Aligner.cboCnt.Text),
                       string.Format("{0}:{1}", TS_Aligner.cboCommand.Text, EFEM_Data.Parameter));
        }

        private void btnAligner_Click(object sender, EventArgs e)
        {
            if (!TS_Aligner.Visible)
            {
                TS_Aligner.Location = new System.Drawing.Point(600, 600);
                TS_Aligner.Show();
            }
            else
            {
                if (TS_Aligner.WindowState == FormWindowState.Minimized)
                    TS_Aligner.WindowState = FormWindowState.Normal;
                else
                    TS_Aligner.Hide();
            }
        }

        #endregion

        #endregion

        #region OCR

        public bool OCRReaderBusy(int port) { return OCR[port].Ui_Busy; }
        public string OCRReaderID(int port) { return OCR[port].Ui_ID; }
        public CommandResult OCRCommandResult(int port) { return OCR[port].Result; }

        #region Event

        private void OCRReaderEventContol(string PortName, SocketCommand command, bool Result)
        {
            int port = Convert.ToInt16(PortName.Substring(NormalStatic.OCRReader.Length, 1)) - 1;

            UI.Log(NormalStatic.OCRReader, PortName, SystemList.CommandComplete, string.Format("{0}:({1})", command, Result));

            OCR[port].Result = Result ? CommandResult.OK : CommandResult.Fail;

            if (Result)
            {
                //switch (port)
                //{
                //    case 0:
                //    case 1:
                //        {
                //            if (Robot_ArmExtend(0, false) == ArmStatus.Arm_Extend)
                //                HT.RobotData[0].Wafer[0].ID = OCRReaderID(port);
                //            else
                //                HT.RobotData[0].Wafer[1].ID = OCRReaderID(port);
                //        }
                //        break;

                //    case 2:
                //    case 3:
                //        {
                //            HT.StageData[port-2].Wafer.ID = OCRReaderID(port);
                //        }
                //        break;
                //}
                //UserSECS.SendEvent(StreamNo.S6, FunctionNo.F11, CEID_Item.WaferIDRead, string.Format("{0},{1},{2}", "CP10", "1", "********"));
                //UserSECS.SendEvent(StreamNo.S6,
                //              FunctionNo.F11,
                //              CEID_Item.CombineWaferAndCarrier,
                //              string.Format("{0},{1},{2},{3},{4}",
                //              "CP10",
                //              "1",
                //              "qweqweqwe",
                //              "MP3",
                //              "3"
                //              ));
                UI.Log(NormalStatic.System, OCR[port].DeviceName, SystemList.CommandComplete, string.Format("{0}:({1})", command, Result));

            }
            else
            {
                UI.Alarm(OCR[port].DeviceName, OCR[port].NowErrorList, OCR[port].NowErrorMsg);
            }
        }

        #endregion

        #region Interlock

        private bool OCRReaderCheckInterlock()
        {
            if (OCR[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return true;
            }

            if (OCR[QueuedData.port].Ui_Connect == false)
            {
                Error = ErrorList.AP_SocketError_0382;
                return true;
            }

            return false;
        }

        #endregion

        #region Command

        private bool OCRNormalCommand()
        {
            if (OCRReaderCheckInterlock())
            {
                return false;
            }

            OCR[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        #endregion

        #region TS_UI

        private void SendOCRCommand_Click(object sender, EventArgs e)
        {
            int port = Convert.ToInt32(TS_OCR.cboCnt.Text) - 1;

            if (OCR[port].Ui_Connect == false)
            {
                UI.Alarm(OCR[port].DeviceName, ErrorList.AP_SocketError_0382);
                return;
            }

            EFEM_Data.command = (SocketCommand)Enum.Parse(typeof(SocketCommand), TS_OCR.cboCommand.Text);
            EFEM_Data.port = port;
            EFEM_Data.obj = NormalStatic.OCRReader;

            switch (EFEM_Data.command)
            {
                case SocketCommand.Read:
                case SocketCommand.Connect:
                    {
                        Command_EnQueue(EFEM_Data);
                    }
                    break;
            }
            UI.Operate(string.Format("{0}{1}", EFEM_Data.obj, TS_OCR.cboCnt.Text),
                       string.Format("{0}:{1}", TS_OCR.cboCommand.Text, EFEM_Data.Parameter));

        }

        private void btnOCR_Click(object sender, EventArgs e)
        {
            if (!TS_OCR.Visible)
            {
                TS_OCR.Location = new System.Drawing.Point(700, 700);
                TS_OCR.Show();
            }
            else
            {
                if (TS_OCR.WindowState == FormWindowState.Minimized)
                    TS_OCR.WindowState = FormWindowState.Normal;
                else
                    TS_OCR.Hide();
            }
        }

        #endregion

        #endregion

        #region D900

        public bool D900Busy(int port) { return D900[port].Ui_Busy; }
        public string D900ID(int port) { return D900[port].Ui_ID; }
        public CommandResult D900CommandResult(int port) { return D900[port].Result; }

        #region Event

        private void D900EventContol(string PortName, SocketCommand command, bool Result)
        {
            int port = Convert.ToInt16(PortName.Substring(NormalStatic.D900.Length, 1)) - 1;

            UI.Log(NormalStatic.D900, PortName, SystemList.CommandComplete, string.Format("{0}:({1})", command, Result));

            D900[port].Result = Result ? CommandResult.OK : CommandResult.Fail;

            if (Result)
            {
                UI.Log(NormalStatic.System, D900[port].DeviceName, SystemList.CommandComplete, string.Format("{0}:({1})", command, Result));

            }
            else
            {
                UI.Alarm(D900[port].DeviceName, D900[port].NowErrorList, D900[port].NowErrorMsg);
            }
        }

        #endregion

        #region Command

        private bool D900Command()
        {
            if (D900[QueuedData.port].Ui_Connect == false)
            {
                Error = ErrorList.AP_SocketError_0382;
                return false;
            }

            if (D900[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return false;
            }

            D900[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        #endregion

        #region TS_UI

        private void SendD900Command_Click(object sender, EventArgs e)
        {
            int port = Convert.ToInt32(TS_D900.cboCnt.Text) - 1;

            if (D900[port].Ui_Connect == false)
            {
                UI.Alarm(D900[port].DeviceName, ErrorList.AP_SocketError_0382);
                return;
            }

            EFEM_Data.command = (SocketCommand)Enum.Parse(typeof(SocketCommand), TS_D900.cboCommand.Text);
            EFEM_Data.port = port;
            EFEM_Data.obj = NormalStatic.D900;

            switch (EFEM_Data.command)
            {
                case SocketCommand.Read:
                case SocketCommand.Connect:
                    {
                        Command_EnQueue(EFEM_Data);
                    }
                    break;
            }
            UI.Operate(string.Format("{0}{1}", EFEM_Data.obj, TS_D900.cboCnt.Text),
                       string.Format("{0}:{1}", TS_D900.cboCommand.Text, EFEM_Data.Parameter));

        }

        private void btnD900_Click(object sender, EventArgs e)
        {
            if (!TS_D900.Visible)
            {
                TS_D900.Location = new System.Drawing.Point(700, 700);
                TS_D900.Show();
            }
            else
            {
                if (TS_D900.WindowState == FormWindowState.Minimized)
                    TS_D900.WindowState = FormWindowState.Normal;
                else
                    TS_D900.Hide();
            }
        }

        #endregion

        #endregion

        #region Stage

        #region Event

        public string StageDevice(int port) { return Stage[port].DeviceName; }
        public CommandResult StgageCommandResult(int port) { return Stage[port].Result; }

        public bool StageBusy(int port) { return Stage[port].Ui_Busy; }
        public bool StageReady(int port) { return Stage[port].Ui_Ready; }
        public WaferStatus StageWaferPresence(int port) { return Stage[port].Ui_WaferPresence; }
        public WaferStatus StageCarrierWaferPresence(int port) { return Stage[port].Ui_CarrierWaferPresence; }
        public WaferStatus StageCarrierPresence(int port) { return Stage[port].Ui_CarrierPresence; }

        public bool StageWaferInvade(int port) { return Stage[port].Ui_WaferSideInvade; }
        public bool StageCarrierInvade(int port) { return Stage[port].Ui_CarrierSideInvade; }
        public bool StageWaferProturde(int port) { return Stage[port].Ui_WaferSideProtrude; }
        public bool StageCarrierProturde(int port) { return Stage[port].Ui_CarrieSideProtrude; }

        public bool StageWaferAvailable(int port) { return Stage[port].Ui_WaferAvailable; }
        public bool StageCarrierAvailable(int port) { return Stage[port].Ui_CarrieAvailable; }

        private void StageEventContol(string PortName, SocketCommand command, bool Result)
        {
            int port = Convert.ToInt16(PortName.Substring(NormalStatic.Stage.Length, 1)) - 1;

            Stage[port].Result = Result ? CommandResult.OK : CommandResult.Fail;

            if (Result)
            {
                switch(command)
                {
                    case SocketCommand.Mix:
                        {
                            HT.Converte(ref HT.StageData[port].Wafer,  ref HT.StageData[port].CarrierWafer);
                            HT.StageData[port].SetWafer();
                            HT.StageData[port].SetCarrierWafer();

                            //Walson 20201124 修改 Start

                            HT.DataConverte(ref HT.StageData[port].WaferData, ref HT.StageData[port].CarrierWaferData);
                            HT.StageData[port].SetWaferData();
                            HT.StageData[port].SetCarrierWaferData();

                            Stage_SetInfo(port);

                            //Walson 20201124 修改 End
                        }
                        break;

                    case SocketCommand.Separation:
                        {
                            HT.Converte(ref HT.StageData[port].CarrierWafer, ref HT.StageData[port].Wafer);
                            HT.StageData[port].SetWafer();
                            HT.StageData[port].SetCarrierWafer();

                            //Walson 20201124 修改 Start
                            HT.DataConverte( ref HT.StageData[port].CarrierWaferData, ref HT.StageData[port].WaferData);
                            HT.StageData[port].SetWaferData();
                            HT.StageData[port].SetCarrierWaferData();

                            Stage_SetInfo(port);

                            //Walson 20201124 修改 End
                        }
                        break;


                    case SocketCommand.Put_Carrier_Wafer:
                        {
                            if (HT.StageData[port].Wafer.Status == WaferStatus.With)
                            {
                                HT.Converte(ref HT.StageData[port].Wafer, ref HT.StageData[port].CarrierWafer);
                                //HT.StageData[port].SetWafer();
                                //HT.StageData[port].SetCarrierWafer();

                                //Joanne 20200623
                                HT.StageData[port].SetWaferData();
                                HT.StageData[port].SetCarrierData();
                                Stage[port].Ui_WaferInfo = "";
                            }
                        }
                        break;

                    case SocketCommand.Put_Wafer_Wafer:
                        {
                            if (HT.StageData[port].CarrierWafer.Status == WaferStatus.With)
                            {
                                HT.Converte(ref HT.StageData[port].CarrierWafer, ref HT.StageData[port].Wafer);
                                HT.StageData[port].SetWafer();
                                HT.StageData[port].SetCarrierWafer();
                                //Stage[port].Ui_WaferInfo = string.Format("{0},{1}", HT.StageData[port].Wafer.SocPort, HT.StageData[port].Wafer.SocSlot);

                                //Joanne 20201009 Add Start
                                HT.StageData[port].SetWaferData();
                                HT.StageData[port].SetCarrierData();
                                Stage[port].Ui_WaferInfo = string.Format("{0},{1}/{2},{3}", HT.StageData[port].WaferData.SocPort, HT.StageData[port].WaferData.SocSlot, HT.StageData[port].WaferData.DesPort, HT.StageData[port].WaferData.DesSlot);
                            }
                        }
                        break;

                }
                UI.Log(NormalStatic.System, Stage[port].DeviceName, SystemList.CommandComplete, string.Format("{0}:({1})", command, Result));
            }
            else
            {
                UI.Alarm(Stage[port].DeviceName, Stage[port].NowErrorList, Stage[port].NowErrorMsg);
            }
        }
        public void Stage_SetWaferInfor(int port ,string value) { Stage[port].Ui_WaferInfo = value; }
        public void Stage_SetCarrierInfor(int port, string value) { Stage[port].Ui_CarrierInfo = value; }

        public void Stage_SetInfo(int port) // Walson 20201124
        {
            string w_info = "";
            string c_info = "";

            if (HT.Recipe.AutoMode == PJ_Type.Load)  // UI顯示 Soc/Des
            {           
                if (HT.StageData[port].CarrierData.SocPort.Contains(NormalStatic.MagazinePort)) // Is OMS
                    c_info = string.Format("(OMS){0},{1}/{2},{3}", HT.StageData[port].CarrierData.SocPort, HT.StageData[port].CarrierData.SocSlot, HT.StageData[port].CarrierData.DesPort, HT.StageData[port].CarrierData.DesSlot);
                else   
                    c_info = string.Format("{0},{1}/{2},{3}", HT.StageData[port].CarrierWaferData.SocPort, HT.StageData[port].CarrierWaferData.SocSlot, HT.StageData[port].CarrierData.DesPort, HT.StageData[port].CarrierData.DesSlot);

                w_info = string.Format("{0},{1}/{2},{3}", HT.StageData[port].WaferData.SocPort, HT.StageData[port].WaferData.SocSlot, HT.StageData[port].WaferData.DesPort, HT.StageData[port].WaferData.DesSlot);
            }
            else if (HT.Recipe.AutoMode == PJ_Type.Unload) // UI顯示 Des/Soc
            {
                if (HT.StageData[port].CarrierData.SocPort.Contains(NormalStatic.MagazinePort)) // Is OMS
                    c_info = string.Format("(OMS){2},{3}/{0},{1}", HT.StageData[port].CarrierData.SocPort, HT.StageData[port].CarrierData.SocSlot, HT.StageData[port].CarrierData.DesPort, HT.StageData[port].CarrierData.DesSlot);
                else
                    c_info = string.Format("{2},{3}/{0},{1}", HT.StageData[port].CarrierWaferData.SocPort, HT.StageData[port].CarrierWaferData.SocSlot, HT.StageData[port].CarrierData.DesPort, HT.StageData[port].CarrierData.DesSlot);

                w_info = string.Format("{2},{3}/{0},{1}", HT.StageData[port].WaferData.SocPort, HT.StageData[port].WaferData.SocSlot, HT.StageData[port].WaferData.DesPort, HT.StageData[port].WaferData.DesSlot);
            }

            if (w_info == ",0/,0")
                w_info = "";
            if (c_info == ",0/,0")
                c_info = "";

            Stage[port].Ui_WaferInfo = w_info;
            Stage[port].Ui_CarrierInfo = c_info;
        }

        #endregion

        #region Interlock

        private bool StageCheckBusy()
        {
            if (Stage[QueuedData.port].Ui_Busy)
            {
                Error = ErrorList.DeviceIsBusy_0301;
                return true;
            }

            if (Stage[QueuedData.port].Ui_Ready == false)
            {
                Error = ErrorList.DeviceNotReady;
                return true;
            }

            if (Stage[QueuedData.port].Ui_CarrierSideInvade == false || Stage[QueuedData.port].Ui_WaferSideInvade == false)
            {
                Error = ErrorList.RB_DeviceInvasion_0541; 
                return true;
            }

            if (QueuedData.command != SocketCommand.Home && QueuedData.command != SocketCommand.Clamp)
            {
                if (Stage[QueuedData.port].Ui_WaferSideProtrude == true || Stage[QueuedData.port].Ui_CarrieSideProtrude == true)
                {
                    Thread.Sleep(100); // Walson 20201124 防止UI刷新速度過慢
                    if (Stage[QueuedData.port].Ui_WaferSideProtrude == true || Stage[QueuedData.port].Ui_CarrieSideProtrude == true)
                    {
                        Error = ErrorList.AP_DeviceWaferSensorError_0540;
                        return true;
                    }
                }
            }

            if (QueuedData.command != SocketCommand.Home && Stage[QueuedData.port].Ui_WaferAvailable == false) 
            {
                Error = ErrorList.SG_WaferAvailableOff_0550;
                return true;
            }
            if (QueuedData.command != SocketCommand.Home && Stage[QueuedData.port].Ui_CarrieAvailable == false)
            {
                Error = ErrorList.SG_CarrierAvailableOff_0551;
                return true;
            }

            return false;
        }

        private bool StageCheckMovNormal()
        {
            if (Stage[QueuedData.port].Ui_RobotWaferPresence != WaferStatus.WithOut)
            {
                Error = ErrorList.RB_DeviceWith_0306;
                return true;
            }

            if (Stage[QueuedData.port].Ui_CarrierPresence != WaferStatus.With)
            {
                Error = ErrorList.RB_DeviceWithout_0307;
                return true;
            }

            return false;
        }

        private bool StageCheckMix()
        {
            if (Stage[QueuedData.port].Ui_WaferPresence != WaferStatus.With)
            {
                Error = ErrorList.RB_DeviceWithout_0307;
                return true;
            }

            if (Stage[QueuedData.port].Ui_CarrierWaferPresence != WaferStatus.WithOut)
            {
                Error = ErrorList.RB_DeviceWith_0306;
                return true;
            }

            return false;
        }

        private bool StageCheckSeparater()
        {     
            if (Stage[QueuedData.port].Ui_WaferPresence != WaferStatus.WithOut)
            {
                Error = ErrorList.RB_DeviceWith_0306;
                return true;
            }

            if (Stage[QueuedData.port].Ui_CarrierWaferPresence != WaferStatus.With)
            {
                Error = ErrorList.RB_DeviceWithout_0307;
                return true;
            }

            return false;
        }

        #endregion

        #region Command

        private bool StageResetError()
        {
            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool StageGetCarrierWafer()
        {
            if (StageCheckBusy())
                return false;

            if (Stage[QueuedData.port].Ui_CarrierWaferPresence != WaferStatus.With)
            {
                Error = ErrorList.RB_DeviceWithout_0307;
                return false;
            }

            if (Stage[QueuedData.port].Ui_RobotWaferPresence != WaferStatus.WithOut)
            {
                Error = ErrorList.RB_DeviceWith_0306;
                return false;
            }

            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool StageGetWaferWafer()
        {
            if (StageCheckBusy())
                return false;

            if (Stage[QueuedData.port].Ui_WaferPresence != WaferStatus.With)
            {
                Error = ErrorList.RB_DeviceWithout_0307;
                return false;
            }
            if (Stage[QueuedData.port].Ui_RobotWaferPresence != WaferStatus.WithOut)
            {
                Error = ErrorList.RB_DeviceWith_0306;
                return false;
            }
            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool StagePutCarrierWafer()
        {
            if (StageCheckBusy())
                return false;

            if (Stage[QueuedData.port].Ui_CarrierWaferPresence != WaferStatus.WithOut)
            {
                Error = ErrorList.RB_DeviceWith_0306;
                return false;
            }
            if (Stage[QueuedData.port].Ui_RobotWaferPresence != WaferStatus.With)
            {
                Error = ErrorList.RB_DeviceWithout_0307;
                return false;
            }

            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool StagePutWaferWafer()
        {
            if (StageCheckBusy())
                return false;

            if (Stage[QueuedData.port].Ui_WaferPresence != WaferStatus.WithOut)
            {
                Error = ErrorList.RB_DeviceWith_0306;
                return false;
            }

            if (Stage[QueuedData.port].Ui_RobotWaferPresence != WaferStatus.With)
            {
                Error = ErrorList.RB_DeviceWithout_0307;
                return false;
            }

            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool StageHome()
        {
            if (StageCheckBusy())
                return false;

            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool StageMix()
        {
            if (StageCheckBusy())
                return false;

            if (StageCheckMovNormal())
                return false;

            if (StageCheckMix())
                return false;

            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        private bool StageSeparater()
        {
            if (StageCheckBusy())
                return false;

            if(StageCheckMovNormal())
                return false;

            if (StageCheckSeparater())
                return false;

            Stage[QueuedData.port].Cmd_EnQueue(QueuedData.command);
            return true;
        }

        #endregion

        #region TS_UI

        private void SendStageCommand_Click(object sender, EventArgs e)
        {
            int port = Convert.ToInt32(TS_Stage.cboCnt.Text) - 1;

            if (PLC.ST_Conn == false)
            {
                Error = ErrorList.AP_SocketError_0382;
                return;
            }

            EFEM_Data.command = (SocketCommand)Enum.Parse(typeof(SocketCommand), TS_Stage.cboCommand.Text);
            EFEM_Data.port = port;
            EFEM_Data.obj = NormalStatic.Stage;

            switch ((SocketCommand)Enum.Parse(typeof(SocketCommand), TS_Stage.cboCommand.Text))
            {
                case SocketCommand.Home:
                case SocketCommand.ResetError:
                case SocketCommand.Mix:
                case SocketCommand.Clamp:
                case SocketCommand.Separation:
                case SocketCommand.Get_Carrier_Wafer:
                case SocketCommand.Put_Carrier_Wafer:
                case SocketCommand.Get_Wafer_Wafer:
                case SocketCommand.Put_Wafer_Wafer:
                    {
                        Command_EnQueue(EFEM_Data);
                    }
                    break;
            }
            UI.Operate(string.Format("{0}{1}", NormalStatic.Stage, TS_Stage.cboCnt.Text), TS_Stage.cboCommand.Text);
        }

        private void btnStage_Click(object sender, EventArgs e)
        {
            if (!TS_Stage.Visible)
            {
                TS_Stage.Location = new System.Drawing.Point(800, 800);
                TS_Stage.Show();
            }
            else
            {
                if (TS_Stage.WindowState == FormWindowState.Minimized)
                    TS_Stage.WindowState = FormWindowState.Normal;
                else
                    TS_Stage.Hide();
            }
        }

        #endregion

        #endregion

        #region Adam

        public void EFEMPageChange(int index)
        {
            tctlEFEM.SelectTab(index);
        }

        public void AuthorityChange(bool CoreBusy)
        {
            if (InvokeRequired)
            {
                this.Invoke(new MethodInvoker(delegate() { AuthorityChange(CoreBusy); }));
                return;
            }

            if (HT.EFEM.Authority == AuthorityTable.Operator || CoreBusy || HT.EFEM.Status == EFEMStatus.Power_Off || HT.EFEM.Mode != EFEMMode.Local)
                gbxButton.Visible = false; //Mike
            else
                gbxButton.Visible = true;
        }

        //private void AdamSetResult(string Name, string CmdIndexValue, bool Result)
        //{
        //    if (!Result)
        //    {
        //        UI.Alarm(Name, ErrorList.CommandError, CmdIndexValue);
        //    }
        //    else
        //    {
        //        UI.Log(NormalStatic.IO, Name, SystemList.CommandComplete, CmdIndexValue);
        //    }
        //}


        public void PowerOffDeviceDisconnect()
        {
            for (int i = 0; i < RobotCount; i++)
            {
                Robot_Disconnect(i);
            }

            for (int i = 0; i < AlignerCount; i++)
            {
                Aligner_Disconnect(i);
            }

            CloseTSForm();
        }

        public void PowerOnDeviceInitial()
        {
            CmdStruct EFEM_Data = new CmdStruct();

            EFEM_Data.command = SocketCommand.Initial;

            if(HT.EFEM.PLC_EFEM_Status[(int)EFEM_DI.PowerOn] == false || (HT.EFEM.PLC_EFEM_Status[(int)EFEM_DI.Manual] == true &&  HT.EFEM.PLC_EFEM_Status[(int)EFEM_DI.Auto] == false))
            {
                for (int i = 0; i < RobotCount; i++)
                {
                    UI.InitialSystem(Robot[i].DeviceName, NormalStatic.False, ErrorList.AP_InitialFail_0393);

                }
                for (int i = 0; i < AlignerCount; i++)
                {
                    UI.InitialSystem(Aligner[i].DeviceName, NormalStatic.False, ErrorList.AP_InitialFail_0393);

                }
            }
            else
            {
                for (int i = 0; i < RobotCount; i++)
                {
                    EFEM_Data.port = i;
                    EFEM_Data.obj = NormalStatic.Robot;

                    Command_EnQueue(EFEM_Data);

                }

                for (int i = 0; i < AlignerCount; i++) 
                {
                    EFEM_Data.obj = NormalStatic.Aligner;
                    EFEM_Data.port = i;
                    Command_EnQueue(EFEM_Data);
                }
            }
        }
        //Wayne 20190915
        public void EfemDiChange(EFEM_DI index, bool Result)
        {
            UI.Log(NormalStatic.IO, string.Format("{0}_Di", NormalStatic.EFEM), SystemList.DiReceive, string.Format("{0}:({1})", Result == true ? "1" : "0", index));

            switch (index)
            {
                case EFEM_DI.Air1_Error:
                case EFEM_DI.Air2_Error:
                case EFEM_DI.EMS:
                case EFEM_DI.DoorOpen:
                    {
                        if (Result == true)
                        {
                            if ((index == EFEM_DI.Air1_Error || index == EFEM_DI.Air2_Error) && HT.EFEM.Status == EFEMStatus.Init_Now)
                                ;
                            else
                                UI.Alarm(NormalStatic.EFEM, ErrorList.EF_Air1Error_0543 + ((int)index) - (int)EFEM_DI.Air1_Error); 

                            if(index == EFEM_DI.DoorOpen)
                            {
                                for (int i = 0; i < HCT_EFEM.CassetteCount; i++)
                                {
                                    if(CP_Presence(i) == true)
                                    {
                                        CP[i].NeedMapping = true;
                                        CP[i].EFEM_DoorOpen_CleanSlot();
                                    }
                                }

                                for (int i = 0; i < HCT_EFEM.MagazineCount; i++)
                                {
                                    if (MP_Presence(i) == true)
                                    {
                                        MP[i].NeedMapping = true;
                                        MP[i].EFEM_DoorOpen_CleanSlot();
                                    }
                                }
                            }
                        }
                    }
                    break;

                case EFEM_DI.Ion_Error:
                    {
                        if (Result == true)
                        {
                            UI.Alarm(NormalStatic.EFEM, ErrorList.EF_Ionizer_1102); 
                        }
                    }
                    break;

                case EFEM_DI.PowerOn:
                    {
                        if (Result == false)
                        {
                            AuthorityChange(true);

                            EFEM_StatusChange(index, Result);
                             UI.Alarm(NormalStatic.EFEM, ErrorList.EF_PowerOff_0547); 
                        }
                        else
                        {
                            AuthorityChange(false);
                            EFEM_StatusChange(index, Result);
                        }
                        IO_Monitor.InitialEventFlag = false;
                    }
                    break;

                case EFEM_DI.Manual:
                    {
                        if (Result == true)
                        {
                            for (int i = 0; i < RobotCount; i++)
                            {
                                Robot[i].Ui_Remote = false;
                            }

                            for (int i = 0; i < AlignerCount; i++)
                            {
                                Aligner[i].Ui_Connect = false;
                            }
                            UI.Alarm(NormalStatic.EFEM, ErrorList.EF_Manual_0548);  
                        }
                    }
                    break;

                case EFEM_DI.Auto:
                    break;
            }
        }
        #endregion

        #region 多載 ReadExcel

        public static void ReadExcel(string ref_FilePath, ref List<string[,]> TempList)
        {
            FileStream ExcelFS = new FileStream(ref_FilePath, FileMode.Open);
            HSSFWorkbook WB = new HSSFWorkbook(ExcelFS);

            HSSFSheet St = (HSSFSheet)WB.GetSheetAt(0);
            int RowCount = St.LastRowNum + 1;
            int ColCount = St.GetRow(0).Cells.Count;
            string[,] tempstr = new string[RowCount, ColCount];
            TempList = new List<string[,]>();

            for (int row = 0; row < RowCount; row++)
            {
                for (int col = 0; col < ColCount; col++)
                {
                    tempstr[row, col] = St.GetRow(row).GetCell(col).ToString();
                }
            }
            TempList.Add(tempstr);

            ExcelFS.Close();
        }

        public static void ReadExcel(string ref_FilePath, ref List<string[,]>[] TempList)
        {
            lock (Write_Excel)
            {
                FileStream ExcelFS = new FileStream(ref_FilePath, FileMode.Open);
                HSSFWorkbook WB = new HSSFWorkbook(ExcelFS);


                int Ex_StCount = WB.Count;
                TempList = new List<string[,]>[Ex_StCount];

                for (int StCnt = 0; StCnt < Ex_StCount; StCnt++)
                {

                    HSSFSheet St = (HSSFSheet)WB.GetSheetAt(StCnt);
                    int RowCount = St.LastRowNum + 1;
                    int ColCount = St.GetRow(0).Cells.Count;
                    string[,] tempstr = new string[RowCount, ColCount];
                    TempList[StCnt] = new List<string[,]>();

                    for (int row = 0; row < RowCount; row++)
                    {
                        for (int col = 0; col < ColCount; col++)
                        {
                            if (St.GetRow(row).GetCell(col) == null)
                                tempstr[row, col] = null;
                            else
                                tempstr[row, col] = St.GetRow(row).GetCell(col).ToString();
                        }
                    }
                    TempList[StCnt].Add(tempstr);
                }

                ExcelFS.Close();
            }
        }

        
        public static void WirteExcel(int ref_sheet,int ref_row,int ref_col,string ref_value)
        {
            lock (Write_Excel)
            {
                FileStream ExcelFS = new FileStream(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.VID, ".xls"), FileMode.OpenOrCreate);
                HSSFWorkbook WB = new HSSFWorkbook(ExcelFS);
                ExcelFS.Close();
                HSSFSheet st = (HSSFSheet)WB.GetSheetAt(ref_sheet);
                st.GetRow(ref_row).GetCell(ref_col).SetCellValue(ref_value);
                

                ExcelFS = new FileStream(string.Format("{0}{1}{2}", NormalStatic.ExcelPath, NormalStatic.VID, ".xls"), FileMode.Create);
                WB.Write(ExcelFS);
                WB.Close();
                ExcelFS.Close();
            }
        }
        #endregion

        #region TS_AllClose

        public void CloseTSForm()
        {
            if (RobotCount > 0 && TS_Robot.Visible == true)
                TS_Robot.Hide();

            if (CassetteCount > 0 && TS_CassettePort.Visible == true)
                TS_CassettePort.Hide();

            if (MagazineCount > 0 && TS_MagazinePort.Visible == true)
                TS_MagazinePort.Hide();

            if (AlignerCount > 0 && TS_Aligner.Visible == true)
                TS_Aligner.Hide();

            if (OCRCount > 0 && TS_OCR.Visible == true)
                TS_OCR.Hide();

            if (StageCount > 0 && TS_Stage.Visible == true)
                TS_Stage.Hide();
        }

        #endregion

        #region PLC

        //Wayne 20190730
        //private void EFEM_PLCCmd(All_Device ref_ADev, PLC_Device ref_Dev, int ref_No, int ref_val)
        //{
        //    PLC_SetValue(ref_ADev, ref_Dev, ref_No, ref_val);
        //}

        public void PLC_CmdRecv(string ref_Recv, All_Device ref_Dev)
        {
            //int idx = -1;
            int no = -1;
            switch (ref_Dev)
            {
                case All_Device.CP1:
                case All_Device.CP2:
                case All_Device.CP3:
                case All_Device.CP4:
                case All_Device.CP5:
                case All_Device.CP6:
                case All_Device.CP7:
                case All_Device.CP8:
                case All_Device.CP9:
                case All_Device.CP10:
                    {
                        no = Convert.ToInt16(ref_Dev.ToString().Substring(NormalStatic.CstPort.Length, ref_Dev.ToString().Length - NormalStatic.CstPort.Length))-1;
                        CP[no].PLCRecv_EnQueue(ref_Recv);
                    }
                    break;

                case All_Device.MP1:
                case All_Device.MP2:
                case All_Device.MP3:
                case All_Device.MP4:
                case All_Device.MP5:
                case All_Device.MP6:
                case All_Device.MP7:
                case All_Device.MP8:
                    {
                        no = Convert.ToInt16(ref_Dev.ToString().Substring(NormalStatic.MagazinePort.Length, ref_Dev.ToString().Length - NormalStatic.MagazinePort.Length)) - 1;
                        MP[no].PLCRecv_EnQueue(ref_Recv);
                    }
                    break;

                case All_Device.Stage1:
                case All_Device.Stage2:
                    {
                        no = Convert.ToInt16(ref_Dev.ToString().Substring(NormalStatic.Stage.Length, 1)) - 1;
                        Stage[no].PLCRecv_EnQueue(ref_Recv);
                    }
                    break;
                case All_Device.EFEM:
                    break;

                case All_Device.Aligner1:
                    {
                        no = Convert.ToInt16(ref_Dev.ToString().Substring(NormalStatic.Aligner.Length, 1)) - 1;
                        Aligner[no].Check_PLC_ReceiveIsOK = ref_Recv;
                    }
                    break;

                case All_Device.Robot1:
                case All_Device.Robot2:
                    {
                        no = Convert.ToInt16(ref_Dev.ToString().Substring(NormalStatic.Robot.Length, 1)) - 1;
                        Robot[no].Check_PLC_ReceiveIsOK = ref_Recv;
                    }
                    break;
            }
        }
        //IOLP

        #endregion

        //Walson 20201117 修改 Start
        public void SetCPData(int PortIdx, string SocPort, int SocSlot, string DesPort, int DesSlot)
        {
            if (CP[PortIdx].GetSlotData[SocSlot -1] != (int)WaferStatus.With) 
                return;

            // Des = Real MP
            // Soc = CP、OMS In、OMS out
            //Load Flow的Soc Wafer要寫入資訊並更新UI            
            HT.CassetteData[PortIdx].WaferData[SocSlot - 1].SocPort = SocPort;
            HT.CassetteData[PortIdx].WaferData[SocSlot - 1].SocSlot = SocSlot;
            HT.CassetteData[PortIdx].WaferData[SocSlot - 1].DesPort = DesPort;
            HT.CassetteData[PortIdx].WaferData[SocSlot - 1].DesSlot = DesSlot;
            HT.CassetteData[PortIdx].SetWaferData(PortIdx, SocSlot - 1);

            CP[PortIdx].SetSlotInfo((int)WaferStatus.With, PortIdx, SocSlot - 1);

            if (HT.Recipe.AutoMode != PJ_Type.Sortering) //20210203
            {
                //Load Flow的Des Carrier也要寫入資訊(但是不更新UI)
                int DesPortIdx = int.Parse(DesPort.Substring(NormalStatic.MagazinePort.Length)) - 1;
                HT.MagazineData[DesPortIdx].CarrierData[DesSlot - 1].SocPort = SocPort;
                HT.MagazineData[DesPortIdx].CarrierData[DesSlot - 1].SocSlot = SocSlot;
                HT.MagazineData[DesPortIdx].CarrierData[DesSlot - 1].DesPort = DesPort;
                HT.MagazineData[DesPortIdx].CarrierData[DesSlot - 1].DesSlot = DesSlot;
                HT.MagazineData[DesPortIdx].SetCarrierData(DesPortIdx, DesSlot - 1);
            }
        }

        public void SetMPData(int PortIdx, string SocPort, int SocSlot, string DesPort, int DesSlot)
        {
            // Des = Real MP
            // Soc = CP、OMS In、OMS out
            if (HT.MagazineData[PortIdx].PortType == MagazinePortType.OMS_In && HT.Recipe.AutoMode == PJ_Type.Load)
            {                
                if (MP[PortIdx].GetSlotData[SocSlot - 1] != (int)WaferStatus.With)
                    return;

                //Load Flow的OMS In要寫入資訊並更新UI
                HT.MagazineData[PortIdx].CarrierData[SocSlot - 1].SocPort = SocPort;
                HT.MagazineData[PortIdx].CarrierData[SocSlot - 1].SocSlot = SocSlot;
                HT.MagazineData[PortIdx].CarrierData[SocSlot - 1].DesPort = DesPort;
                HT.MagazineData[PortIdx].CarrierData[SocSlot - 1].DesSlot = DesSlot;
                HT.MagazineData[PortIdx].SetCarrierData(PortIdx, SocSlot - 1);

                MP[PortIdx].SetSlotInfo((int)WaferStatus.With, PortIdx, SocSlot - 1);
            }
            else if (HT.MagazineData[PortIdx].PortType == MagazinePortType.Real)
            {
                if (MP[PortIdx].GetSlotData[DesSlot - 1] != (int)WaferStatus.With)
                    return;

                if (SocPort.Contains(NormalStatic.CstPort) && HT.Recipe.AutoMode == PJ_Type.Unload)
                {
                    //Unload Flow的Wafer(In Carrier)要寫入CP資訊
                    HT.MagazineData[PortIdx].WaferData[DesSlot - 1].SocPort = SocPort;
                    HT.MagazineData[PortIdx].WaferData[DesSlot - 1].SocSlot = SocSlot;
                    HT.MagazineData[PortIdx].WaferData[DesSlot - 1].DesPort = DesPort;
                    HT.MagazineData[PortIdx].WaferData[DesSlot - 1].DesSlot = DesSlot;
                    HT.MagazineData[PortIdx].SetWaferData(PortIdx, DesSlot - 1);
                    //Unload Flow的Carrier要寫入MP資訊
                    HT.MagazineData[PortIdx].CarrierData[DesSlot - 1].DesPort = DesPort;
                    HT.MagazineData[PortIdx].CarrierData[DesSlot - 1].DesSlot = DesSlot;                    
                }
                else 
                {
                    // Unload Flow的OMS與Carrier要寫入資訊並更新UI
                    HT.MagazineData[PortIdx].CarrierData[DesSlot - 1].SocPort = SocPort;
                    HT.MagazineData[PortIdx].CarrierData[DesSlot - 1].SocSlot = SocSlot;
                    HT.MagazineData[PortIdx].CarrierData[DesSlot - 1].DesPort = DesPort;
                    HT.MagazineData[PortIdx].CarrierData[DesSlot - 1].DesSlot = DesSlot;
                }

                HT.MagazineData[PortIdx].SetCarrierData(PortIdx, DesSlot - 1);
                MP[PortIdx].SetSlotInfo((int)WaferStatus.With, PortIdx, DesSlot - 1);
            }       
        }

        PJ_Type Recipe = PJ_Type.MaxCnt;
        public PJ_Type Ui_Recipe
        {
            set
            {
                Recipe = value;
                if (InvokeRequired)
                {
                    this.Invoke(new MethodInvoker(delegate() { Ui_Recipe = value; }));
                    return;
                }
                
                switch(value)
                {
                    case PJ_Type.Load:
                        labCurrentRecipe.Text = "CP -> MP";
                        break;
                    case PJ_Type.Unload:
                        labCurrentRecipe.Text = "MP -> CP";
                        break;
                    case PJ_Type.Sortering:
                        labCurrentRecipe.Text = "CP -> CP";
                        break;
                }
                
            }
            get { return Recipe; }
        }
        //Walson 20201117 修改 End
    }
}
